$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.effects$asyncK(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.SuspendFunction1((kotlinx.coroutines.CoroutineScope, arrow.effects.asyncK.A)))arrow.effects/kotlinx.coroutines.-coroutine-scope/async-k.html
$dokka.location:arrow.effects$await(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.await.A)))arrow.effects/arrow.-kind/await.html
$dokka.location:arrow.effects$fix(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.fix.A)))arrow.effects/arrow.-kind/fix.html
$dokka.location:arrow.effects$handleErrorWith(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.DeferredK((arrow.effects.handleErrorWith.A)))))arrow.effects/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects$k(kotlinx.coroutines.Deferred((arrow.effects.k.A)))arrow.effects/kotlinx.coroutines.-deferred/k.html
$dokka.location:arrow.effects$runAsync(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.runAsync.A)), arrow.Kind((arrow.effects.ForDeferredK, kotlin.Unit)))))arrow.effects/arrow.-kind/run-async.html
$dokka.location:arrow.effects$runAsyncCancellable(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.runAsyncCancellable.A)), arrow.effects.OnCancel, kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.runAsyncCancellable.A)), arrow.Kind((arrow.effects.ForDeferredK, kotlin.Unit)))))arrow.effects/arrow.-kind/run-async-cancellable.html
$dokka.location:arrow.effects$scope(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.scope.A)))arrow.effects/arrow.-kind/scope.html
$dokka.location:arrow.effects$unsafeAttemptSync(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.unsafeAttemptSync.A)))arrow.effects/arrow.-kind/unsafe-attempt-sync.html
$dokka.location:arrow.effects$unsafeRunAsync(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.unsafeRunAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.unsafeRunAsync.A)), kotlin.Unit)))arrow.effects/arrow.-kind/unsafe-run-async.html
$dokka.location:arrow.effects$unsafeRunSync(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.unsafeRunSync.A)))arrow.effects/arrow.-kind/unsafe-run-sync.html
$dokka.location:arrow.effects$value(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.value.A)))arrow.effects/arrow.-kind/value.html
arrow.effects
