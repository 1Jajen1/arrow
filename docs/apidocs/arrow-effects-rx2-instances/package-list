$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.effects.flowablek.applicative$ap(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.ap.A)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Function1((arrow.effects.flowablek.applicative.ap.A, arrow.effects.flowablek.applicative.ap.B)))))arrow.effects.flowablek.applicative/arrow.-kind/ap.html
$dokka.location:arrow.effects.flowablek.applicative$map(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.map.A)), kotlin.Function1((arrow.effects.flowablek.applicative.map.A, arrow.effects.flowablek.applicative.map.B)))arrow.effects.flowablek.applicative/arrow.-kind/map.html
$dokka.location:arrow.effects.flowablek.applicative$map2(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.map2.A)), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.effects.flowablek.applicative.map2.A, arrow.effects.flowablek.applicative.map2.B)), arrow.effects.flowablek.applicative.map2.Z)))arrow.effects.flowablek.applicative/arrow.-kind/map2.html
$dokka.location:arrow.effects.flowablek.applicative$map2Eval(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.effects.flowablek.applicative.map2Eval.A, arrow.effects.flowablek.applicative.map2Eval.B)), arrow.effects.flowablek.applicative.map2Eval.Z)))arrow.effects.flowablek.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.effects.flowablek.applicative$plus(arrow.Kind((arrow.effects.ForFlowableK, java.math.BigDecimal)), arrow.Kind((arrow.effects.ForFlowableK, java.math.BigDecimal)))arrow.effects.flowablek.applicative/arrow.-kind/plus.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple2((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple3((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple4((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C, arrow.effects.flowablek.applicative.product.D)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple5((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C, arrow.effects.flowablek.applicative.product.D, arrow.effects.flowablek.applicative.product.E)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple6((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C, arrow.effects.flowablek.applicative.product.D, arrow.effects.flowablek.applicative.product.E, arrow.effects.flowablek.applicative.product.FF)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple7((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C, arrow.effects.flowablek.applicative.product.D, arrow.effects.flowablek.applicative.product.E, arrow.effects.flowablek.applicative.product.FF, arrow.effects.flowablek.applicative.product.G)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple8((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C, arrow.effects.flowablek.applicative.product.D, arrow.effects.flowablek.applicative.product.E, arrow.effects.flowablek.applicative.product.FF, arrow.effects.flowablek.applicative.product.G, arrow.effects.flowablek.applicative.product.H)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.core.Tuple9((arrow.effects.flowablek.applicative.product.A, arrow.effects.flowablek.applicative.product.B, arrow.effects.flowablek.applicative.product.C, arrow.effects.flowablek.applicative.product.D, arrow.effects.flowablek.applicative.product.E, arrow.effects.flowablek.applicative.product.FF, arrow.effects.flowablek.applicative.product.G, arrow.effects.flowablek.applicative.product.H, arrow.effects.flowablek.applicative.product.I)))), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.Z)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicative$product(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.A)), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicative.product.B)))arrow.effects.flowablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.flowablek.applicativeError$attempt(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicativeError.attempt.A)))arrow.effects.flowablek.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.effects.flowablek.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.effects.ForFlowableK, kotlin.Throwable)), kotlin.Function0((arrow.effects.flowablek.applicativeError.catch.A)))arrow.effects.flowablek.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.effects.flowablek.applicativeError$fromEither(arrow.core.Either((arrow.effects.flowablek.applicativeError.fromEither.EE, arrow.effects.flowablek.applicativeError.fromEither.A)), kotlin.Function1((arrow.effects.flowablek.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.effects.flowablek.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.effects.flowablek.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.effects.flowablek.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.effects.flowablek.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.effects.flowablek.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.effects.flowablek.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.effects.flowablek.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.effects.flowablek.applicativeError$handleError(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.flowablek.applicativeError.handleError.A)))arrow.effects.flowablek.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.effects.flowablek.applicativeError$handleErrorWith(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.applicativeError.handleErrorWith.A)))))arrow.effects.flowablek.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects.flowablek.applicativeError$raiseError(kotlin.Throwable)arrow.effects.flowablek.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.effects.flowablek.async$continueOn(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.async.continueOn.A)), kotlin.coroutines.CoroutineContext)arrow.effects.flowablek.async/arrow.-kind/continue-on.html
$dokka.location:arrow.effects.flowablek.bracket$bracket(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.bracket.A)), kotlin.Function1((arrow.effects.flowablek.bracket.bracket.A, arrow.Kind((arrow.effects.ForFlowableK, kotlin.Unit)))), kotlin.Function1((arrow.effects.flowablek.bracket.bracket.A, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.bracket.B)))))arrow.effects.flowablek.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.effects.flowablek.bracket$bracketCase(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.bracketCase.A)), kotlin.Function2((arrow.effects.flowablek.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Unit)))), kotlin.Function1((arrow.effects.flowablek.bracket.bracketCase.A, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.bracketCase.B)))))arrow.effects.flowablek.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.effects.flowablek.bracket$guarantee(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.guarantee.A)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Unit)))arrow.effects.flowablek.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.effects.flowablek.bracket$guaranteeCase(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Unit)))))arrow.effects.flowablek.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.effects.flowablek.bracket$uncancelable(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.bracket.uncancelable.A)))arrow.effects.flowablek.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.effects.flowablek.concurrentEffect$runAsyncCancellable(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.concurrentEffect.runAsyncCancellable.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.flowablek.concurrentEffect.runAsyncCancellable.A)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Unit)))))arrow.effects.flowablek.concurrent-effect/arrow.-kind/run-async-cancellable.html
$dokka.location:arrow.effects.flowablek.effect$runAsync(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.effect.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.flowablek.effect.runAsync.A)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Unit)))))arrow.effects.flowablek.effect/arrow.-kind/run-async.html
$dokka.location:arrow.effects.flowablek.foldable$combineAll(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.effects.flowablek.foldable.combineAll.A)))arrow.effects.flowablek.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.effects.flowablek.foldable$exists(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.exists.A)), kotlin.Function1((arrow.effects.flowablek.foldable.exists.A, kotlin.Boolean)))arrow.effects.flowablek.foldable/arrow.-kind/exists.html
$dokka.location:arrow.effects.flowablek.foldable$find(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.find.A)), kotlin.Function1((arrow.effects.flowablek.foldable.find.A, kotlin.Boolean)))arrow.effects.flowablek.foldable/arrow.-kind/find.html
$dokka.location:arrow.effects.flowablek.foldable$fold(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.effects.flowablek.foldable.fold.A)))arrow.effects.flowablek.foldable/arrow.-kind/fold.html
$dokka.location:arrow.effects.flowablek.foldable$foldLeft(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.foldLeft.A)), arrow.effects.flowablek.foldable.foldLeft.B, kotlin.Function2((arrow.effects.flowablek.foldable.foldLeft.B, arrow.effects.flowablek.foldable.foldLeft.A, )))arrow.effects.flowablek.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.effects.flowablek.foldable$foldM(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.effects.flowablek.foldable.foldM.G)), arrow.effects.flowablek.foldable.foldM.B, kotlin.Function2((arrow.effects.flowablek.foldable.foldM.B, arrow.effects.flowablek.foldable.foldM.A, arrow.Kind((arrow.effects.flowablek.foldable.foldM.G, )))))arrow.effects.flowablek.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.effects.flowablek.foldable$foldMap(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.effects.flowablek.foldable.foldMap.B)), kotlin.Function1((arrow.effects.flowablek.foldable.foldMap.A, arrow.effects.flowablek.foldable.foldMap.B)))arrow.effects.flowablek.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.effects.flowablek.foldable$foldMapM(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.foldMapM.A)), arrow.effects.flowablek.foldable.foldMapM.MA, arrow.effects.flowablek.foldable.foldMapM.MO, kotlin.Function1((arrow.effects.flowablek.foldable.foldMapM.A, arrow.Kind((arrow.effects.flowablek.foldable.foldMapM.G, arrow.effects.flowablek.foldable.foldMapM.B)))))arrow.effects.flowablek.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.effects.flowablek.foldable$foldRight(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.foldRight.A)), arrow.core.Eval((arrow.effects.flowablek.foldable.foldRight.B)), kotlin.Function2((arrow.effects.flowablek.foldable.foldRight.A, arrow.core.Eval((arrow.effects.flowablek.foldable.foldRight.B)), )))arrow.effects.flowablek.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.effects.flowablek.foldable$forAll(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.forAll.A)), kotlin.Function1((arrow.effects.flowablek.foldable.forAll.A, kotlin.Boolean)))arrow.effects.flowablek.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.effects.flowablek.foldable$get(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.effects.flowablek.foldable.get.A)))), kotlin.Long)arrow.effects.flowablek.foldable/arrow.-kind/get.html
$dokka.location:arrow.effects.flowablek.foldable$isEmpty(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.isEmpty.A)))arrow.effects.flowablek.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.effects.flowablek.foldable$nonEmpty(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.nonEmpty.A)))arrow.effects.flowablek.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.effects.flowablek.foldable$reduceLeftOption(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.effects.flowablek.foldable.reduceLeftOption.A, , )))arrow.effects.flowablek.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.effects.flowablek.foldable$reduceLeftToOption(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.effects.flowablek.foldable.reduceLeftToOption.A, arrow.effects.flowablek.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.effects.flowablek.foldable.reduceLeftToOption.B, arrow.effects.flowablek.foldable.reduceLeftToOption.A, )))arrow.effects.flowablek.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.effects.flowablek.foldable$reduceRightOption(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.reduceRightOption.A)), kotlin.Function2((arrow.effects.flowablek.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.effects.flowablek.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.effects.flowablek.foldable$reduceRightToOption(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.effects.flowablek.foldable.reduceRightToOption.A, arrow.effects.flowablek.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.effects.flowablek.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.effects.flowablek.foldable.reduceRightToOption.B)), )))arrow.effects.flowablek.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.effects.flowablek.foldable$sequence_(arrow.Kind((arrow.effects.ForFlowableK, arrow.Kind((arrow.effects.flowablek.foldable.sequence_.G, arrow.effects.flowablek.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.effects.flowablek.foldable.sequence_.G)))arrow.effects.flowablek.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.effects.flowablek.foldable$size(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.effects.flowablek.foldable/arrow.-kind/size.html
$dokka.location:arrow.effects.flowablek.foldable$traverse_(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.effects.flowablek.foldable.traverse_.G)), kotlin.Function1((arrow.effects.flowablek.foldable.traverse_.A, arrow.Kind((arrow.effects.flowablek.foldable.traverse_.G, arrow.effects.flowablek.foldable.traverse_.B)))))arrow.effects.flowablek.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.effects.flowablek.functor$as(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.as.A)), arrow.effects.flowablek.functor.as.B)arrow.effects.flowablek.functor/arrow.-kind/as.html
$dokka.location:arrow.effects.flowablek.functor$fproduct(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.fproduct.A)), kotlin.Function1((arrow.effects.flowablek.functor.fproduct.A, arrow.effects.flowablek.functor.fproduct.B)))arrow.effects.flowablek.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.effects.flowablek.functor$imap(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.imap.A)), kotlin.Function1((arrow.effects.flowablek.functor.imap.A, arrow.effects.flowablek.functor.imap.B)), kotlin.Function1((arrow.effects.flowablek.functor.imap.B, arrow.effects.flowablek.functor.imap.A)))arrow.effects.flowablek.functor/arrow.-kind/imap.html
$dokka.location:arrow.effects.flowablek.functor$map(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.map.A)), kotlin.Function1((arrow.effects.flowablek.functor.map.A, arrow.effects.flowablek.functor.map.B)))arrow.effects.flowablek.functor/arrow.-kind/map.html
$dokka.location:arrow.effects.flowablek.functor$tupleLeft(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.tupleLeft.A)), arrow.effects.flowablek.functor.tupleLeft.B)arrow.effects.flowablek.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.effects.flowablek.functor$tupleRight(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.tupleRight.A)), arrow.effects.flowablek.functor.tupleRight.B)arrow.effects.flowablek.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.effects.flowablek.functor$void(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.void.A)))arrow.effects.flowablek.functor/arrow.-kind/void.html
$dokka.location:arrow.effects.flowablek.functor$widen(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.functor.widen.A)))arrow.effects.flowablek.functor/arrow.-kind/widen.html
$dokka.location:arrow.effects.flowablek.monad$ap(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.ap.A)), arrow.Kind((arrow.effects.ForFlowableK, kotlin.Function1((arrow.effects.flowablek.monad.ap.A, arrow.effects.flowablek.monad.ap.B)))))arrow.effects.flowablek.monad/arrow.-kind/ap.html
$dokka.location:arrow.effects.flowablek.monad$effectM(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.effectM.A)), kotlin.Function1((arrow.effects.flowablek.monad.effectM.A, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.effectM.B)))))arrow.effects.flowablek.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.effects.flowablek.monad$flatMap(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.flatMap.A)), kotlin.Function1((arrow.effects.flowablek.monad.flatMap.A, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.flatMap.B)))))arrow.effects.flowablek.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.effects.flowablek.monad$flatten(arrow.Kind((arrow.effects.ForFlowableK, arrow.Kind((, arrow.effects.flowablek.monad.flatten.A)))))arrow.effects.flowablek.monad/arrow.-kind/flatten.html
$dokka.location:arrow.effects.flowablek.monad$followedBy(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.followedBy.A)), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.followedBy.B)))arrow.effects.flowablek.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.effects.flowablek.monad$followedByEval(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.followedByEval.B)))))arrow.effects.flowablek.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.effects.flowablek.monad$forEffect(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.forEffect.A)), arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.forEffect.B)))arrow.effects.flowablek.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.effects.flowablek.monad$forEffectEval(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.forEffectEval.B)))))arrow.effects.flowablek.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.effects.flowablek.monad$ifM(arrow.Kind((arrow.effects.ForFlowableK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.ifM.B)))))arrow.effects.flowablek.monad/arrow.-kind/if-m.html
$dokka.location:arrow.effects.flowablek.monad$map(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.map.A)), kotlin.Function1((arrow.effects.flowablek.monad.map.A, arrow.effects.flowablek.monad.map.B)))arrow.effects.flowablek.monad/arrow.-kind/map.html
$dokka.location:arrow.effects.flowablek.monad$mproduct(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.mproduct.A)), kotlin.Function1((arrow.effects.flowablek.monad.mproduct.A, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monad.mproduct.B)))))arrow.effects.flowablek.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.effects.flowablek.monadError$ensure(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.effects.flowablek.monadError.ensure.A, kotlin.Boolean)))arrow.effects.flowablek.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.effects.flowablek.traverse$flatTraverse(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.effects.ForFlowableK)), arrow.typeclasses.Applicative((arrow.effects.flowablek.traverse.flatTraverse.G)), kotlin.Function1((arrow.effects.flowablek.traverse.flatTraverse.A, arrow.Kind((arrow.effects.flowablek.traverse.flatTraverse.G, arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.traverse.flatTraverse.B)))))))arrow.effects.flowablek.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.effects.flowablek.traverse$map(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.traverse.map.A)), kotlin.Function1((arrow.effects.flowablek.traverse.map.A, arrow.effects.flowablek.traverse.map.B)))arrow.effects.flowablek.traverse/arrow.-kind/map.html
$dokka.location:arrow.effects.flowablek.traverse$sequence(arrow.Kind((arrow.effects.ForFlowableK, arrow.Kind((arrow.effects.flowablek.traverse.sequence.G, arrow.effects.flowablek.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.effects.flowablek.traverse.sequence.G)))arrow.effects.flowablek.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.effects.flowablek.traverse$traverse(arrow.Kind((arrow.effects.ForFlowableK, arrow.effects.flowablek.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.effects.flowablek.traverse.traverse.G)), kotlin.Function1((arrow.effects.flowablek.traverse.traverse.A, arrow.Kind((arrow.effects.flowablek.traverse.traverse.G, arrow.effects.flowablek.traverse.traverse.B)))))arrow.effects.flowablek.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.effects.maybek.applicative$ap(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.ap.A)), arrow.Kind((arrow.effects.ForMaybeK, kotlin.Function1((arrow.effects.maybek.applicative.ap.A, arrow.effects.maybek.applicative.ap.B)))))arrow.effects.maybek.applicative/arrow.-kind/ap.html
$dokka.location:arrow.effects.maybek.applicative$map(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.map.A)), kotlin.Function1((arrow.effects.maybek.applicative.map.A, arrow.effects.maybek.applicative.map.B)))arrow.effects.maybek.applicative/arrow.-kind/map.html
$dokka.location:arrow.effects.maybek.applicative$map2(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.map2.A)), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.effects.maybek.applicative.map2.A, arrow.effects.maybek.applicative.map2.B)), arrow.effects.maybek.applicative.map2.Z)))arrow.effects.maybek.applicative/arrow.-kind/map2.html
$dokka.location:arrow.effects.maybek.applicative$map2Eval(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.effects.maybek.applicative.map2Eval.A, arrow.effects.maybek.applicative.map2Eval.B)), arrow.effects.maybek.applicative.map2Eval.Z)))arrow.effects.maybek.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.effects.maybek.applicative$plus(arrow.Kind((arrow.effects.ForMaybeK, java.math.BigDecimal)), arrow.Kind((arrow.effects.ForMaybeK, java.math.BigDecimal)))arrow.effects.maybek.applicative/arrow.-kind/plus.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple2((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple3((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple4((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C, arrow.effects.maybek.applicative.product.D)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple5((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C, arrow.effects.maybek.applicative.product.D, arrow.effects.maybek.applicative.product.E)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple6((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C, arrow.effects.maybek.applicative.product.D, arrow.effects.maybek.applicative.product.E, arrow.effects.maybek.applicative.product.FF)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple7((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C, arrow.effects.maybek.applicative.product.D, arrow.effects.maybek.applicative.product.E, arrow.effects.maybek.applicative.product.FF, arrow.effects.maybek.applicative.product.G)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple8((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C, arrow.effects.maybek.applicative.product.D, arrow.effects.maybek.applicative.product.E, arrow.effects.maybek.applicative.product.FF, arrow.effects.maybek.applicative.product.G, arrow.effects.maybek.applicative.product.H)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.core.Tuple9((arrow.effects.maybek.applicative.product.A, arrow.effects.maybek.applicative.product.B, arrow.effects.maybek.applicative.product.C, arrow.effects.maybek.applicative.product.D, arrow.effects.maybek.applicative.product.E, arrow.effects.maybek.applicative.product.FF, arrow.effects.maybek.applicative.product.G, arrow.effects.maybek.applicative.product.H, arrow.effects.maybek.applicative.product.I)))), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.Z)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicative$product(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.A)), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicative.product.B)))arrow.effects.maybek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.maybek.applicativeError$attempt(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicativeError.attempt.A)))arrow.effects.maybek.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.effects.maybek.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.effects.ForMaybeK, kotlin.Throwable)), kotlin.Function0((arrow.effects.maybek.applicativeError.catch.A)))arrow.effects.maybek.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.effects.maybek.applicativeError$fromEither(arrow.core.Either((arrow.effects.maybek.applicativeError.fromEither.EE, arrow.effects.maybek.applicativeError.fromEither.A)), kotlin.Function1((arrow.effects.maybek.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.effects.maybek.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.effects.maybek.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.effects.maybek.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.effects.maybek.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.effects.maybek.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.effects.maybek.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.effects.maybek.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.effects.maybek.applicativeError$handleError(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.maybek.applicativeError.handleError.A)))arrow.effects.maybek.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.effects.maybek.applicativeError$handleErrorWith(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.applicativeError.handleErrorWith.A)))))arrow.effects.maybek.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects.maybek.applicativeError$raiseError(kotlin.Throwable)arrow.effects.maybek.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.effects.maybek.async$continueOn(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.async.continueOn.A)), kotlin.coroutines.CoroutineContext)arrow.effects.maybek.async/arrow.-kind/continue-on.html
$dokka.location:arrow.effects.maybek.bracket$bracket(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.bracket.A)), kotlin.Function1((arrow.effects.maybek.bracket.bracket.A, arrow.Kind((arrow.effects.ForMaybeK, kotlin.Unit)))), kotlin.Function1((arrow.effects.maybek.bracket.bracket.A, arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.bracket.B)))))arrow.effects.maybek.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.effects.maybek.bracket$bracketCase(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.bracketCase.A)), kotlin.Function2((arrow.effects.maybek.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForMaybeK, kotlin.Unit)))), kotlin.Function1((arrow.effects.maybek.bracket.bracketCase.A, arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.bracketCase.B)))))arrow.effects.maybek.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.effects.maybek.bracket$guarantee(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.guarantee.A)), arrow.Kind((arrow.effects.ForMaybeK, kotlin.Unit)))arrow.effects.maybek.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.effects.maybek.bracket$guaranteeCase(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForMaybeK, kotlin.Unit)))))arrow.effects.maybek.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.effects.maybek.bracket$uncancelable(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.bracket.uncancelable.A)))arrow.effects.maybek.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.effects.maybek.effect$runAsync(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.effect.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.maybek.effect.runAsync.A)), arrow.Kind((arrow.effects.ForMaybeK, kotlin.Unit)))))arrow.effects.maybek.effect/arrow.-kind/run-async.html
$dokka.location:arrow.effects.maybek.foldable$combineAll(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.effects.maybek.foldable.combineAll.A)))arrow.effects.maybek.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.effects.maybek.foldable$exists(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.exists.A)), kotlin.Function1((arrow.effects.maybek.foldable.exists.A, kotlin.Boolean)))arrow.effects.maybek.foldable/arrow.-kind/exists.html
$dokka.location:arrow.effects.maybek.foldable$find(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.find.A)), kotlin.Function1((arrow.effects.maybek.foldable.find.A, kotlin.Boolean)))arrow.effects.maybek.foldable/arrow.-kind/find.html
$dokka.location:arrow.effects.maybek.foldable$fold(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.effects.maybek.foldable.fold.A)))arrow.effects.maybek.foldable/arrow.-kind/fold.html
$dokka.location:arrow.effects.maybek.foldable$foldLeft(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.foldLeft.A)), arrow.effects.maybek.foldable.foldLeft.B, kotlin.Function2((arrow.effects.maybek.foldable.foldLeft.B, arrow.effects.maybek.foldable.foldLeft.A, )))arrow.effects.maybek.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.effects.maybek.foldable$foldM(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.effects.maybek.foldable.foldM.G)), arrow.effects.maybek.foldable.foldM.B, kotlin.Function2((arrow.effects.maybek.foldable.foldM.B, arrow.effects.maybek.foldable.foldM.A, arrow.Kind((arrow.effects.maybek.foldable.foldM.G, )))))arrow.effects.maybek.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.effects.maybek.foldable$foldMap(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.effects.maybek.foldable.foldMap.B)), kotlin.Function1((arrow.effects.maybek.foldable.foldMap.A, arrow.effects.maybek.foldable.foldMap.B)))arrow.effects.maybek.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.effects.maybek.foldable$foldMapM(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.foldMapM.A)), arrow.effects.maybek.foldable.foldMapM.MA, arrow.effects.maybek.foldable.foldMapM.MO, kotlin.Function1((arrow.effects.maybek.foldable.foldMapM.A, arrow.Kind((arrow.effects.maybek.foldable.foldMapM.G, arrow.effects.maybek.foldable.foldMapM.B)))))arrow.effects.maybek.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.effects.maybek.foldable$foldRight(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.foldRight.A)), arrow.core.Eval((arrow.effects.maybek.foldable.foldRight.B)), kotlin.Function2((arrow.effects.maybek.foldable.foldRight.A, arrow.core.Eval((arrow.effects.maybek.foldable.foldRight.B)), )))arrow.effects.maybek.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.effects.maybek.foldable$forAll(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.forAll.A)), kotlin.Function1((arrow.effects.maybek.foldable.forAll.A, kotlin.Boolean)))arrow.effects.maybek.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.effects.maybek.foldable$get(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.effects.maybek.foldable.get.A)))), kotlin.Long)arrow.effects.maybek.foldable/arrow.-kind/get.html
$dokka.location:arrow.effects.maybek.foldable$isEmpty(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.isEmpty.A)))arrow.effects.maybek.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.effects.maybek.foldable$nonEmpty(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.nonEmpty.A)))arrow.effects.maybek.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.effects.maybek.foldable$reduceLeftOption(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.effects.maybek.foldable.reduceLeftOption.A, , )))arrow.effects.maybek.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.effects.maybek.foldable$reduceLeftToOption(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.effects.maybek.foldable.reduceLeftToOption.A, arrow.effects.maybek.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.effects.maybek.foldable.reduceLeftToOption.B, arrow.effects.maybek.foldable.reduceLeftToOption.A, )))arrow.effects.maybek.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.effects.maybek.foldable$reduceRightOption(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.reduceRightOption.A)), kotlin.Function2((arrow.effects.maybek.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.effects.maybek.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.effects.maybek.foldable$reduceRightToOption(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.effects.maybek.foldable.reduceRightToOption.A, arrow.effects.maybek.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.effects.maybek.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.effects.maybek.foldable.reduceRightToOption.B)), )))arrow.effects.maybek.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.effects.maybek.foldable$sequence_(arrow.Kind((arrow.effects.ForMaybeK, arrow.Kind((arrow.effects.maybek.foldable.sequence_.G, arrow.effects.maybek.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.effects.maybek.foldable.sequence_.G)))arrow.effects.maybek.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.effects.maybek.foldable$size(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.effects.maybek.foldable/arrow.-kind/size.html
$dokka.location:arrow.effects.maybek.foldable$traverse_(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.effects.maybek.foldable.traverse_.G)), kotlin.Function1((arrow.effects.maybek.foldable.traverse_.A, arrow.Kind((arrow.effects.maybek.foldable.traverse_.G, arrow.effects.maybek.foldable.traverse_.B)))))arrow.effects.maybek.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.effects.maybek.functor$as(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.as.A)), arrow.effects.maybek.functor.as.B)arrow.effects.maybek.functor/arrow.-kind/as.html
$dokka.location:arrow.effects.maybek.functor$fproduct(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.fproduct.A)), kotlin.Function1((arrow.effects.maybek.functor.fproduct.A, arrow.effects.maybek.functor.fproduct.B)))arrow.effects.maybek.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.effects.maybek.functor$imap(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.imap.A)), kotlin.Function1((arrow.effects.maybek.functor.imap.A, arrow.effects.maybek.functor.imap.B)), kotlin.Function1((arrow.effects.maybek.functor.imap.B, arrow.effects.maybek.functor.imap.A)))arrow.effects.maybek.functor/arrow.-kind/imap.html
$dokka.location:arrow.effects.maybek.functor$map(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.map.A)), kotlin.Function1((arrow.effects.maybek.functor.map.A, arrow.effects.maybek.functor.map.B)))arrow.effects.maybek.functor/arrow.-kind/map.html
$dokka.location:arrow.effects.maybek.functor$tupleLeft(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.tupleLeft.A)), arrow.effects.maybek.functor.tupleLeft.B)arrow.effects.maybek.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.effects.maybek.functor$tupleRight(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.tupleRight.A)), arrow.effects.maybek.functor.tupleRight.B)arrow.effects.maybek.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.effects.maybek.functor$void(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.void.A)))arrow.effects.maybek.functor/arrow.-kind/void.html
$dokka.location:arrow.effects.maybek.functor$widen(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.functor.widen.A)))arrow.effects.maybek.functor/arrow.-kind/widen.html
$dokka.location:arrow.effects.maybek.monad$ap(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.ap.A)), arrow.Kind((arrow.effects.ForMaybeK, kotlin.Function1((arrow.effects.maybek.monad.ap.A, arrow.effects.maybek.monad.ap.B)))))arrow.effects.maybek.monad/arrow.-kind/ap.html
$dokka.location:arrow.effects.maybek.monad$effectM(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.effectM.A)), kotlin.Function1((arrow.effects.maybek.monad.effectM.A, arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.effectM.B)))))arrow.effects.maybek.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.effects.maybek.monad$flatMap(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.flatMap.A)), kotlin.Function1((arrow.effects.maybek.monad.flatMap.A, arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.flatMap.B)))))arrow.effects.maybek.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.effects.maybek.monad$flatten(arrow.Kind((arrow.effects.ForMaybeK, arrow.Kind((, arrow.effects.maybek.monad.flatten.A)))))arrow.effects.maybek.monad/arrow.-kind/flatten.html
$dokka.location:arrow.effects.maybek.monad$followedBy(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.followedBy.A)), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.followedBy.B)))arrow.effects.maybek.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.effects.maybek.monad$followedByEval(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.followedByEval.B)))))arrow.effects.maybek.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.effects.maybek.monad$forEffect(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.forEffect.A)), arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.forEffect.B)))arrow.effects.maybek.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.effects.maybek.monad$forEffectEval(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.forEffectEval.B)))))arrow.effects.maybek.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.effects.maybek.monad$ifM(arrow.Kind((arrow.effects.ForMaybeK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.ifM.B)))))arrow.effects.maybek.monad/arrow.-kind/if-m.html
$dokka.location:arrow.effects.maybek.monad$map(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.map.A)), kotlin.Function1((arrow.effects.maybek.monad.map.A, arrow.effects.maybek.monad.map.B)))arrow.effects.maybek.monad/arrow.-kind/map.html
$dokka.location:arrow.effects.maybek.monad$mproduct(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.mproduct.A)), kotlin.Function1((arrow.effects.maybek.monad.mproduct.A, arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monad.mproduct.B)))))arrow.effects.maybek.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.effects.maybek.monadError$ensure(arrow.Kind((arrow.effects.ForMaybeK, arrow.effects.maybek.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.effects.maybek.monadError.ensure.A, kotlin.Boolean)))arrow.effects.maybek.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.effects.observablek.applicative$ap(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.ap.A)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Function1((arrow.effects.observablek.applicative.ap.A, arrow.effects.observablek.applicative.ap.B)))))arrow.effects.observablek.applicative/arrow.-kind/ap.html
$dokka.location:arrow.effects.observablek.applicative$map(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.map.A)), kotlin.Function1((arrow.effects.observablek.applicative.map.A, arrow.effects.observablek.applicative.map.B)))arrow.effects.observablek.applicative/arrow.-kind/map.html
$dokka.location:arrow.effects.observablek.applicative$map2(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.map2.A)), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.effects.observablek.applicative.map2.A, arrow.effects.observablek.applicative.map2.B)), arrow.effects.observablek.applicative.map2.Z)))arrow.effects.observablek.applicative/arrow.-kind/map2.html
$dokka.location:arrow.effects.observablek.applicative$map2Eval(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.effects.observablek.applicative.map2Eval.A, arrow.effects.observablek.applicative.map2Eval.B)), arrow.effects.observablek.applicative.map2Eval.Z)))arrow.effects.observablek.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.effects.observablek.applicative$plus(arrow.Kind((arrow.effects.ForObservableK, java.math.BigDecimal)), arrow.Kind((arrow.effects.ForObservableK, java.math.BigDecimal)))arrow.effects.observablek.applicative/arrow.-kind/plus.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple2((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple3((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple4((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C, arrow.effects.observablek.applicative.product.D)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple5((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C, arrow.effects.observablek.applicative.product.D, arrow.effects.observablek.applicative.product.E)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple6((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C, arrow.effects.observablek.applicative.product.D, arrow.effects.observablek.applicative.product.E, arrow.effects.observablek.applicative.product.FF)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple7((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C, arrow.effects.observablek.applicative.product.D, arrow.effects.observablek.applicative.product.E, arrow.effects.observablek.applicative.product.FF, arrow.effects.observablek.applicative.product.G)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple8((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C, arrow.effects.observablek.applicative.product.D, arrow.effects.observablek.applicative.product.E, arrow.effects.observablek.applicative.product.FF, arrow.effects.observablek.applicative.product.G, arrow.effects.observablek.applicative.product.H)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.core.Tuple9((arrow.effects.observablek.applicative.product.A, arrow.effects.observablek.applicative.product.B, arrow.effects.observablek.applicative.product.C, arrow.effects.observablek.applicative.product.D, arrow.effects.observablek.applicative.product.E, arrow.effects.observablek.applicative.product.FF, arrow.effects.observablek.applicative.product.G, arrow.effects.observablek.applicative.product.H, arrow.effects.observablek.applicative.product.I)))), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.Z)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicative$product(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.A)), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicative.product.B)))arrow.effects.observablek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.observablek.applicativeError$attempt(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicativeError.attempt.A)))arrow.effects.observablek.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.effects.observablek.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.effects.ForObservableK, kotlin.Throwable)), kotlin.Function0((arrow.effects.observablek.applicativeError.catch.A)))arrow.effects.observablek.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.effects.observablek.applicativeError$fromEither(arrow.core.Either((arrow.effects.observablek.applicativeError.fromEither.EE, arrow.effects.observablek.applicativeError.fromEither.A)), kotlin.Function1((arrow.effects.observablek.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.effects.observablek.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.effects.observablek.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.effects.observablek.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.effects.observablek.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.effects.observablek.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.effects.observablek.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.effects.observablek.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.effects.observablek.applicativeError$handleError(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.observablek.applicativeError.handleError.A)))arrow.effects.observablek.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.effects.observablek.applicativeError$handleErrorWith(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.applicativeError.handleErrorWith.A)))))arrow.effects.observablek.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects.observablek.applicativeError$raiseError(kotlin.Throwable)arrow.effects.observablek.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.effects.observablek.async$continueOn(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.async.continueOn.A)), kotlin.coroutines.CoroutineContext)arrow.effects.observablek.async/arrow.-kind/continue-on.html
$dokka.location:arrow.effects.observablek.bracket$bracket(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.bracket.A)), kotlin.Function1((arrow.effects.observablek.bracket.bracket.A, arrow.Kind((arrow.effects.ForObservableK, kotlin.Unit)))), kotlin.Function1((arrow.effects.observablek.bracket.bracket.A, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.bracket.B)))))arrow.effects.observablek.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.effects.observablek.bracket$bracketCase(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.bracketCase.A)), kotlin.Function2((arrow.effects.observablek.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Unit)))), kotlin.Function1((arrow.effects.observablek.bracket.bracketCase.A, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.bracketCase.B)))))arrow.effects.observablek.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.effects.observablek.bracket$guarantee(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.guarantee.A)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Unit)))arrow.effects.observablek.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.effects.observablek.bracket$guaranteeCase(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Unit)))))arrow.effects.observablek.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.effects.observablek.bracket$uncancelable(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.bracket.uncancelable.A)))arrow.effects.observablek.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.effects.observablek.concurrentEffect$runAsyncCancellable(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.concurrentEffect.runAsyncCancellable.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.observablek.concurrentEffect.runAsyncCancellable.A)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Unit)))))arrow.effects.observablek.concurrent-effect/arrow.-kind/run-async-cancellable.html
$dokka.location:arrow.effects.observablek.effect$runAsync(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.effect.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.observablek.effect.runAsync.A)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Unit)))))arrow.effects.observablek.effect/arrow.-kind/run-async.html
$dokka.location:arrow.effects.observablek.foldable$combineAll(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.effects.observablek.foldable.combineAll.A)))arrow.effects.observablek.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.effects.observablek.foldable$exists(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.exists.A)), kotlin.Function1((arrow.effects.observablek.foldable.exists.A, kotlin.Boolean)))arrow.effects.observablek.foldable/arrow.-kind/exists.html
$dokka.location:arrow.effects.observablek.foldable$find(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.find.A)), kotlin.Function1((arrow.effects.observablek.foldable.find.A, kotlin.Boolean)))arrow.effects.observablek.foldable/arrow.-kind/find.html
$dokka.location:arrow.effects.observablek.foldable$fold(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.effects.observablek.foldable.fold.A)))arrow.effects.observablek.foldable/arrow.-kind/fold.html
$dokka.location:arrow.effects.observablek.foldable$foldLeft(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.foldLeft.A)), arrow.effects.observablek.foldable.foldLeft.B, kotlin.Function2((arrow.effects.observablek.foldable.foldLeft.B, arrow.effects.observablek.foldable.foldLeft.A, )))arrow.effects.observablek.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.effects.observablek.foldable$foldM(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.effects.observablek.foldable.foldM.G)), arrow.effects.observablek.foldable.foldM.B, kotlin.Function2((arrow.effects.observablek.foldable.foldM.B, arrow.effects.observablek.foldable.foldM.A, arrow.Kind((arrow.effects.observablek.foldable.foldM.G, )))))arrow.effects.observablek.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.effects.observablek.foldable$foldMap(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.effects.observablek.foldable.foldMap.B)), kotlin.Function1((arrow.effects.observablek.foldable.foldMap.A, arrow.effects.observablek.foldable.foldMap.B)))arrow.effects.observablek.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.effects.observablek.foldable$foldMapM(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.foldMapM.A)), arrow.effects.observablek.foldable.foldMapM.MA, arrow.effects.observablek.foldable.foldMapM.MO, kotlin.Function1((arrow.effects.observablek.foldable.foldMapM.A, arrow.Kind((arrow.effects.observablek.foldable.foldMapM.G, arrow.effects.observablek.foldable.foldMapM.B)))))arrow.effects.observablek.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.effects.observablek.foldable$foldRight(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.foldRight.A)), arrow.core.Eval((arrow.effects.observablek.foldable.foldRight.B)), kotlin.Function2((arrow.effects.observablek.foldable.foldRight.A, arrow.core.Eval((arrow.effects.observablek.foldable.foldRight.B)), )))arrow.effects.observablek.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.effects.observablek.foldable$forAll(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.forAll.A)), kotlin.Function1((arrow.effects.observablek.foldable.forAll.A, kotlin.Boolean)))arrow.effects.observablek.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.effects.observablek.foldable$get(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.effects.observablek.foldable.get.A)))), kotlin.Long)arrow.effects.observablek.foldable/arrow.-kind/get.html
$dokka.location:arrow.effects.observablek.foldable$isEmpty(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.isEmpty.A)))arrow.effects.observablek.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.effects.observablek.foldable$nonEmpty(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.nonEmpty.A)))arrow.effects.observablek.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.effects.observablek.foldable$reduceLeftOption(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.effects.observablek.foldable.reduceLeftOption.A, , )))arrow.effects.observablek.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.effects.observablek.foldable$reduceLeftToOption(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.effects.observablek.foldable.reduceLeftToOption.A, arrow.effects.observablek.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.effects.observablek.foldable.reduceLeftToOption.B, arrow.effects.observablek.foldable.reduceLeftToOption.A, )))arrow.effects.observablek.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.effects.observablek.foldable$reduceRightOption(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.reduceRightOption.A)), kotlin.Function2((arrow.effects.observablek.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.effects.observablek.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.effects.observablek.foldable$reduceRightToOption(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.effects.observablek.foldable.reduceRightToOption.A, arrow.effects.observablek.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.effects.observablek.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.effects.observablek.foldable.reduceRightToOption.B)), )))arrow.effects.observablek.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.effects.observablek.foldable$sequence_(arrow.Kind((arrow.effects.ForObservableK, arrow.Kind((arrow.effects.observablek.foldable.sequence_.G, arrow.effects.observablek.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.effects.observablek.foldable.sequence_.G)))arrow.effects.observablek.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.effects.observablek.foldable$size(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.effects.observablek.foldable/arrow.-kind/size.html
$dokka.location:arrow.effects.observablek.foldable$traverse_(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.effects.observablek.foldable.traverse_.G)), kotlin.Function1((arrow.effects.observablek.foldable.traverse_.A, arrow.Kind((arrow.effects.observablek.foldable.traverse_.G, arrow.effects.observablek.foldable.traverse_.B)))))arrow.effects.observablek.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.effects.observablek.functor$as(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.as.A)), arrow.effects.observablek.functor.as.B)arrow.effects.observablek.functor/arrow.-kind/as.html
$dokka.location:arrow.effects.observablek.functor$fproduct(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.fproduct.A)), kotlin.Function1((arrow.effects.observablek.functor.fproduct.A, arrow.effects.observablek.functor.fproduct.B)))arrow.effects.observablek.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.effects.observablek.functor$imap(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.imap.A)), kotlin.Function1((arrow.effects.observablek.functor.imap.A, arrow.effects.observablek.functor.imap.B)), kotlin.Function1((arrow.effects.observablek.functor.imap.B, arrow.effects.observablek.functor.imap.A)))arrow.effects.observablek.functor/arrow.-kind/imap.html
$dokka.location:arrow.effects.observablek.functor$map(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.map.A)), kotlin.Function1((arrow.effects.observablek.functor.map.A, arrow.effects.observablek.functor.map.B)))arrow.effects.observablek.functor/arrow.-kind/map.html
$dokka.location:arrow.effects.observablek.functor$tupleLeft(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.tupleLeft.A)), arrow.effects.observablek.functor.tupleLeft.B)arrow.effects.observablek.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.effects.observablek.functor$tupleRight(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.tupleRight.A)), arrow.effects.observablek.functor.tupleRight.B)arrow.effects.observablek.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.effects.observablek.functor$void(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.void.A)))arrow.effects.observablek.functor/arrow.-kind/void.html
$dokka.location:arrow.effects.observablek.functor$widen(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.functor.widen.A)))arrow.effects.observablek.functor/arrow.-kind/widen.html
$dokka.location:arrow.effects.observablek.monad$ap(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.ap.A)), arrow.Kind((arrow.effects.ForObservableK, kotlin.Function1((arrow.effects.observablek.monad.ap.A, arrow.effects.observablek.monad.ap.B)))))arrow.effects.observablek.monad/arrow.-kind/ap.html
$dokka.location:arrow.effects.observablek.monad$effectM(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.effectM.A)), kotlin.Function1((arrow.effects.observablek.monad.effectM.A, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.effectM.B)))))arrow.effects.observablek.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.effects.observablek.monad$flatMap(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.flatMap.A)), kotlin.Function1((arrow.effects.observablek.monad.flatMap.A, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.flatMap.B)))))arrow.effects.observablek.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.effects.observablek.monad$flatten(arrow.Kind((arrow.effects.ForObservableK, arrow.Kind((, arrow.effects.observablek.monad.flatten.A)))))arrow.effects.observablek.monad/arrow.-kind/flatten.html
$dokka.location:arrow.effects.observablek.monad$followedBy(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.followedBy.A)), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.followedBy.B)))arrow.effects.observablek.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.effects.observablek.monad$followedByEval(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.followedByEval.B)))))arrow.effects.observablek.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.effects.observablek.monad$forEffect(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.forEffect.A)), arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.forEffect.B)))arrow.effects.observablek.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.effects.observablek.monad$forEffectEval(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.forEffectEval.B)))))arrow.effects.observablek.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.effects.observablek.monad$ifM(arrow.Kind((arrow.effects.ForObservableK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.ifM.B)))))arrow.effects.observablek.monad/arrow.-kind/if-m.html
$dokka.location:arrow.effects.observablek.monad$map(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.map.A)), kotlin.Function1((arrow.effects.observablek.monad.map.A, arrow.effects.observablek.monad.map.B)))arrow.effects.observablek.monad/arrow.-kind/map.html
$dokka.location:arrow.effects.observablek.monad$mproduct(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.mproduct.A)), kotlin.Function1((arrow.effects.observablek.monad.mproduct.A, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monad.mproduct.B)))))arrow.effects.observablek.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.effects.observablek.monadError$ensure(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.effects.observablek.monadError.ensure.A, kotlin.Boolean)))arrow.effects.observablek.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.effects.observablek.traverse$flatTraverse(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.effects.ForObservableK)), arrow.typeclasses.Applicative((arrow.effects.observablek.traverse.flatTraverse.G)), kotlin.Function1((arrow.effects.observablek.traverse.flatTraverse.A, arrow.Kind((arrow.effects.observablek.traverse.flatTraverse.G, arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.traverse.flatTraverse.B)))))))arrow.effects.observablek.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.effects.observablek.traverse$map(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.traverse.map.A)), kotlin.Function1((arrow.effects.observablek.traverse.map.A, arrow.effects.observablek.traverse.map.B)))arrow.effects.observablek.traverse/arrow.-kind/map.html
$dokka.location:arrow.effects.observablek.traverse$sequence(arrow.Kind((arrow.effects.ForObservableK, arrow.Kind((arrow.effects.observablek.traverse.sequence.G, arrow.effects.observablek.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.effects.observablek.traverse.sequence.G)))arrow.effects.observablek.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.effects.observablek.traverse$traverse(arrow.Kind((arrow.effects.ForObservableK, arrow.effects.observablek.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.effects.observablek.traverse.traverse.G)), kotlin.Function1((arrow.effects.observablek.traverse.traverse.A, arrow.Kind((arrow.effects.observablek.traverse.traverse.G, arrow.effects.observablek.traverse.traverse.B)))))arrow.effects.observablek.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.effects.singlek.applicative$ap(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.ap.A)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Function1((arrow.effects.singlek.applicative.ap.A, arrow.effects.singlek.applicative.ap.B)))))arrow.effects.singlek.applicative/arrow.-kind/ap.html
$dokka.location:arrow.effects.singlek.applicative$map(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.map.A)), kotlin.Function1((arrow.effects.singlek.applicative.map.A, arrow.effects.singlek.applicative.map.B)))arrow.effects.singlek.applicative/arrow.-kind/map.html
$dokka.location:arrow.effects.singlek.applicative$map2(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.map2.A)), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.effects.singlek.applicative.map2.A, arrow.effects.singlek.applicative.map2.B)), arrow.effects.singlek.applicative.map2.Z)))arrow.effects.singlek.applicative/arrow.-kind/map2.html
$dokka.location:arrow.effects.singlek.applicative$map2Eval(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.effects.singlek.applicative.map2Eval.A, arrow.effects.singlek.applicative.map2Eval.B)), arrow.effects.singlek.applicative.map2Eval.Z)))arrow.effects.singlek.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.effects.singlek.applicative$plus(arrow.Kind((arrow.effects.ForSingleK, java.math.BigDecimal)), arrow.Kind((arrow.effects.ForSingleK, java.math.BigDecimal)))arrow.effects.singlek.applicative/arrow.-kind/plus.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple2((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple3((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple4((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C, arrow.effects.singlek.applicative.product.D)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple5((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C, arrow.effects.singlek.applicative.product.D, arrow.effects.singlek.applicative.product.E)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple6((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C, arrow.effects.singlek.applicative.product.D, arrow.effects.singlek.applicative.product.E, arrow.effects.singlek.applicative.product.FF)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple7((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C, arrow.effects.singlek.applicative.product.D, arrow.effects.singlek.applicative.product.E, arrow.effects.singlek.applicative.product.FF, arrow.effects.singlek.applicative.product.G)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple8((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C, arrow.effects.singlek.applicative.product.D, arrow.effects.singlek.applicative.product.E, arrow.effects.singlek.applicative.product.FF, arrow.effects.singlek.applicative.product.G, arrow.effects.singlek.applicative.product.H)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.core.Tuple9((arrow.effects.singlek.applicative.product.A, arrow.effects.singlek.applicative.product.B, arrow.effects.singlek.applicative.product.C, arrow.effects.singlek.applicative.product.D, arrow.effects.singlek.applicative.product.E, arrow.effects.singlek.applicative.product.FF, arrow.effects.singlek.applicative.product.G, arrow.effects.singlek.applicative.product.H, arrow.effects.singlek.applicative.product.I)))), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.Z)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicative$product(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.A)), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicative.product.B)))arrow.effects.singlek.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.singlek.applicativeError$attempt(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicativeError.attempt.A)))arrow.effects.singlek.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.effects.singlek.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.effects.ForSingleK, kotlin.Throwable)), kotlin.Function0((arrow.effects.singlek.applicativeError.catch.A)))arrow.effects.singlek.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.effects.singlek.applicativeError$fromEither(arrow.core.Either((arrow.effects.singlek.applicativeError.fromEither.EE, arrow.effects.singlek.applicativeError.fromEither.A)), kotlin.Function1((arrow.effects.singlek.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.effects.singlek.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.effects.singlek.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.effects.singlek.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.effects.singlek.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.effects.singlek.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.effects.singlek.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.effects.singlek.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.effects.singlek.applicativeError$handleError(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.singlek.applicativeError.handleError.A)))arrow.effects.singlek.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.effects.singlek.applicativeError$handleErrorWith(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.applicativeError.handleErrorWith.A)))))arrow.effects.singlek.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects.singlek.applicativeError$raiseError(kotlin.Throwable)arrow.effects.singlek.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.effects.singlek.async$continueOn(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.async.continueOn.A)), kotlin.coroutines.CoroutineContext)arrow.effects.singlek.async/arrow.-kind/continue-on.html
$dokka.location:arrow.effects.singlek.bracket$bracket(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.bracket.A)), kotlin.Function1((arrow.effects.singlek.bracket.bracket.A, arrow.Kind((arrow.effects.ForSingleK, kotlin.Unit)))), kotlin.Function1((arrow.effects.singlek.bracket.bracket.A, arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.bracket.B)))))arrow.effects.singlek.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.effects.singlek.bracket$bracketCase(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.bracketCase.A)), kotlin.Function2((arrow.effects.singlek.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Unit)))), kotlin.Function1((arrow.effects.singlek.bracket.bracketCase.A, arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.bracketCase.B)))))arrow.effects.singlek.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.effects.singlek.bracket$guarantee(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.guarantee.A)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Unit)))arrow.effects.singlek.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.effects.singlek.bracket$guaranteeCase(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Unit)))))arrow.effects.singlek.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.effects.singlek.bracket$uncancelable(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.bracket.uncancelable.A)))arrow.effects.singlek.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.effects.singlek.concurrentEffect$runAsyncCancellable(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.concurrentEffect.runAsyncCancellable.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.singlek.concurrentEffect.runAsyncCancellable.A)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Unit)))))arrow.effects.singlek.concurrent-effect/arrow.-kind/run-async-cancellable.html
$dokka.location:arrow.effects.singlek.effect$runAsync(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.effect.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.singlek.effect.runAsync.A)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Unit)))))arrow.effects.singlek.effect/arrow.-kind/run-async.html
$dokka.location:arrow.effects.singlek.functor$as(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.as.A)), arrow.effects.singlek.functor.as.B)arrow.effects.singlek.functor/arrow.-kind/as.html
$dokka.location:arrow.effects.singlek.functor$fproduct(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.fproduct.A)), kotlin.Function1((arrow.effects.singlek.functor.fproduct.A, arrow.effects.singlek.functor.fproduct.B)))arrow.effects.singlek.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.effects.singlek.functor$imap(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.imap.A)), kotlin.Function1((arrow.effects.singlek.functor.imap.A, arrow.effects.singlek.functor.imap.B)), kotlin.Function1((arrow.effects.singlek.functor.imap.B, arrow.effects.singlek.functor.imap.A)))arrow.effects.singlek.functor/arrow.-kind/imap.html
$dokka.location:arrow.effects.singlek.functor$map(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.map.A)), kotlin.Function1((arrow.effects.singlek.functor.map.A, arrow.effects.singlek.functor.map.B)))arrow.effects.singlek.functor/arrow.-kind/map.html
$dokka.location:arrow.effects.singlek.functor$tupleLeft(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.tupleLeft.A)), arrow.effects.singlek.functor.tupleLeft.B)arrow.effects.singlek.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.effects.singlek.functor$tupleRight(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.tupleRight.A)), arrow.effects.singlek.functor.tupleRight.B)arrow.effects.singlek.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.effects.singlek.functor$void(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.void.A)))arrow.effects.singlek.functor/arrow.-kind/void.html
$dokka.location:arrow.effects.singlek.functor$widen(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.functor.widen.A)))arrow.effects.singlek.functor/arrow.-kind/widen.html
$dokka.location:arrow.effects.singlek.monad$ap(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.ap.A)), arrow.Kind((arrow.effects.ForSingleK, kotlin.Function1((arrow.effects.singlek.monad.ap.A, arrow.effects.singlek.monad.ap.B)))))arrow.effects.singlek.monad/arrow.-kind/ap.html
$dokka.location:arrow.effects.singlek.monad$effectM(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.effectM.A)), kotlin.Function1((arrow.effects.singlek.monad.effectM.A, arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.effectM.B)))))arrow.effects.singlek.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.effects.singlek.monad$flatMap(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.flatMap.A)), kotlin.Function1((arrow.effects.singlek.monad.flatMap.A, arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.flatMap.B)))))arrow.effects.singlek.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.effects.singlek.monad$flatten(arrow.Kind((arrow.effects.ForSingleK, arrow.Kind((, arrow.effects.singlek.monad.flatten.A)))))arrow.effects.singlek.monad/arrow.-kind/flatten.html
$dokka.location:arrow.effects.singlek.monad$followedBy(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.followedBy.A)), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.followedBy.B)))arrow.effects.singlek.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.effects.singlek.monad$followedByEval(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.followedByEval.B)))))arrow.effects.singlek.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.effects.singlek.monad$forEffect(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.forEffect.A)), arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.forEffect.B)))arrow.effects.singlek.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.effects.singlek.monad$forEffectEval(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.forEffectEval.B)))))arrow.effects.singlek.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.effects.singlek.monad$ifM(arrow.Kind((arrow.effects.ForSingleK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.ifM.B)))))arrow.effects.singlek.monad/arrow.-kind/if-m.html
$dokka.location:arrow.effects.singlek.monad$map(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.map.A)), kotlin.Function1((arrow.effects.singlek.monad.map.A, arrow.effects.singlek.monad.map.B)))arrow.effects.singlek.monad/arrow.-kind/map.html
$dokka.location:arrow.effects.singlek.monad$mproduct(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.mproduct.A)), kotlin.Function1((arrow.effects.singlek.monad.mproduct.A, arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monad.mproduct.B)))))arrow.effects.singlek.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.effects.singlek.monadError$ensure(arrow.Kind((arrow.effects.ForSingleK, arrow.effects.singlek.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.effects.singlek.monadError.ensure.A, kotlin.Boolean)))arrow.effects.singlek.monad-error/arrow.-kind/ensure.html
arrow.effects
arrow.effects.flowablek.applicative
arrow.effects.flowablek.applicativeError
arrow.effects.flowablek.async
arrow.effects.flowablek.bracket
arrow.effects.flowablek.concurrentEffect
arrow.effects.flowablek.effect
arrow.effects.flowablek.foldable
arrow.effects.flowablek.functor
arrow.effects.flowablek.monad
arrow.effects.flowablek.monadDefer
arrow.effects.flowablek.monadError
arrow.effects.flowablek.monadThrow
arrow.effects.flowablek.traverse
arrow.effects.maybek.applicative
arrow.effects.maybek.applicativeError
arrow.effects.maybek.async
arrow.effects.maybek.bracket
arrow.effects.maybek.effect
arrow.effects.maybek.foldable
arrow.effects.maybek.functor
arrow.effects.maybek.monad
arrow.effects.maybek.monadDefer
arrow.effects.maybek.monadError
arrow.effects.maybek.monadThrow
arrow.effects.observablek.applicative
arrow.effects.observablek.applicativeError
arrow.effects.observablek.async
arrow.effects.observablek.bracket
arrow.effects.observablek.concurrentEffect
arrow.effects.observablek.effect
arrow.effects.observablek.foldable
arrow.effects.observablek.functor
arrow.effects.observablek.monad
arrow.effects.observablek.monadDefer
arrow.effects.observablek.monadError
arrow.effects.observablek.monadThrow
arrow.effects.observablek.traverse
arrow.effects.singlek.applicative
arrow.effects.singlek.applicativeError
arrow.effects.singlek.async
arrow.effects.singlek.bracket
arrow.effects.singlek.concurrentEffect
arrow.effects.singlek.effect
arrow.effects.singlek.functor
arrow.effects.singlek.monad
arrow.effects.singlek.monadDefer
arrow.effects.singlek.monadError
arrow.effects.singlek.monadThrow
