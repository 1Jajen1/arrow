$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.instances$applicative(arrow.data.EitherT.Companion, arrow.typeclasses.Monad((arrow.instances.applicative.F)))arrow.instances/arrow.data.-either-t/applicative.html
$dokka.location:arrow.instances$applicative(arrow.data.ReaderApi)arrow.instances/arrow.data.-reader-api/applicative.html
$dokka.location:arrow.instances$applicative(arrow.data.StateApi)arrow.instances/arrow.data.-state-api/applicative.html
$dokka.location:arrow.instances$applicativeError(arrow.data.EitherT.Companion, arrow.typeclasses.Monad((arrow.instances.applicativeError.F)))arrow.instances/arrow.data.-either-t/applicative-error.html
$dokka.location:arrow.instances$extensions(arrow.data.ForListK.Companion, kotlin.Function1((arrow.instances.ListKContext, arrow.instances.extensions.A)))arrow.instances/arrow.data.-for-list-k/extensions.html
$dokka.location:arrow.instances$extensions(arrow.data.ForNonEmptyList.Companion, kotlin.Function1((arrow.instances.NonEmptyListContext, arrow.instances.extensions.A)))arrow.instances/arrow.data.-for-non-empty-list/extensions.html
$dokka.location:arrow.instances$extensions(arrow.data.ForSequenceK.Companion, kotlin.Function1((arrow.instances.SequenceKContext, arrow.instances.extensions.A)))arrow.instances/arrow.data.-for-sequence-k/extensions.html
$dokka.location:arrow.instances$extensions(arrow.data.ForSetK.Companion, kotlin.Function1((arrow.instances.SetKContext, arrow.instances.extensions.A)))arrow.instances/arrow.data.-for-set-k/extensions.html
$dokka.location:arrow.instances$foldLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForEitherT, arrow.instances.foldLeft.F)), arrow.instances.foldLeft.A)), arrow.instances.foldLeft.B)), arrow.typeclasses.Foldable((arrow.instances.foldLeft.F)), arrow.instances.foldLeft.C, kotlin.Function2((arrow.instances.foldLeft.C, arrow.instances.foldLeft.B, )))arrow.instances/arrow.-kind/fold-left.html
$dokka.location:arrow.instances$foldLeft(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.foldLeft.F)), arrow.instances.foldLeft.A)), arrow.typeclasses.Foldable((arrow.instances.foldLeft.F)), arrow.instances.foldLeft.B, kotlin.Function2((arrow.instances.foldLeft.B, arrow.instances.foldLeft.A, )))arrow.instances/arrow.-kind/fold-left.html
$dokka.location:arrow.instances$foldRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForEitherT, arrow.instances.foldRight.F)), arrow.instances.foldRight.A)), arrow.instances.foldRight.B)), arrow.typeclasses.Foldable((arrow.instances.foldRight.F)), arrow.core.Eval((arrow.instances.foldRight.C)), kotlin.Function2((arrow.instances.foldRight.B, arrow.core.Eval((arrow.instances.foldRight.C)), )))arrow.instances/arrow.-kind/fold-right.html
$dokka.location:arrow.instances$foldRight(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.foldRight.F)), arrow.instances.foldRight.A)), arrow.typeclasses.Foldable((arrow.instances.foldRight.F)), arrow.core.Eval((arrow.instances.foldRight.B)), kotlin.Function2((arrow.instances.foldRight.A, arrow.core.Eval((arrow.instances.foldRight.B)), )))arrow.instances/arrow.-kind/fold-right.html
$dokka.location:arrow.instances$foldable(arrow.data.EitherT.Companion, arrow.typeclasses.Traverse((arrow.instances.foldable.F)))arrow.instances/arrow.data.-either-t/foldable.html
$dokka.location:arrow.instances$foldable(arrow.data.SortedMapK.Companion)arrow.instances/arrow.data.-sorted-map-k/foldable.html
$dokka.location:arrow.instances$functor(arrow.data.EitherT.Companion, arrow.typeclasses.Functor((arrow.instances.functor.F)))arrow.instances/arrow.data.-either-t/functor.html
$dokka.location:arrow.instances$functor(arrow.data.ReaderApi)arrow.instances/arrow.data.-reader-api/functor.html
$dokka.location:arrow.instances$functor(arrow.data.SortedMapK.Companion)arrow.instances/arrow.data.-sorted-map-k/functor.html
$dokka.location:arrow.instances$functor(arrow.data.StateApi)arrow.instances/arrow.data.-state-api/functor.html
$dokka.location:arrow.instances$monad(arrow.data.EitherT.Companion, arrow.typeclasses.Monad((arrow.instances.monad.F)))arrow.instances/arrow.data.-either-t/monad.html
$dokka.location:arrow.instances$monad(arrow.data.ReaderApi)arrow.instances/arrow.data.-reader-api/monad.html
$dokka.location:arrow.instances$monad(arrow.data.StateApi)arrow.instances/arrow.data.-state-api/monad.html
$dokka.location:arrow.instances$monadError(arrow.data.EitherT.Companion, arrow.typeclasses.Monad((arrow.instances.monadError.F)))arrow.instances/arrow.data.-either-t/monad-error.html
$dokka.location:arrow.instances$monoid(arrow.data.SortedMapK.Companion, arrow.typeclasses.Semigroup((arrow.instances.monoid.B)))arrow.instances/arrow.data.-sorted-map-k/monoid.html
$dokka.location:arrow.instances$semigroup(arrow.data.SortedMapK.Companion, arrow.typeclasses.Semigroup((arrow.instances.semigroup.B)))arrow.instances/arrow.data.-sorted-map-k/semigroup.html
$dokka.location:arrow.instances$semigroupK(arrow.data.EitherT.Companion, arrow.typeclasses.Monad((arrow.instances.semigroupK.F)))arrow.instances/arrow.data.-either-t/semigroup-k.html
$dokka.location:arrow.instances$sequence(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForEitherT, arrow.instances.sequence.F)), arrow.instances.sequence.A)), arrow.Kind((arrow.instances.sequence.G, arrow.instances.sequence.B)))), arrow.typeclasses.Traverse((arrow.instances.sequence.F)), arrow.typeclasses.Applicative((arrow.instances.sequence.G)))arrow.instances/arrow.-kind/sequence.html
$dokka.location:arrow.instances$sequence(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.sequence.F)), arrow.Kind((arrow.instances.sequence.G, arrow.instances.sequence.A)))), arrow.typeclasses.Traverse((arrow.instances.sequence.F)), arrow.typeclasses.Applicative((arrow.instances.sequence.G)))arrow.instances/arrow.-kind/sequence.html
$dokka.location:arrow.instances$show(arrow.data.SortedMapK.Companion)arrow.instances/arrow.data.-sorted-map-k/show.html
$dokka.location:arrow.instances$toNonEmptyList(arrow.typeclasses.Reducible((arrow.instances.toNonEmptyList.F)), arrow.Kind((arrow.instances.toNonEmptyList.F, arrow.instances.toNonEmptyList.A)))arrow.instances/arrow.typeclasses.-reducible/to-non-empty-list.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForEitherT, arrow.instances.traverse.F)), arrow.instances.traverse.A)), arrow.instances.traverse.B)), arrow.typeclasses.Traverse((arrow.instances.traverse.F)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.B, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.C)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.traverse.F)), arrow.instances.traverse.A)), arrow.typeclasses.Traverse((arrow.instances.traverse.F)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.A, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.B)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverse(arrow.data.EitherT.Companion, arrow.typeclasses.Traverse((arrow.instances.traverse.F)))arrow.instances/arrow.data.-either-t/traverse.html
$dokka.location:arrow.instances$traverse(arrow.data.SortedMapK.Companion)arrow.instances/arrow.data.-sorted-map-k/traverse.html
$dokka.location:arrow.instances.cokleisli.contravariant$contramap(arrow.Kind((arrow.typeclasses.Conested((arrow.Kind((arrow.data.ForCokleisli, arrow.instances.cokleisli.contravariant.contramap.F)), arrow.instances.cokleisli.contravariant.contramap.D)), arrow.instances.cokleisli.contravariant.contramap.A)), kotlin.Function1((arrow.instances.cokleisli.contravariant.contramap.B, arrow.instances.cokleisli.contravariant.contramap.A)))arrow.instances.cokleisli.contravariant/arrow.-kind/contramap.html
$dokka.location:arrow.instances.cokleisli.contravariant$contravariant(arrow.data.Cokleisli.Companion)arrow.instances.cokleisli.contravariant/arrow.data.-cokleisli/contravariant.html
$dokka.location:arrow.instances.cokleisli.contravariant$imap(arrow.Kind((arrow.typeclasses.Conested((arrow.Kind((arrow.data.ForCokleisli, arrow.instances.cokleisli.contravariant.imap.F)), arrow.instances.cokleisli.contravariant.imap.D)), arrow.instances.cokleisli.contravariant.imap.A)), kotlin.Function1((arrow.instances.cokleisli.contravariant.imap.A, arrow.instances.cokleisli.contravariant.imap.B)), kotlin.Function1((arrow.instances.cokleisli.contravariant.imap.B, arrow.instances.cokleisli.contravariant.imap.A)))arrow.instances.cokleisli.contravariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.cokleisli.contravariant$narrow(arrow.Kind((arrow.typeclasses.Conested((arrow.Kind((arrow.data.ForCokleisli, arrow.instances.cokleisli.contravariant.narrow.F)), arrow.instances.cokleisli.contravariant.narrow.D)), arrow.instances.cokleisli.contravariant.narrow.A)))arrow.instances.cokleisli.contravariant/arrow.-kind/narrow.html
$dokka.location:arrow.instances.cokleisli.profunctor$dimap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCokleisli, arrow.instances.cokleisli.profunctor.dimap.F)), arrow.instances.cokleisli.profunctor.dimap.A)), arrow.instances.cokleisli.profunctor.dimap.B)), kotlin.Function1((arrow.instances.cokleisli.profunctor.dimap.C, arrow.instances.cokleisli.profunctor.dimap.A)), kotlin.Function1((arrow.instances.cokleisli.profunctor.dimap.B, arrow.instances.cokleisli.profunctor.dimap.D)))arrow.instances.cokleisli.profunctor/arrow.-kind/dimap.html
$dokka.location:arrow.instances.cokleisli.profunctor$lmap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCokleisli, arrow.instances.cokleisli.profunctor.lmap.F)), arrow.instances.cokleisli.profunctor.lmap.A)), arrow.instances.cokleisli.profunctor.lmap.B)), kotlin.Function1((arrow.instances.cokleisli.profunctor.lmap.C, arrow.instances.cokleisli.profunctor.lmap.A)))arrow.instances.cokleisli.profunctor/arrow.-kind/lmap.html
$dokka.location:arrow.instances.cokleisli.profunctor$profunctor(arrow.data.Cokleisli.Companion)arrow.instances.cokleisli.profunctor/arrow.data.-cokleisli/profunctor.html
$dokka.location:arrow.instances.cokleisli.profunctor$rmap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCokleisli, arrow.instances.cokleisli.profunctor.rmap.F)), arrow.instances.cokleisli.profunctor.rmap.A)), arrow.instances.cokleisli.profunctor.rmap.B)), kotlin.Function1((arrow.instances.cokleisli.profunctor.rmap.B, arrow.instances.cokleisli.profunctor.rmap.D)))arrow.instances.cokleisli.profunctor/arrow.-kind/rmap.html
$dokka.location:arrow.instances.coproduct.comonad$coflatMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.comonad.coflatMap.F)), arrow.instances.coproduct.comonad.coflatMap.G)), arrow.instances.coproduct.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.comonad.coflatMap.F)), arrow.instances.coproduct.comonad.coflatMap.G)), arrow.instances.coproduct.comonad.coflatMap.A)), arrow.instances.coproduct.comonad.coflatMap.B)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.coflatMap.F)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.coflatMap.G)))arrow.instances.coproduct.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.coproduct.comonad$comonad(arrow.data.Coproduct.Companion, arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.comonad.F)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.comonad.G)))arrow.instances.coproduct.comonad/arrow.data.-coproduct/comonad.html
$dokka.location:arrow.instances.coproduct.comonad$duplicate(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.comonad.duplicate.F)), arrow.instances.coproduct.comonad.duplicate.G)), arrow.instances.coproduct.comonad.duplicate.A)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.duplicate.F)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.duplicate.G)))arrow.instances.coproduct.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.coproduct.comonad$extract(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.comonad.extract.F)), arrow.instances.coproduct.comonad.extract.G)), arrow.instances.coproduct.comonad.extract.A)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.extract.F)), arrow.typeclasses.Comonad((arrow.instances.coproduct.comonad.extract.G)))arrow.instances.coproduct.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.coproduct.contravariant$contramap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.contravariant.contramap.F)), arrow.instances.coproduct.contravariant.contramap.G)), arrow.instances.coproduct.contravariant.contramap.A)), kotlin.Function1((arrow.instances.coproduct.contravariant.contramap.B, arrow.instances.coproduct.contravariant.contramap.A)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.contramap.F)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.contramap.G)))arrow.instances.coproduct.contravariant/arrow.-kind/contramap.html
$dokka.location:arrow.instances.coproduct.contravariant$contravariant(arrow.data.Coproduct.Companion, arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.contravariant.F)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.contravariant.G)))arrow.instances.coproduct.contravariant/arrow.data.-coproduct/contravariant.html
$dokka.location:arrow.instances.coproduct.contravariant$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.contravariant.imap.F)), arrow.instances.coproduct.contravariant.imap.G)), arrow.instances.coproduct.contravariant.imap.A)), kotlin.Function1((arrow.instances.coproduct.contravariant.imap.A, arrow.instances.coproduct.contravariant.imap.B)), kotlin.Function1((arrow.instances.coproduct.contravariant.imap.B, arrow.instances.coproduct.contravariant.imap.A)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.imap.F)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.imap.G)))arrow.instances.coproduct.contravariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.coproduct.contravariant$narrow(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.contravariant.narrow.F)), arrow.instances.coproduct.contravariant.narrow.G)), arrow.instances.coproduct.contravariant.narrow.A)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.narrow.F)), arrow.typeclasses.Contravariant((arrow.instances.coproduct.contravariant.narrow.G)))arrow.instances.coproduct.contravariant/arrow.-kind/narrow.html
$dokka.location:arrow.instances.coproduct.eq$eq(arrow.data.Coproduct.Companion, arrow.typeclasses.Eq((arrow.Kind((arrow.instances.coproduct.eq.eq.F, arrow.instances.coproduct.eq.eq.A)))), arrow.typeclasses.Eq((arrow.Kind((arrow.instances.coproduct.eq.eq.G, arrow.instances.coproduct.eq.eq.A)))))arrow.instances.coproduct.eq/arrow.data.-coproduct/eq.html
$dokka.location:arrow.instances.coproduct.eq$neqv(arrow.data.Coproduct((arrow.instances.coproduct.eq.neqv.F, arrow.instances.coproduct.eq.neqv.G, arrow.instances.coproduct.eq.neqv.A)), arrow.data.Coproduct((arrow.instances.coproduct.eq.neqv.F, arrow.instances.coproduct.eq.neqv.G, arrow.instances.coproduct.eq.neqv.A)), arrow.typeclasses.Eq((arrow.Kind((arrow.instances.coproduct.eq.neqv.F, arrow.instances.coproduct.eq.neqv.A)))), arrow.typeclasses.Eq((arrow.Kind((arrow.instances.coproduct.eq.neqv.G, arrow.instances.coproduct.eq.neqv.A)))))arrow.instances.coproduct.eq/arrow.data.-coproduct/neqv.html
$dokka.location:arrow.instances.coproduct.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.combineAll.F)), arrow.instances.coproduct.foldable.combineAll.G)), arrow.instances.coproduct.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.coproduct.foldable.combineAll.A)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.combineAll.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.combineAll.G)))arrow.instances.coproduct.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.coproduct.foldable$exists(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.exists.F)), arrow.instances.coproduct.foldable.exists.G)), arrow.instances.coproduct.foldable.exists.A)), kotlin.Function1((arrow.instances.coproduct.foldable.exists.A, kotlin.Boolean)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.exists.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.exists.G)))arrow.instances.coproduct.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.coproduct.foldable$find(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.find.F)), arrow.instances.coproduct.foldable.find.G)), arrow.instances.coproduct.foldable.find.A)), kotlin.Function1((arrow.instances.coproduct.foldable.find.A, kotlin.Boolean)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.find.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.find.G)))arrow.instances.coproduct.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.coproduct.foldable$fold(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.fold.F)), arrow.instances.coproduct.foldable.fold.G)), arrow.instances.coproduct.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.coproduct.foldable.fold.A)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.fold.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.fold.G)))arrow.instances.coproduct.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.coproduct.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.foldLeft.F)), arrow.instances.coproduct.foldable.foldLeft.G)), arrow.instances.coproduct.foldable.foldLeft.A)), arrow.instances.coproduct.foldable.foldLeft.B, kotlin.Function2((arrow.instances.coproduct.foldable.foldLeft.B, arrow.instances.coproduct.foldable.foldLeft.A, )), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldLeft.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldLeft.G)))arrow.instances.coproduct.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.coproduct.foldable$foldM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.foldM.F)), arrow.instances.coproduct.foldable.foldM.G)), arrow.instances.coproduct.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.coproduct.foldable.foldM.G)), arrow.instances.coproduct.foldable.foldM.B, kotlin.Function2((arrow.instances.coproduct.foldable.foldM.B, arrow.instances.coproduct.foldable.foldM.A, arrow.Kind((arrow.instances.coproduct.foldable.foldM.G, )))), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldM.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldM.G)))arrow.instances.coproduct.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.coproduct.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.foldMap.F)), arrow.instances.coproduct.foldable.foldMap.G)), arrow.instances.coproduct.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.coproduct.foldable.foldMap.B)), kotlin.Function1((arrow.instances.coproduct.foldable.foldMap.A, arrow.instances.coproduct.foldable.foldMap.B)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldMap.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldMap.G)))arrow.instances.coproduct.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.coproduct.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.foldMapM.F)), arrow.instances.coproduct.foldable.foldMapM.G)), arrow.instances.coproduct.foldable.foldMapM.A)), arrow.instances.coproduct.foldable.foldMapM.MA, arrow.instances.coproduct.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.coproduct.foldable.foldMapM.A, arrow.Kind((arrow.instances.coproduct.foldable.foldMapM.G, arrow.instances.coproduct.foldable.foldMapM.B)))), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldMapM.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldMapM.G)))arrow.instances.coproduct.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.coproduct.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.foldRight.F)), arrow.instances.coproduct.foldable.foldRight.G)), arrow.instances.coproduct.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.coproduct.foldable.foldRight.B)), kotlin.Function2((arrow.instances.coproduct.foldable.foldRight.A, arrow.core.Eval((arrow.instances.coproduct.foldable.foldRight.B)), )), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldRight.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldRight.G)))arrow.instances.coproduct.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.coproduct.foldable$foldable(arrow.data.Coproduct.Companion, arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldable.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.foldable.G)))arrow.instances.coproduct.foldable/arrow.data.-coproduct/foldable.html
$dokka.location:arrow.instances.coproduct.foldable$forAll(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.forAll.F)), arrow.instances.coproduct.foldable.forAll.G)), arrow.instances.coproduct.foldable.forAll.A)), kotlin.Function1((arrow.instances.coproduct.foldable.forAll.A, kotlin.Boolean)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.forAll.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.forAll.G)))arrow.instances.coproduct.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.coproduct.foldable$get(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.get.F)), arrow.instances.coproduct.foldable.get.G)), arrow.instances.coproduct.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.coproduct.foldable.get.A)))), kotlin.Long, arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.get.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.get.G)))arrow.instances.coproduct.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.coproduct.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.isEmpty.F)), arrow.instances.coproduct.foldable.isEmpty.G)), arrow.instances.coproduct.foldable.isEmpty.A)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.isEmpty.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.isEmpty.G)))arrow.instances.coproduct.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.coproduct.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.nonEmpty.F)), arrow.instances.coproduct.foldable.nonEmpty.G)), arrow.instances.coproduct.foldable.nonEmpty.A)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.nonEmpty.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.nonEmpty.G)))arrow.instances.coproduct.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.coproduct.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.reduceLeftOption.F)), arrow.instances.coproduct.foldable.reduceLeftOption.G)), arrow.instances.coproduct.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.coproduct.foldable.reduceLeftOption.A, , )), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceLeftOption.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceLeftOption.G)))arrow.instances.coproduct.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.coproduct.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.reduceLeftToOption.F)), arrow.instances.coproduct.foldable.reduceLeftToOption.G)), arrow.instances.coproduct.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.coproduct.foldable.reduceLeftToOption.A, arrow.instances.coproduct.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.coproduct.foldable.reduceLeftToOption.B, arrow.instances.coproduct.foldable.reduceLeftToOption.A, )), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceLeftToOption.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceLeftToOption.G)))arrow.instances.coproduct.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.coproduct.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.reduceRightOption.F)), arrow.instances.coproduct.foldable.reduceRightOption.G)), arrow.instances.coproduct.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.coproduct.foldable.reduceRightOption.A, arrow.core.Eval(()), )), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceRightOption.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceRightOption.G)))arrow.instances.coproduct.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.coproduct.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.reduceRightToOption.F)), arrow.instances.coproduct.foldable.reduceRightToOption.G)), arrow.instances.coproduct.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.coproduct.foldable.reduceRightToOption.A, arrow.instances.coproduct.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.coproduct.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.coproduct.foldable.reduceRightToOption.B)), )), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceRightToOption.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.reduceRightToOption.G)))arrow.instances.coproduct.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.coproduct.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.sequence_.F)), arrow.instances.coproduct.foldable.sequence_.G)), arrow.Kind((, arrow.instances.coproduct.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.coproduct.foldable.sequence_.G)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.sequence_.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.sequence_.G)))arrow.instances.coproduct.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.coproduct.foldable$size(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.size.F)), arrow.instances.coproduct.foldable.size.G)), arrow.instances.coproduct.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.size.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.size.G)))arrow.instances.coproduct.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.coproduct.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.foldable.traverse_.F)), arrow.instances.coproduct.foldable.traverse_.G)), arrow.instances.coproduct.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.coproduct.foldable.traverse_.G)), kotlin.Function1((arrow.instances.coproduct.foldable.traverse_.A, arrow.Kind((arrow.instances.coproduct.foldable.traverse_.G, arrow.instances.coproduct.foldable.traverse_.B)))), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.traverse_.F)), arrow.typeclasses.Foldable((arrow.instances.coproduct.foldable.traverse_.G)))arrow.instances.coproduct.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.coproduct.functor$as(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.as.F)), arrow.instances.coproduct.functor.as.G)), arrow.instances.coproduct.functor.as.A)), arrow.instances.coproduct.functor.as.B, arrow.typeclasses.Functor((arrow.instances.coproduct.functor.as.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.as.G)))arrow.instances.coproduct.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.coproduct.functor$fproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.fproduct.F)), arrow.instances.coproduct.functor.fproduct.G)), arrow.instances.coproduct.functor.fproduct.A)), kotlin.Function1((arrow.instances.coproduct.functor.fproduct.A, arrow.instances.coproduct.functor.fproduct.B)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.fproduct.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.fproduct.G)))arrow.instances.coproduct.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.coproduct.functor$functor(arrow.data.Coproduct.Companion, arrow.typeclasses.Functor((arrow.instances.coproduct.functor.functor.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.functor.G)))arrow.instances.coproduct.functor/arrow.data.-coproduct/functor.html
$dokka.location:arrow.instances.coproduct.functor$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.imap.F)), arrow.instances.coproduct.functor.imap.G)), arrow.instances.coproduct.functor.imap.A)), kotlin.Function1((arrow.instances.coproduct.functor.imap.A, arrow.instances.coproduct.functor.imap.B)), kotlin.Function1((arrow.instances.coproduct.functor.imap.B, arrow.instances.coproduct.functor.imap.A)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.imap.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.imap.G)))arrow.instances.coproduct.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.coproduct.functor$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.map.F)), arrow.instances.coproduct.functor.map.G)), arrow.instances.coproduct.functor.map.A)), kotlin.Function1((arrow.instances.coproduct.functor.map.A, arrow.instances.coproduct.functor.map.B)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.map.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.map.G)))arrow.instances.coproduct.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.coproduct.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.tupleLeft.F)), arrow.instances.coproduct.functor.tupleLeft.G)), arrow.instances.coproduct.functor.tupleLeft.A)), arrow.instances.coproduct.functor.tupleLeft.B, arrow.typeclasses.Functor((arrow.instances.coproduct.functor.tupleLeft.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.tupleLeft.G)))arrow.instances.coproduct.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.coproduct.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.tupleRight.F)), arrow.instances.coproduct.functor.tupleRight.G)), arrow.instances.coproduct.functor.tupleRight.A)), arrow.instances.coproduct.functor.tupleRight.B, arrow.typeclasses.Functor((arrow.instances.coproduct.functor.tupleRight.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.tupleRight.G)))arrow.instances.coproduct.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.coproduct.functor$void(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.void.F)), arrow.instances.coproduct.functor.void.G)), arrow.instances.coproduct.functor.void.A)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.void.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.void.G)))arrow.instances.coproduct.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.coproduct.functor$widen(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.functor.widen.F)), arrow.instances.coproduct.functor.widen.G)), arrow.instances.coproduct.functor.widen.A)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.widen.F)), arrow.typeclasses.Functor((arrow.instances.coproduct.functor.widen.G)))arrow.instances.coproduct.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.coproduct.hash$hash(arrow.data.Coproduct.Companion, arrow.typeclasses.Hash((arrow.Kind((arrow.instances.coproduct.hash.hash.F, arrow.instances.coproduct.hash.hash.A)))), arrow.typeclasses.Hash((arrow.Kind((arrow.instances.coproduct.hash.hash.G, arrow.instances.coproduct.hash.hash.A)))))arrow.instances.coproduct.hash/arrow.data.-coproduct/hash.html
$dokka.location:arrow.instances.coproduct.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.traverse.flatTraverse.F)), arrow.instances.coproduct.traverse.flatTraverse.G)), arrow.instances.coproduct.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.traverse.flatTraverse.F)), arrow.instances.coproduct.traverse.flatTraverse.G)))), arrow.typeclasses.Applicative((arrow.instances.coproduct.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.coproduct.traverse.flatTraverse.A, arrow.Kind((arrow.instances.coproduct.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.traverse.flatTraverse.F)), )), arrow.instances.coproduct.traverse.flatTraverse.B)))))), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.flatTraverse.F)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.flatTraverse.G)))arrow.instances.coproduct.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.coproduct.traverse$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.traverse.map.F)), arrow.instances.coproduct.traverse.map.G)), arrow.instances.coproduct.traverse.map.A)), kotlin.Function1((arrow.instances.coproduct.traverse.map.A, arrow.instances.coproduct.traverse.map.B)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.map.F)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.map.G)))arrow.instances.coproduct.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.coproduct.traverse$sequence(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.traverse.sequence.F)), arrow.instances.coproduct.traverse.sequence.G)), arrow.Kind((, arrow.instances.coproduct.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.coproduct.traverse.sequence.G)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.sequence.F)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.sequence.G)))arrow.instances.coproduct.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.coproduct.traverse$traverse(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.instances.coproduct.traverse.traverse.F)), arrow.instances.coproduct.traverse.traverse.G)), arrow.instances.coproduct.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.coproduct.traverse.traverse.G)), kotlin.Function1((arrow.instances.coproduct.traverse.traverse.A, arrow.Kind((arrow.instances.coproduct.traverse.traverse.G, arrow.instances.coproduct.traverse.traverse.B)))), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.traverse.F)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.traverse.G)))arrow.instances.coproduct.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.coproduct.traverse$traverse(arrow.data.Coproduct.Companion, arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.traverse.F)), arrow.typeclasses.Traverse((arrow.instances.coproduct.traverse.traverse.G)))arrow.instances.coproduct.traverse/arrow.data.-coproduct/traverse.html
$dokka.location:arrow.instances.day.applicative$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.ap.F)), arrow.instances.day.applicative.ap.G)), arrow.instances.day.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.ap.F)), arrow.instances.day.applicative.ap.G)), kotlin.Function1((arrow.instances.day.applicative.ap.A, arrow.instances.day.applicative.ap.B)))), arrow.typeclasses.Applicative((arrow.instances.day.applicative.ap.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.ap.G)))arrow.instances.day.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.day.applicative$applicative(arrow.data.Day.Companion, arrow.typeclasses.Applicative((arrow.instances.day.applicative.applicative.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.applicative.G)))arrow.instances.day.applicative/arrow.data.-day/applicative.html
$dokka.location:arrow.instances.day.applicative$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.map.F)), arrow.instances.day.applicative.map.G)), arrow.instances.day.applicative.map.A)), kotlin.Function1((arrow.instances.day.applicative.map.A, arrow.instances.day.applicative.map.B)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.map.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.map.G)))arrow.instances.day.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.day.applicative$map2(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.map2.F)), arrow.instances.day.applicative.map2.G)), arrow.instances.day.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.map2.F)), arrow.instances.day.applicative.map2.G)), arrow.instances.day.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.day.applicative.map2.A, arrow.instances.day.applicative.map2.B)), arrow.instances.day.applicative.map2.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.map2.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.map2.G)))arrow.instances.day.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.day.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.map2Eval.F)), arrow.instances.day.applicative.map2Eval.G)), arrow.instances.day.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.map2Eval.F)), arrow.instances.day.applicative.map2Eval.G)), arrow.instances.day.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.day.applicative.map2Eval.A, arrow.instances.day.applicative.map2Eval.B)), arrow.instances.day.applicative.map2Eval.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.map2Eval.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.map2Eval.G)))arrow.instances.day.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.day.applicative$plus(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.plus.F)), arrow.instances.day.applicative.plus.G)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.plus.F)), arrow.instances.day.applicative.plus.G)), java.math.BigDecimal)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.plus.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.plus.G)))arrow.instances.day.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple2((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple3((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple4((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C, arrow.instances.day.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple5((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C, arrow.instances.day.applicative.product.D, arrow.instances.day.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple6((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C, arrow.instances.day.applicative.product.D, arrow.instances.day.applicative.product.E, arrow.instances.day.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple7((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C, arrow.instances.day.applicative.product.D, arrow.instances.day.applicative.product.E, arrow.instances.day.applicative.product.FF, )))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple8((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C, arrow.instances.day.applicative.product.D, arrow.instances.day.applicative.product.E, arrow.instances.day.applicative.product.FF, , arrow.instances.day.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.core.Tuple9((arrow.instances.day.applicative.product.A, arrow.instances.day.applicative.product.B, arrow.instances.day.applicative.product.C, arrow.instances.day.applicative.product.D, arrow.instances.day.applicative.product.E, arrow.instances.day.applicative.product.FF, , arrow.instances.day.applicative.product.H, arrow.instances.day.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.applicative.product.F)), arrow.instances.day.applicative.product.G)), arrow.instances.day.applicative.product.B)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.F)), arrow.typeclasses.Applicative((arrow.instances.day.applicative.product.G)))arrow.instances.day.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.day.comonad$coflatMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.comonad.coflatMap.F)), arrow.instances.day.comonad.coflatMap.G)), arrow.instances.day.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.comonad.coflatMap.F)), arrow.instances.day.comonad.coflatMap.G)), arrow.instances.day.comonad.coflatMap.A)), arrow.instances.day.comonad.coflatMap.B)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.coflatMap.F)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.coflatMap.G)))arrow.instances.day.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.day.comonad$comonad(arrow.data.Day.Companion, arrow.typeclasses.Comonad((arrow.instances.day.comonad.comonad.F)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.comonad.G)))arrow.instances.day.comonad/arrow.data.-day/comonad.html
$dokka.location:arrow.instances.day.comonad$duplicate(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.comonad.duplicate.F)), arrow.instances.day.comonad.duplicate.G)), arrow.instances.day.comonad.duplicate.A)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.duplicate.F)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.duplicate.G)))arrow.instances.day.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.day.comonad$extract(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.comonad.extract.F)), arrow.instances.day.comonad.extract.G)), arrow.instances.day.comonad.extract.A)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.extract.F)), arrow.typeclasses.Comonad((arrow.instances.day.comonad.extract.G)))arrow.instances.day.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.day.functor$as(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.as.F)), arrow.instances.day.functor.as.G)), arrow.instances.day.functor.as.A)), arrow.instances.day.functor.as.B)arrow.instances.day.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.day.functor$fproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.fproduct.F)), arrow.instances.day.functor.fproduct.G)), arrow.instances.day.functor.fproduct.A)), kotlin.Function1((arrow.instances.day.functor.fproduct.A, arrow.instances.day.functor.fproduct.B)))arrow.instances.day.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.day.functor$functor(arrow.data.Day.Companion)arrow.instances.day.functor/arrow.data.-day/functor.html
$dokka.location:arrow.instances.day.functor$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.imap.F)), arrow.instances.day.functor.imap.G)), arrow.instances.day.functor.imap.A)), kotlin.Function1((arrow.instances.day.functor.imap.A, arrow.instances.day.functor.imap.B)), kotlin.Function1((arrow.instances.day.functor.imap.B, arrow.instances.day.functor.imap.A)))arrow.instances.day.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.day.functor$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.map.F)), arrow.instances.day.functor.map.G)), arrow.instances.day.functor.map.A)), kotlin.Function1((arrow.instances.day.functor.map.A, arrow.instances.day.functor.map.B)))arrow.instances.day.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.day.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.tupleLeft.F)), arrow.instances.day.functor.tupleLeft.G)), arrow.instances.day.functor.tupleLeft.A)), arrow.instances.day.functor.tupleLeft.B)arrow.instances.day.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.day.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.tupleRight.F)), arrow.instances.day.functor.tupleRight.G)), arrow.instances.day.functor.tupleRight.A)), arrow.instances.day.functor.tupleRight.B)arrow.instances.day.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.day.functor$void(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.void.F)), arrow.instances.day.functor.void.G)), arrow.instances.day.functor.void.A)))arrow.instances.day.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.day.functor$widen(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.instances.day.functor.widen.F)), arrow.instances.day.functor.widen.G)), arrow.instances.day.functor.widen.A)))arrow.instances.day.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.ior.applicative$ap(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.ap.L)), arrow.instances.ior.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.ap.L)), kotlin.Function1((arrow.instances.ior.applicative.ap.A, arrow.instances.ior.applicative.ap.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.ap.L)))arrow.instances.ior.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.ior.applicative$applicative(arrow.data.Ior.Companion, arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.applicative.L)))arrow.instances.ior.applicative/arrow.data.-ior/applicative.html
$dokka.location:arrow.instances.ior.applicative$map(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.map.L)), arrow.instances.ior.applicative.map.A)), kotlin.Function1((arrow.instances.ior.applicative.map.A, arrow.instances.ior.applicative.map.B)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.map.L)))arrow.instances.ior.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.ior.applicative$map2(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.map2.L)), arrow.instances.ior.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.map2.L)), arrow.instances.ior.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.ior.applicative.map2.A, arrow.instances.ior.applicative.map2.B)), arrow.instances.ior.applicative.map2.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.map2.L)))arrow.instances.ior.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.ior.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.map2Eval.L)), arrow.instances.ior.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.map2Eval.L)), arrow.instances.ior.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.ior.applicative.map2Eval.A, arrow.instances.ior.applicative.map2Eval.B)), arrow.instances.ior.applicative.map2Eval.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.map2Eval.L)))arrow.instances.ior.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.ior.applicative$plus(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.plus.L)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.plus.L)), java.math.BigDecimal)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.plus.L)))arrow.instances.ior.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple2((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple3((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple4((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C, arrow.instances.ior.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple5((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C, arrow.instances.ior.applicative.product.D, arrow.instances.ior.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple6((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C, arrow.instances.ior.applicative.product.D, arrow.instances.ior.applicative.product.E, arrow.instances.ior.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple7((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C, arrow.instances.ior.applicative.product.D, arrow.instances.ior.applicative.product.E, arrow.instances.ior.applicative.product.FF, arrow.instances.ior.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple8((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C, arrow.instances.ior.applicative.product.D, arrow.instances.ior.applicative.product.E, arrow.instances.ior.applicative.product.FF, arrow.instances.ior.applicative.product.G, arrow.instances.ior.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.core.Tuple9((arrow.instances.ior.applicative.product.A, arrow.instances.ior.applicative.product.B, arrow.instances.ior.applicative.product.C, arrow.instances.ior.applicative.product.D, arrow.instances.ior.applicative.product.E, arrow.instances.ior.applicative.product.FF, arrow.instances.ior.applicative.product.G, arrow.instances.ior.applicative.product.H, arrow.instances.ior.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.applicative.product.L)), arrow.instances.ior.applicative.product.B)), arrow.typeclasses.Semigroup((arrow.instances.ior.applicative.product.L)))arrow.instances.ior.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.ior.bifunctor$bifunctor(arrow.data.Ior.Companion)arrow.instances.ior.bifunctor/arrow.data.-ior/bifunctor.html
$dokka.location:arrow.instances.ior.bifunctor$bimap(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.bifunctor.bimap.A)), arrow.instances.ior.bifunctor.bimap.B)), kotlin.Function1((arrow.instances.ior.bifunctor.bimap.A, arrow.instances.ior.bifunctor.bimap.C)), kotlin.Function1((arrow.instances.ior.bifunctor.bimap.B, arrow.instances.ior.bifunctor.bimap.D)))arrow.instances.ior.bifunctor/arrow.-kind/bimap.html
$dokka.location:arrow.instances.ior.bifunctor$leftWiden(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.bifunctor.leftWiden.A)), arrow.instances.ior.bifunctor.leftWiden.B)))arrow.instances.ior.bifunctor/arrow.-kind/left-widen.html
$dokka.location:arrow.instances.ior.bifunctor$mapLeft(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.bifunctor.mapLeft.A)), arrow.instances.ior.bifunctor.mapLeft.B)), kotlin.Function1((arrow.instances.ior.bifunctor.mapLeft.A, arrow.instances.ior.bifunctor.mapLeft.C)))arrow.instances.ior.bifunctor/arrow.-kind/map-left.html
$dokka.location:arrow.instances.ior.eq$eq(arrow.data.Ior.Companion, arrow.typeclasses.Eq((arrow.instances.ior.eq.eq.L)), arrow.typeclasses.Eq((arrow.instances.ior.eq.eq.R)))arrow.instances.ior.eq/arrow.data.-ior/eq.html
$dokka.location:arrow.instances.ior.eq$neqv(arrow.data.Ior((arrow.instances.ior.eq.neqv.L, arrow.instances.ior.eq.neqv.R)), arrow.data.Ior((arrow.instances.ior.eq.neqv.L, arrow.instances.ior.eq.neqv.R)), arrow.typeclasses.Eq((arrow.instances.ior.eq.neqv.L)), arrow.typeclasses.Eq((arrow.instances.ior.eq.neqv.R)))arrow.instances.ior.eq/arrow.data.-ior/neqv.html
$dokka.location:arrow.instances.ior.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.combineAll.L)), arrow.instances.ior.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.ior.foldable.combineAll.A)))arrow.instances.ior.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.ior.foldable$exists(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.exists.L)), arrow.instances.ior.foldable.exists.A)), kotlin.Function1((arrow.instances.ior.foldable.exists.A, kotlin.Boolean)))arrow.instances.ior.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.ior.foldable$find(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.find.L)), arrow.instances.ior.foldable.find.A)), kotlin.Function1((arrow.instances.ior.foldable.find.A, kotlin.Boolean)))arrow.instances.ior.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.ior.foldable$fold(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.fold.L)), arrow.instances.ior.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.ior.foldable.fold.A)))arrow.instances.ior.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.ior.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.foldLeft.L)), arrow.instances.ior.foldable.foldLeft.A)), arrow.instances.ior.foldable.foldLeft.B, kotlin.Function2((arrow.instances.ior.foldable.foldLeft.B, arrow.instances.ior.foldable.foldLeft.A, )))arrow.instances.ior.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.ior.foldable$foldM(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.foldM.L)), arrow.instances.ior.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.ior.foldable.foldM.G)), arrow.instances.ior.foldable.foldM.B, kotlin.Function2((arrow.instances.ior.foldable.foldM.B, arrow.instances.ior.foldable.foldM.A, arrow.Kind((arrow.instances.ior.foldable.foldM.G, )))))arrow.instances.ior.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.ior.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.foldMap.L)), arrow.instances.ior.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.ior.foldable.foldMap.B)), kotlin.Function1((arrow.instances.ior.foldable.foldMap.A, arrow.instances.ior.foldable.foldMap.B)))arrow.instances.ior.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.ior.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.foldMapM.L)), arrow.instances.ior.foldable.foldMapM.A)), arrow.instances.ior.foldable.foldMapM.MA, arrow.instances.ior.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.ior.foldable.foldMapM.A, arrow.Kind((arrow.instances.ior.foldable.foldMapM.G, arrow.instances.ior.foldable.foldMapM.B)))))arrow.instances.ior.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.ior.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.foldRight.L)), arrow.instances.ior.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.ior.foldable.foldRight.B)), kotlin.Function2((arrow.instances.ior.foldable.foldRight.A, arrow.core.Eval((arrow.instances.ior.foldable.foldRight.B)), )))arrow.instances.ior.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.ior.foldable$foldable(arrow.data.Ior.Companion)arrow.instances.ior.foldable/arrow.data.-ior/foldable.html
$dokka.location:arrow.instances.ior.foldable$forAll(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.forAll.L)), arrow.instances.ior.foldable.forAll.A)), kotlin.Function1((arrow.instances.ior.foldable.forAll.A, kotlin.Boolean)))arrow.instances.ior.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.ior.foldable$get(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.get.L)), arrow.instances.ior.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.ior.foldable.get.A)))), kotlin.Long)arrow.instances.ior.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.ior.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.isEmpty.L)), arrow.instances.ior.foldable.isEmpty.A)))arrow.instances.ior.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.ior.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.nonEmpty.L)), arrow.instances.ior.foldable.nonEmpty.A)))arrow.instances.ior.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.ior.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.reduceLeftOption.L)), arrow.instances.ior.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.ior.foldable.reduceLeftOption.A, , )))arrow.instances.ior.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.ior.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.reduceLeftToOption.L)), arrow.instances.ior.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.ior.foldable.reduceLeftToOption.A, arrow.instances.ior.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.ior.foldable.reduceLeftToOption.B, arrow.instances.ior.foldable.reduceLeftToOption.A, )))arrow.instances.ior.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.ior.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.reduceRightOption.L)), arrow.instances.ior.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.ior.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.ior.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.ior.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.reduceRightToOption.L)), arrow.instances.ior.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.ior.foldable.reduceRightToOption.A, arrow.instances.ior.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.ior.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.ior.foldable.reduceRightToOption.B)), )))arrow.instances.ior.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.ior.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.sequence_.L)), arrow.Kind((arrow.instances.ior.foldable.sequence_.G, arrow.instances.ior.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.ior.foldable.sequence_.G)))arrow.instances.ior.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.ior.foldable$size(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.size.L)), arrow.instances.ior.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.ior.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.ior.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.foldable.traverse_.L)), arrow.instances.ior.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.ior.foldable.traverse_.G)), kotlin.Function1((arrow.instances.ior.foldable.traverse_.A, arrow.Kind((arrow.instances.ior.foldable.traverse_.G, arrow.instances.ior.foldable.traverse_.B)))))arrow.instances.ior.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.ior.functor$as(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.as.L)), arrow.instances.ior.functor.as.A)), arrow.instances.ior.functor.as.B)arrow.instances.ior.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.ior.functor$fproduct(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.fproduct.L)), arrow.instances.ior.functor.fproduct.A)), kotlin.Function1((arrow.instances.ior.functor.fproduct.A, arrow.instances.ior.functor.fproduct.B)))arrow.instances.ior.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.ior.functor$functor(arrow.data.Ior.Companion)arrow.instances.ior.functor/arrow.data.-ior/functor.html
$dokka.location:arrow.instances.ior.functor$imap(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.imap.L)), arrow.instances.ior.functor.imap.A)), kotlin.Function1((arrow.instances.ior.functor.imap.A, arrow.instances.ior.functor.imap.B)), kotlin.Function1((arrow.instances.ior.functor.imap.B, arrow.instances.ior.functor.imap.A)))arrow.instances.ior.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.ior.functor$map(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.map.L)), arrow.instances.ior.functor.map.A)), kotlin.Function1((arrow.instances.ior.functor.map.A, arrow.instances.ior.functor.map.B)))arrow.instances.ior.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.ior.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.tupleLeft.L)), arrow.instances.ior.functor.tupleLeft.A)), arrow.instances.ior.functor.tupleLeft.B)arrow.instances.ior.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.ior.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.tupleRight.L)), arrow.instances.ior.functor.tupleRight.A)), arrow.instances.ior.functor.tupleRight.B)arrow.instances.ior.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.ior.functor$void(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.void.L)), arrow.instances.ior.functor.void.A)))arrow.instances.ior.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.ior.functor$widen(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.functor.widen.L)), arrow.instances.ior.functor.widen.A)))arrow.instances.ior.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.ior.hash$hash(arrow.data.Ior.Companion, arrow.typeclasses.Hash((arrow.instances.ior.hash.hash.L)), arrow.typeclasses.Hash((arrow.instances.ior.hash.hash.R)))arrow.instances.ior.hash/arrow.data.-ior/hash.html
$dokka.location:arrow.instances.ior.monad$ap(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.ap.L)), arrow.instances.ior.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.ap.L)), kotlin.Function1((arrow.instances.ior.monad.ap.A, arrow.instances.ior.monad.ap.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.ap.L)))arrow.instances.ior.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.ior.monad$effectM(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.effectM.L)), arrow.instances.ior.monad.effectM.A)), kotlin.Function1((arrow.instances.ior.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.effectM.L)), arrow.instances.ior.monad.effectM.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.effectM.L)))arrow.instances.ior.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.ior.monad$flatMap(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.flatMap.L)), arrow.instances.ior.monad.flatMap.A)), kotlin.Function1((arrow.instances.ior.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.flatMap.L)), arrow.instances.ior.monad.flatMap.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.flatMap.L)))arrow.instances.ior.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.ior.monad$flatten(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.flatten.L)), arrow.Kind((, arrow.instances.ior.monad.flatten.A)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.flatten.L)))arrow.instances.ior.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.ior.monad$followedBy(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.followedBy.L)), arrow.instances.ior.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.followedBy.L)), arrow.instances.ior.monad.followedBy.B)), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.followedBy.L)))arrow.instances.ior.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.ior.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.followedByEval.L)), arrow.instances.ior.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.followedByEval.L)), arrow.instances.ior.monad.followedByEval.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.followedByEval.L)))arrow.instances.ior.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.ior.monad$forEffect(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.forEffect.L)), arrow.instances.ior.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.forEffect.L)), arrow.instances.ior.monad.forEffect.B)), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.forEffect.L)))arrow.instances.ior.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.ior.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.forEffectEval.L)), arrow.instances.ior.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.forEffectEval.L)), arrow.instances.ior.monad.forEffectEval.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.forEffectEval.L)))arrow.instances.ior.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.ior.monad$ifM(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.ifM.L)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.ifM.L)), arrow.instances.ior.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.ifM.L)), arrow.instances.ior.monad.ifM.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.ifM.L)))arrow.instances.ior.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.ior.monad$map(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.map.L)), arrow.instances.ior.monad.map.A)), kotlin.Function1((arrow.instances.ior.monad.map.A, arrow.instances.ior.monad.map.B)), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.map.L)))arrow.instances.ior.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.ior.monad$monad(arrow.data.Ior.Companion, arrow.typeclasses.Semigroup((arrow.instances.ior.monad.monad.L)))arrow.instances.ior.monad/arrow.data.-ior/monad.html
$dokka.location:arrow.instances.ior.monad$mproduct(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.mproduct.L)), arrow.instances.ior.monad.mproduct.A)), kotlin.Function1((arrow.instances.ior.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.monad.mproduct.L)), arrow.instances.ior.monad.mproduct.B)))), arrow.typeclasses.Semigroup((arrow.instances.ior.monad.mproduct.L)))arrow.instances.ior.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.ior.show$show(arrow.data.Ior.Companion)arrow.instances.ior.show/arrow.data.-ior/show.html
$dokka.location:arrow.instances.ior.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.traverse.flatTraverse.L)), arrow.instances.ior.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.traverse.flatTraverse.L)))), arrow.typeclasses.Applicative((arrow.instances.ior.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.ior.traverse.flatTraverse.A, arrow.Kind((arrow.instances.ior.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.traverse.flatTraverse.L)), arrow.instances.ior.traverse.flatTraverse.B)))))))arrow.instances.ior.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.ior.traverse$map(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.traverse.map.L)), arrow.instances.ior.traverse.map.A)), kotlin.Function1((arrow.instances.ior.traverse.map.A, arrow.instances.ior.traverse.map.B)))arrow.instances.ior.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.ior.traverse$sequence(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.traverse.sequence.L)), arrow.Kind((arrow.instances.ior.traverse.sequence.G, arrow.instances.ior.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.ior.traverse.sequence.G)))arrow.instances.ior.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.ior.traverse$traverse(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.instances.ior.traverse.traverse.L)), arrow.instances.ior.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.ior.traverse.traverse.G)), kotlin.Function1((arrow.instances.ior.traverse.traverse.A, arrow.Kind((arrow.instances.ior.traverse.traverse.G, arrow.instances.ior.traverse.traverse.B)))))arrow.instances.ior.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.ior.traverse$traverse(arrow.data.Ior.Companion)arrow.instances.ior.traverse/arrow.data.-ior/traverse.html
$dokka.location:arrow.instances.kleisli.applicative$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.ap.F)), arrow.instances.kleisli.applicative.ap.D)), arrow.instances.kleisli.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.ap.F)), arrow.instances.kleisli.applicative.ap.D)), kotlin.Function1((arrow.instances.kleisli.applicative.ap.A, arrow.instances.kleisli.applicative.ap.B)))), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.ap.F)))arrow.instances.kleisli.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.kleisli.applicative$applicative(arrow.data.Kleisli.Companion, arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.applicative.F)))arrow.instances.kleisli.applicative/arrow.data.-kleisli/applicative.html
$dokka.location:arrow.instances.kleisli.applicative$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.map.F)), arrow.instances.kleisli.applicative.map.D)), arrow.instances.kleisli.applicative.map.A)), kotlin.Function1((arrow.instances.kleisli.applicative.map.A, arrow.instances.kleisli.applicative.map.B)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.map.F)))arrow.instances.kleisli.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.kleisli.applicative$map2(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.map2.F)), arrow.instances.kleisli.applicative.map2.D)), arrow.instances.kleisli.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.map2.F)), arrow.instances.kleisli.applicative.map2.D)), arrow.instances.kleisli.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.kleisli.applicative.map2.A, arrow.instances.kleisli.applicative.map2.B)), arrow.instances.kleisli.applicative.map2.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.map2.F)))arrow.instances.kleisli.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.kleisli.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.map2Eval.F)), arrow.instances.kleisli.applicative.map2Eval.D)), arrow.instances.kleisli.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.map2Eval.F)), arrow.instances.kleisli.applicative.map2Eval.D)), arrow.instances.kleisli.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.kleisli.applicative.map2Eval.A, arrow.instances.kleisli.applicative.map2Eval.B)), arrow.instances.kleisli.applicative.map2Eval.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.map2Eval.F)))arrow.instances.kleisli.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.kleisli.applicative$plus(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.plus.F)), arrow.instances.kleisli.applicative.plus.D)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.plus.F)), arrow.instances.kleisli.applicative.plus.D)), java.math.BigDecimal)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.plus.F)))arrow.instances.kleisli.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple2((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple3((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple4((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C, )))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple5((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C, , arrow.instances.kleisli.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple6((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C, , arrow.instances.kleisli.applicative.product.E, arrow.instances.kleisli.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple7((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C, , arrow.instances.kleisli.applicative.product.E, arrow.instances.kleisli.applicative.product.FF, arrow.instances.kleisli.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple8((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C, , arrow.instances.kleisli.applicative.product.E, arrow.instances.kleisli.applicative.product.FF, arrow.instances.kleisli.applicative.product.G, arrow.instances.kleisli.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.core.Tuple9((arrow.instances.kleisli.applicative.product.A, arrow.instances.kleisli.applicative.product.B, arrow.instances.kleisli.applicative.product.C, , arrow.instances.kleisli.applicative.product.E, arrow.instances.kleisli.applicative.product.FF, arrow.instances.kleisli.applicative.product.G, arrow.instances.kleisli.applicative.product.H, arrow.instances.kleisli.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.Z)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicative.product.F)), arrow.instances.kleisli.applicative.product.D)), arrow.instances.kleisli.applicative.product.B)), arrow.typeclasses.Applicative((arrow.instances.kleisli.applicative.product.F)))arrow.instances.kleisli.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.kleisli.applicativeError$applicativeError(arrow.data.Kleisli.Companion, arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.applicativeError.F, arrow.instances.kleisli.applicativeError.applicativeError.E)))arrow.instances.kleisli.applicative-error/arrow.data.-kleisli/applicative-error.html
$dokka.location:arrow.instances.kleisli.applicativeError$attempt(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicativeError.attempt.F)), arrow.instances.kleisli.applicativeError.attempt.D)), arrow.instances.kleisli.applicativeError.attempt.A)), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.attempt.F, arrow.instances.kleisli.applicativeError.attempt.E)))arrow.instances.kleisli.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.instances.kleisli.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicativeError.catch.F)), arrow.instances.kleisli.applicativeError.catch.D)), kotlin.Throwable)), kotlin.Function0((arrow.instances.kleisli.applicativeError.catch.A)), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.catch.F, arrow.instances.kleisli.applicativeError.catch.E)))arrow.instances.kleisli.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.instances.kleisli.applicativeError$fromEither(arrow.core.Either((arrow.instances.kleisli.applicativeError.fromEither.EE, arrow.instances.kleisli.applicativeError.fromEither.A)), kotlin.Function1((arrow.instances.kleisli.applicativeError.fromEither.EE, arrow.instances.kleisli.applicativeError.fromEither.E)), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.fromEither.F, arrow.instances.kleisli.applicativeError.fromEither.E)))arrow.instances.kleisli.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.instances.kleisli.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.instances.kleisli.applicativeError.fromOption.A)), kotlin.Function0((arrow.instances.kleisli.applicativeError.fromOption.E)), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.fromOption.F, arrow.instances.kleisli.applicativeError.fromOption.E)))arrow.instances.kleisli.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.instances.kleisli.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.instances.kleisli.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, arrow.instances.kleisli.applicativeError.fromTry.E)), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.fromTry.F, arrow.instances.kleisli.applicativeError.fromTry.E)))arrow.instances.kleisli.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.instances.kleisli.applicativeError$handleError(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicativeError.handleError.F)), arrow.instances.kleisli.applicativeError.handleError.D)), arrow.instances.kleisli.applicativeError.handleError.A)), kotlin.Function1((arrow.instances.kleisli.applicativeError.handleError.E, arrow.instances.kleisli.applicativeError.handleError.A)), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.handleError.F, arrow.instances.kleisli.applicativeError.handleError.E)))arrow.instances.kleisli.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.instances.kleisli.applicativeError$handleErrorWith(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicativeError.handleErrorWith.F)), arrow.instances.kleisli.applicativeError.handleErrorWith.D)), arrow.instances.kleisli.applicativeError.handleErrorWith.A)), kotlin.Function1((arrow.instances.kleisli.applicativeError.handleErrorWith.E, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.applicativeError.handleErrorWith.F)), arrow.instances.kleisli.applicativeError.handleErrorWith.D)), arrow.instances.kleisli.applicativeError.handleErrorWith.A)))), arrow.typeclasses.ApplicativeError((arrow.instances.kleisli.applicativeError.handleErrorWith.F, arrow.instances.kleisli.applicativeError.handleErrorWith.E)))arrow.instances.kleisli.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.instances.kleisli.contravariant$contramap(arrow.Kind((arrow.typeclasses.Conested((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.contravariant.contramap.F)), arrow.instances.kleisli.contravariant.contramap.D)), arrow.instances.kleisli.contravariant.contramap.A)), kotlin.Function1((arrow.instances.kleisli.contravariant.contramap.B, arrow.instances.kleisli.contravariant.contramap.A)))arrow.instances.kleisli.contravariant/arrow.-kind/contramap.html
$dokka.location:arrow.instances.kleisli.contravariant$contravariant(arrow.data.Kleisli.Companion)arrow.instances.kleisli.contravariant/arrow.data.-kleisli/contravariant.html
$dokka.location:arrow.instances.kleisli.contravariant$imap(arrow.Kind((arrow.typeclasses.Conested((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.contravariant.imap.F)), arrow.instances.kleisli.contravariant.imap.D)), arrow.instances.kleisli.contravariant.imap.A)), kotlin.Function1((arrow.instances.kleisli.contravariant.imap.A, arrow.instances.kleisli.contravariant.imap.B)), kotlin.Function1((arrow.instances.kleisli.contravariant.imap.B, arrow.instances.kleisli.contravariant.imap.A)))arrow.instances.kleisli.contravariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.kleisli.contravariant$narrow(arrow.Kind((arrow.typeclasses.Conested((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.contravariant.narrow.F)), arrow.instances.kleisli.contravariant.narrow.D)), arrow.instances.kleisli.contravariant.narrow.A)))arrow.instances.kleisli.contravariant/arrow.-kind/narrow.html
$dokka.location:arrow.instances.kleisli.functor$as(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.as.F)), arrow.instances.kleisli.functor.as.D)), arrow.instances.kleisli.functor.as.A)), arrow.instances.kleisli.functor.as.B, arrow.typeclasses.Functor((arrow.instances.kleisli.functor.as.F)))arrow.instances.kleisli.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.kleisli.functor$fproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.fproduct.F)), arrow.instances.kleisli.functor.fproduct.D)), arrow.instances.kleisli.functor.fproduct.A)), kotlin.Function1((arrow.instances.kleisli.functor.fproduct.A, arrow.instances.kleisli.functor.fproduct.B)), arrow.typeclasses.Functor((arrow.instances.kleisli.functor.fproduct.F)))arrow.instances.kleisli.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.kleisli.functor$functor(arrow.data.Kleisli.Companion, arrow.typeclasses.Functor((arrow.instances.kleisli.functor.functor.F)))arrow.instances.kleisli.functor/arrow.data.-kleisli/functor.html
$dokka.location:arrow.instances.kleisli.functor$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.imap.F)), arrow.instances.kleisli.functor.imap.D)), arrow.instances.kleisli.functor.imap.A)), kotlin.Function1((arrow.instances.kleisli.functor.imap.A, arrow.instances.kleisli.functor.imap.B)), kotlin.Function1((arrow.instances.kleisli.functor.imap.B, arrow.instances.kleisli.functor.imap.A)), arrow.typeclasses.Functor((arrow.instances.kleisli.functor.imap.F)))arrow.instances.kleisli.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.kleisli.functor$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.map.F)), arrow.instances.kleisli.functor.map.D)), arrow.instances.kleisli.functor.map.A)), kotlin.Function1((arrow.instances.kleisli.functor.map.A, arrow.instances.kleisli.functor.map.B)), arrow.typeclasses.Functor((arrow.instances.kleisli.functor.map.F)))arrow.instances.kleisli.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.kleisli.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.tupleLeft.F)), arrow.instances.kleisli.functor.tupleLeft.D)), arrow.instances.kleisli.functor.tupleLeft.A)), arrow.instances.kleisli.functor.tupleLeft.B, arrow.typeclasses.Functor((arrow.instances.kleisli.functor.tupleLeft.F)))arrow.instances.kleisli.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.kleisli.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.tupleRight.F)), arrow.instances.kleisli.functor.tupleRight.D)), arrow.instances.kleisli.functor.tupleRight.A)), arrow.instances.kleisli.functor.tupleRight.B, arrow.typeclasses.Functor((arrow.instances.kleisli.functor.tupleRight.F)))arrow.instances.kleisli.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.kleisli.functor$void(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.void.F)), arrow.instances.kleisli.functor.void.D)), arrow.instances.kleisli.functor.void.A)), arrow.typeclasses.Functor((arrow.instances.kleisli.functor.void.F)))arrow.instances.kleisli.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.kleisli.functor$widen(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.functor.widen.F)), arrow.instances.kleisli.functor.widen.D)), arrow.instances.kleisli.functor.widen.A)), arrow.typeclasses.Functor((arrow.instances.kleisli.functor.widen.F)))arrow.instances.kleisli.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.kleisli.monad$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.ap.F)), arrow.instances.kleisli.monad.ap.D)), arrow.instances.kleisli.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.ap.F)), arrow.instances.kleisli.monad.ap.D)), kotlin.Function1((arrow.instances.kleisli.monad.ap.A, arrow.instances.kleisli.monad.ap.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.ap.F)))arrow.instances.kleisli.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.kleisli.monad$effectM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.effectM.F)), arrow.instances.kleisli.monad.effectM.D)), arrow.instances.kleisli.monad.effectM.A)), kotlin.Function1((arrow.instances.kleisli.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.effectM.F)), arrow.instances.kleisli.monad.effectM.D)), arrow.instances.kleisli.monad.effectM.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.effectM.F)))arrow.instances.kleisli.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.kleisli.monad$flatMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.flatMap.F)), arrow.instances.kleisli.monad.flatMap.D)), arrow.instances.kleisli.monad.flatMap.A)), kotlin.Function1((arrow.instances.kleisli.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.flatMap.F)), arrow.instances.kleisli.monad.flatMap.D)), arrow.instances.kleisli.monad.flatMap.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.flatMap.F)))arrow.instances.kleisli.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.kleisli.monad$flatten(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.flatten.F)), arrow.instances.kleisli.monad.flatten.D)), arrow.Kind((, arrow.instances.kleisli.monad.flatten.A)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.flatten.F)))arrow.instances.kleisli.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.kleisli.monad$followedBy(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.followedBy.F)), arrow.instances.kleisli.monad.followedBy.D)), arrow.instances.kleisli.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.followedBy.F)), arrow.instances.kleisli.monad.followedBy.D)), arrow.instances.kleisli.monad.followedBy.B)), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.followedBy.F)))arrow.instances.kleisli.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.kleisli.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.followedByEval.F)), arrow.instances.kleisli.monad.followedByEval.D)), arrow.instances.kleisli.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.followedByEval.F)), arrow.instances.kleisli.monad.followedByEval.D)), arrow.instances.kleisli.monad.followedByEval.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.followedByEval.F)))arrow.instances.kleisli.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.kleisli.monad$forEffect(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.forEffect.F)), arrow.instances.kleisli.monad.forEffect.D)), arrow.instances.kleisli.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.forEffect.F)), arrow.instances.kleisli.monad.forEffect.D)), arrow.instances.kleisli.monad.forEffect.B)), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.forEffect.F)))arrow.instances.kleisli.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.kleisli.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.forEffectEval.F)), arrow.instances.kleisli.monad.forEffectEval.D)), arrow.instances.kleisli.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.forEffectEval.F)), arrow.instances.kleisli.monad.forEffectEval.D)), arrow.instances.kleisli.monad.forEffectEval.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.forEffectEval.F)))arrow.instances.kleisli.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.kleisli.monad$ifM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.ifM.F)), arrow.instances.kleisli.monad.ifM.D)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.ifM.F)), arrow.instances.kleisli.monad.ifM.D)), arrow.instances.kleisli.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.ifM.F)), arrow.instances.kleisli.monad.ifM.D)), arrow.instances.kleisli.monad.ifM.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.ifM.F)))arrow.instances.kleisli.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.kleisli.monad$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.map.F)), arrow.instances.kleisli.monad.map.D)), arrow.instances.kleisli.monad.map.A)), kotlin.Function1((arrow.instances.kleisli.monad.map.A, arrow.instances.kleisli.monad.map.B)), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.map.F)))arrow.instances.kleisli.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.kleisli.monad$monad(arrow.data.Kleisli.Companion, arrow.typeclasses.Monad((arrow.instances.kleisli.monad.monad.F)))arrow.instances.kleisli.monad/arrow.data.-kleisli/monad.html
$dokka.location:arrow.instances.kleisli.monad$mproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.mproduct.F)), arrow.instances.kleisli.monad.mproduct.D)), arrow.instances.kleisli.monad.mproduct.A)), kotlin.Function1((arrow.instances.kleisli.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monad.mproduct.F)), arrow.instances.kleisli.monad.mproduct.D)), arrow.instances.kleisli.monad.mproduct.B)))), arrow.typeclasses.Monad((arrow.instances.kleisli.monad.mproduct.F)))arrow.instances.kleisli.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.kleisli.monadError$ensure(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.instances.kleisli.monadError.ensure.F)), arrow.instances.kleisli.monadError.ensure.D)), arrow.instances.kleisli.monadError.ensure.A)), kotlin.Function0((arrow.instances.kleisli.monadError.ensure.E)), kotlin.Function1((arrow.instances.kleisli.monadError.ensure.A, kotlin.Boolean)), arrow.typeclasses.MonadError((arrow.instances.kleisli.monadError.ensure.F, arrow.instances.kleisli.monadError.ensure.E)))arrow.instances.kleisli.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.instances.kleisli.monadError$monadError(arrow.data.Kleisli.Companion, arrow.typeclasses.MonadError((arrow.instances.kleisli.monadError.monadError.F, arrow.instances.kleisli.monadError.monadError.E)))arrow.instances.kleisli.monad-error/arrow.data.-kleisli/monad-error.html
$dokka.location:arrow.instances.list.applicative$ap(kotlin.collections.List((arrow.instances.list.applicative.ap.A)), kotlin.collections.List((kotlin.Function1((arrow.instances.list.applicative.ap.A, arrow.instances.list.applicative.ap.B)))))arrow.instances.list.applicative/kotlin.collections.-list/ap.html
$dokka.location:arrow.instances.list.applicative$map(kotlin.collections.List((arrow.instances.list.applicative.map.A)), kotlin.Function1((arrow.instances.list.applicative.map.A, arrow.instances.list.applicative.map.B)))arrow.instances.list.applicative/kotlin.collections.-list/map.html
$dokka.location:arrow.instances.list.applicative$map2(kotlin.collections.List((arrow.instances.list.applicative.map2.A)), kotlin.collections.List((arrow.instances.list.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.list.applicative.map2.A, arrow.instances.list.applicative.map2.B)), arrow.instances.list.applicative.map2.Z)))arrow.instances.list.applicative/kotlin.collections.-list/map2.html
$dokka.location:arrow.instances.list.applicative$map2Eval(kotlin.collections.List((arrow.instances.list.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForListK, arrow.instances.list.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.list.applicative.map2Eval.A, arrow.instances.list.applicative.map2Eval.B)), arrow.instances.list.applicative.map2Eval.Z)))arrow.instances.list.applicative/kotlin.collections.-list/map2-eval.html
$dokka.location:arrow.instances.list.applicative$plus(kotlin.collections.List((java.math.BigDecimal)), kotlin.collections.List((java.math.BigDecimal)))arrow.instances.list.applicative/kotlin.collections.-list/plus.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple2((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple3((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple4((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C, arrow.instances.list.applicative.product.D)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple5((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C, arrow.instances.list.applicative.product.D, arrow.instances.list.applicative.product.E)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple6((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C, arrow.instances.list.applicative.product.D, arrow.instances.list.applicative.product.E, arrow.instances.list.applicative.product.FF)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple7((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C, arrow.instances.list.applicative.product.D, arrow.instances.list.applicative.product.E, arrow.instances.list.applicative.product.FF, arrow.instances.list.applicative.product.G)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple8((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C, arrow.instances.list.applicative.product.D, arrow.instances.list.applicative.product.E, arrow.instances.list.applicative.product.FF, arrow.instances.list.applicative.product.G, arrow.instances.list.applicative.product.H)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.core.Tuple9((arrow.instances.list.applicative.product.A, arrow.instances.list.applicative.product.B, arrow.instances.list.applicative.product.C, arrow.instances.list.applicative.product.D, arrow.instances.list.applicative.product.E, arrow.instances.list.applicative.product.FF, arrow.instances.list.applicative.product.G, arrow.instances.list.applicative.product.H, arrow.instances.list.applicative.product.I)))), kotlin.collections.List((arrow.instances.list.applicative.product.Z)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.applicative$product(kotlin.collections.List((arrow.instances.list.applicative.product.A)), kotlin.collections.List((arrow.instances.list.applicative.product.B)))arrow.instances.list.applicative/kotlin.collections.-list/product.html
$dokka.location:arrow.instances.list.eq$eqv(kotlin.collections.List((arrow.instances.list.eq.eqv.A)), kotlin.collections.List((arrow.instances.list.eq.eqv.A)), arrow.typeclasses.Eq((arrow.instances.list.eq.eqv.A)))arrow.instances.list.eq/kotlin.collections.-list/eqv.html
$dokka.location:arrow.instances.list.eq$neqv(kotlin.collections.List((arrow.instances.list.eq.neqv.A)), kotlin.collections.List((arrow.instances.list.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.list.eq.neqv.A)))arrow.instances.list.eq/kotlin.collections.-list/neqv.html
$dokka.location:arrow.instances.list.foldable$combineAll(kotlin.collections.List((arrow.instances.list.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.list.foldable.combineAll.A)))arrow.instances.list.foldable/kotlin.collections.-list/combine-all.html
$dokka.location:arrow.instances.list.foldable$exists(kotlin.collections.List((arrow.instances.list.foldable.exists.A)), kotlin.Function1((arrow.instances.list.foldable.exists.A, kotlin.Boolean)))arrow.instances.list.foldable/kotlin.collections.-list/exists.html
$dokka.location:arrow.instances.list.foldable$find(kotlin.collections.List((arrow.instances.list.foldable.find.A)), kotlin.Function1((arrow.instances.list.foldable.find.A, kotlin.Boolean)))arrow.instances.list.foldable/kotlin.collections.-list/find.html
$dokka.location:arrow.instances.list.foldable$fold(kotlin.collections.List((arrow.instances.list.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.list.foldable.fold.A)))arrow.instances.list.foldable/kotlin.collections.-list/fold.html
$dokka.location:arrow.instances.list.foldable$foldLeft(kotlin.collections.List((arrow.instances.list.foldable.foldLeft.A)), arrow.instances.list.foldable.foldLeft.B, kotlin.Function2((arrow.instances.list.foldable.foldLeft.B, arrow.instances.list.foldable.foldLeft.A, )))arrow.instances.list.foldable/kotlin.collections.-list/fold-left.html
$dokka.location:arrow.instances.list.foldable$foldM(kotlin.collections.List((arrow.instances.list.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.list.foldable.foldM.G)), arrow.instances.list.foldable.foldM.B, kotlin.Function2((arrow.instances.list.foldable.foldM.B, arrow.instances.list.foldable.foldM.A, arrow.Kind((arrow.instances.list.foldable.foldM.G, )))))arrow.instances.list.foldable/kotlin.collections.-list/fold-m.html
$dokka.location:arrow.instances.list.foldable$foldMap(kotlin.collections.List((arrow.instances.list.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.list.foldable.foldMap.B)), kotlin.Function1((arrow.instances.list.foldable.foldMap.A, arrow.instances.list.foldable.foldMap.B)))arrow.instances.list.foldable/kotlin.collections.-list/fold-map.html
$dokka.location:arrow.instances.list.foldable$foldMapM(kotlin.collections.List((arrow.instances.list.foldable.foldMapM.A)), arrow.instances.list.foldable.foldMapM.MA, arrow.instances.list.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.list.foldable.foldMapM.A, arrow.Kind((arrow.instances.list.foldable.foldMapM.G, arrow.instances.list.foldable.foldMapM.B)))))arrow.instances.list.foldable/kotlin.collections.-list/fold-map-m.html
$dokka.location:arrow.instances.list.foldable$foldRight(kotlin.collections.List((arrow.instances.list.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.list.foldable.foldRight.B)), kotlin.Function2((arrow.instances.list.foldable.foldRight.A, arrow.core.Eval((arrow.instances.list.foldable.foldRight.B)), )))arrow.instances.list.foldable/kotlin.collections.-list/fold-right.html
$dokka.location:arrow.instances.list.foldable$forAll(kotlin.collections.List((arrow.instances.list.foldable.forAll.A)), kotlin.Function1((arrow.instances.list.foldable.forAll.A, kotlin.Boolean)))arrow.instances.list.foldable/kotlin.collections.-list/for-all.html
$dokka.location:arrow.instances.list.foldable$nonEmpty(kotlin.collections.List((arrow.instances.list.foldable.nonEmpty.A)))arrow.instances.list.foldable/kotlin.collections.-list/non-empty.html
$dokka.location:arrow.instances.list.foldable$reduceLeftOption(kotlin.collections.List((arrow.instances.list.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.list.foldable.reduceLeftOption.A, , )))arrow.instances.list.foldable/kotlin.collections.-list/reduce-left-option.html
$dokka.location:arrow.instances.list.foldable$reduceLeftToOption(kotlin.collections.List((arrow.instances.list.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.list.foldable.reduceLeftToOption.A, arrow.instances.list.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.list.foldable.reduceLeftToOption.B, arrow.instances.list.foldable.reduceLeftToOption.A, )))arrow.instances.list.foldable/kotlin.collections.-list/reduce-left-to-option.html
$dokka.location:arrow.instances.list.foldable$reduceRightOption(kotlin.collections.List((arrow.instances.list.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.list.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.list.foldable/kotlin.collections.-list/reduce-right-option.html
$dokka.location:arrow.instances.list.foldable$reduceRightToOption(kotlin.collections.List((arrow.instances.list.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.list.foldable.reduceRightToOption.A, arrow.instances.list.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.list.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.list.foldable.reduceRightToOption.B)), )))arrow.instances.list.foldable/kotlin.collections.-list/reduce-right-to-option.html
$dokka.location:arrow.instances.list.foldable$sequence_(kotlin.collections.List((arrow.Kind((arrow.instances.list.foldable.sequence_.G, arrow.instances.list.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.list.foldable.sequence_.G)))arrow.instances.list.foldable/kotlin.collections.-list/sequence_.html
$dokka.location:arrow.instances.list.foldable$traverse_(kotlin.collections.List((arrow.instances.list.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.list.foldable.traverse_.G)), kotlin.Function1((arrow.instances.list.foldable.traverse_.A, arrow.Kind((arrow.instances.list.foldable.traverse_.G, arrow.instances.list.foldable.traverse_.B)))))arrow.instances.list.foldable/kotlin.collections.-list/traverse_.html
$dokka.location:arrow.instances.list.functor$as(kotlin.collections.List((arrow.instances.list.functor.as.A)), arrow.instances.list.functor.as.B)arrow.instances.list.functor/kotlin.collections.-list/as.html
$dokka.location:arrow.instances.list.functor$fproduct(kotlin.collections.List((arrow.instances.list.functor.fproduct.A)), kotlin.Function1((arrow.instances.list.functor.fproduct.A, arrow.instances.list.functor.fproduct.B)))arrow.instances.list.functor/kotlin.collections.-list/fproduct.html
$dokka.location:arrow.instances.list.functor$imap(kotlin.collections.List((arrow.instances.list.functor.imap.A)), kotlin.Function1((arrow.instances.list.functor.imap.A, arrow.instances.list.functor.imap.B)), kotlin.Function1((arrow.instances.list.functor.imap.B, arrow.instances.list.functor.imap.A)))arrow.instances.list.functor/kotlin.collections.-list/imap.html
$dokka.location:arrow.instances.list.functor$map(kotlin.collections.List((arrow.instances.list.functor.map.A)), kotlin.Function1((arrow.instances.list.functor.map.A, arrow.instances.list.functor.map.B)))arrow.instances.list.functor/kotlin.collections.-list/map.html
$dokka.location:arrow.instances.list.functor$tupleLeft(kotlin.collections.List((arrow.instances.list.functor.tupleLeft.A)), arrow.instances.list.functor.tupleLeft.B)arrow.instances.list.functor/kotlin.collections.-list/tuple-left.html
$dokka.location:arrow.instances.list.functor$tupleRight(kotlin.collections.List((arrow.instances.list.functor.tupleRight.A)), arrow.instances.list.functor.tupleRight.B)arrow.instances.list.functor/kotlin.collections.-list/tuple-right.html
$dokka.location:arrow.instances.list.functor$void(kotlin.collections.List((arrow.instances.list.functor.void.A)))arrow.instances.list.functor/kotlin.collections.-list/void.html
$dokka.location:arrow.instances.list.functor$widen(kotlin.collections.List((arrow.instances.list.functor.widen.A)))arrow.instances.list.functor/kotlin.collections.-list/widen.html
$dokka.location:arrow.instances.list.hash$hash(kotlin.collections.List((arrow.instances.list.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.list.hash.hash.A)))arrow.instances.list.hash/kotlin.collections.-list/hash.html
$dokka.location:arrow.instances.list.monad$ap(kotlin.collections.List((arrow.instances.list.monad.ap.A)), kotlin.collections.List((kotlin.Function1((arrow.instances.list.monad.ap.A, arrow.instances.list.monad.ap.B)))))arrow.instances.list.monad/kotlin.collections.-list/ap.html
$dokka.location:arrow.instances.list.monad$effectM(kotlin.collections.List((arrow.instances.list.monad.effectM.A)), kotlin.Function1((arrow.instances.list.monad.effectM.A, arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.effectM.B)))))arrow.instances.list.monad/kotlin.collections.-list/effect-m.html
$dokka.location:arrow.instances.list.monad$flatMap(kotlin.collections.List((arrow.instances.list.monad.flatMap.A)), kotlin.Function1((arrow.instances.list.monad.flatMap.A, arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.flatMap.B)))))arrow.instances.list.monad/kotlin.collections.-list/flat-map.html
$dokka.location:arrow.instances.list.monad$flatten(kotlin.collections.List((arrow.data.ListK((arrow.instances.list.monad.flatten.A)))))arrow.instances.list.monad/kotlin.collections.-list/flatten.html
$dokka.location:arrow.instances.list.monad$followedBy(kotlin.collections.List((arrow.instances.list.monad.followedBy.A)), kotlin.collections.List((arrow.instances.list.monad.followedBy.B)))arrow.instances.list.monad/kotlin.collections.-list/followed-by.html
$dokka.location:arrow.instances.list.monad$followedByEval(kotlin.collections.List((arrow.instances.list.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.followedByEval.B)))))arrow.instances.list.monad/kotlin.collections.-list/followed-by-eval.html
$dokka.location:arrow.instances.list.monad$forEffect(kotlin.collections.List((arrow.instances.list.monad.forEffect.A)), kotlin.collections.List((arrow.instances.list.monad.forEffect.B)))arrow.instances.list.monad/kotlin.collections.-list/for-effect.html
$dokka.location:arrow.instances.list.monad$forEffectEval(kotlin.collections.List((arrow.instances.list.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.forEffectEval.B)))))arrow.instances.list.monad/kotlin.collections.-list/for-effect-eval.html
$dokka.location:arrow.instances.list.monad$ifM(kotlin.collections.List((kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.ifM.B)))))arrow.instances.list.monad/kotlin.collections.-list/if-m.html
$dokka.location:arrow.instances.list.monad$map(kotlin.collections.List((arrow.instances.list.monad.map.A)), kotlin.Function1((arrow.instances.list.monad.map.A, arrow.instances.list.monad.map.B)))arrow.instances.list.monad/kotlin.collections.-list/map.html
$dokka.location:arrow.instances.list.monad$mproduct(kotlin.collections.List((arrow.instances.list.monad.mproduct.A)), kotlin.Function1((arrow.instances.list.monad.mproduct.A, arrow.Kind((arrow.data.ForListK, arrow.instances.list.monad.mproduct.B)))))arrow.instances.list.monad/kotlin.collections.-list/mproduct.html
$dokka.location:arrow.instances.list.monoid$combineAll(kotlin.collections.Collection((arrow.data.ListK((arrow.instances.list.monoid.combineAll.A)))))arrow.instances.list.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.list.semigroup$maybeCombine(kotlin.collections.List((arrow.instances.list.semigroup.maybeCombine.A)), kotlin.collections.List((arrow.instances.list.semigroup.maybeCombine.A)))arrow.instances.list.semigroup/kotlin.collections.-list/maybe-combine.html
$dokka.location:arrow.instances.list.semigroup$plus(kotlin.collections.List((arrow.instances.list.semigroup.plus.A)), kotlin.collections.List((arrow.instances.list.semigroup.plus.A)))arrow.instances.list.semigroup/kotlin.collections.-list/plus.html
$dokka.location:arrow.instances.list.semigroupK$combineK(kotlin.collections.List((arrow.instances.list.semigroupK.combineK.A)), kotlin.collections.List((arrow.instances.list.semigroupK.combineK.A)))arrow.instances.list.semigroup-k/kotlin.collections.-list/combine-k.html
$dokka.location:arrow.instances.list.show$show(kotlin.collections.List((arrow.instances.list.show.show.A)))arrow.instances.list.show/kotlin.collections.-list/show.html
$dokka.location:arrow.instances.list.traverse$flatTraverse(kotlin.collections.List((arrow.instances.list.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.data.ForListK)), arrow.typeclasses.Applicative((arrow.instances.list.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.list.traverse.flatTraverse.A, arrow.Kind((arrow.instances.list.traverse.flatTraverse.G, arrow.Kind((arrow.data.ForListK, arrow.instances.list.traverse.flatTraverse.B)))))))arrow.instances.list.traverse/kotlin.collections.-list/flat-traverse.html
$dokka.location:arrow.instances.list.traverse$map(kotlin.collections.List((arrow.instances.list.traverse.map.A)), kotlin.Function1((arrow.instances.list.traverse.map.A, arrow.instances.list.traverse.map.B)))arrow.instances.list.traverse/kotlin.collections.-list/map.html
$dokka.location:arrow.instances.list.traverse$sequence(kotlin.collections.List((arrow.Kind((arrow.instances.list.traverse.sequence.G, arrow.instances.list.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.list.traverse.sequence.G)))arrow.instances.list.traverse/kotlin.collections.-list/sequence.html
$dokka.location:arrow.instances.list.traverse$traverse(kotlin.collections.List((arrow.instances.list.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.list.traverse.traverse.G)), kotlin.Function1((arrow.instances.list.traverse.traverse.A, arrow.Kind((arrow.instances.list.traverse.traverse.G, arrow.instances.list.traverse.traverse.B)))))arrow.instances.list.traverse/kotlin.collections.-list/traverse.html
$dokka.location:arrow.instances.listk.applicative$ap(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.ap.A)), arrow.Kind((arrow.data.ForListK, kotlin.Function1((arrow.instances.listk.applicative.ap.A, arrow.instances.listk.applicative.ap.B)))))arrow.instances.listk.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.listk.applicative$applicative(arrow.data.ListK.Companion)arrow.instances.listk.applicative/arrow.data.-list-k/applicative.html
$dokka.location:arrow.instances.listk.applicative$map(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.map.A)), kotlin.Function1((arrow.instances.listk.applicative.map.A, arrow.instances.listk.applicative.map.B)))arrow.instances.listk.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.listk.applicative$map2(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.map2.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.listk.applicative.map2.A, arrow.instances.listk.applicative.map2.B)), arrow.instances.listk.applicative.map2.Z)))arrow.instances.listk.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.listk.applicative$map2Eval(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.listk.applicative.map2Eval.A, arrow.instances.listk.applicative.map2Eval.B)), arrow.instances.listk.applicative.map2Eval.Z)))arrow.instances.listk.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.listk.applicative$plus(arrow.Kind((arrow.data.ForListK, java.math.BigDecimal)), arrow.Kind((arrow.data.ForListK, java.math.BigDecimal)))arrow.instances.listk.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple2((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple3((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple4((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C, arrow.instances.listk.applicative.product.D)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple5((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C, arrow.instances.listk.applicative.product.D, arrow.instances.listk.applicative.product.E)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple6((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C, arrow.instances.listk.applicative.product.D, arrow.instances.listk.applicative.product.E, arrow.instances.listk.applicative.product.FF)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple7((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C, arrow.instances.listk.applicative.product.D, arrow.instances.listk.applicative.product.E, arrow.instances.listk.applicative.product.FF, arrow.instances.listk.applicative.product.G)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple8((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C, arrow.instances.listk.applicative.product.D, arrow.instances.listk.applicative.product.E, arrow.instances.listk.applicative.product.FF, arrow.instances.listk.applicative.product.G, arrow.instances.listk.applicative.product.H)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple9((arrow.instances.listk.applicative.product.A, arrow.instances.listk.applicative.product.B, arrow.instances.listk.applicative.product.C, arrow.instances.listk.applicative.product.D, arrow.instances.listk.applicative.product.E, arrow.instances.listk.applicative.product.FF, arrow.instances.listk.applicative.product.G, arrow.instances.listk.applicative.product.H, arrow.instances.listk.applicative.product.I)))), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.Z)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.applicative$product(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.applicative.product.B)))arrow.instances.listk.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.listk.eq$eq(arrow.data.ListK.Companion, arrow.typeclasses.Eq((arrow.instances.listk.eq.eq.A)))arrow.instances.listk.eq/arrow.data.-list-k/eq.html
$dokka.location:arrow.instances.listk.eq$eqv(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.eq.eqv.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.eq.eqv.A)), arrow.typeclasses.Eq((arrow.instances.listk.eq.eqv.A)))arrow.instances.listk.eq/arrow.-kind/eqv.html
$dokka.location:arrow.instances.listk.eq$neqv(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.eq.neqv.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.listk.eq.neqv.A)))arrow.instances.listk.eq/arrow.-kind/neqv.html
$dokka.location:arrow.instances.listk.foldable$combineAll(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.listk.foldable.combineAll.A)))arrow.instances.listk.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.listk.foldable$exists(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.exists.A)), kotlin.Function1((arrow.instances.listk.foldable.exists.A, kotlin.Boolean)))arrow.instances.listk.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.listk.foldable$find(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.find.A)), kotlin.Function1((arrow.instances.listk.foldable.find.A, kotlin.Boolean)))arrow.instances.listk.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.listk.foldable$fold(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.listk.foldable.fold.A)))arrow.instances.listk.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.listk.foldable$foldLeft(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.foldLeft.A)), arrow.instances.listk.foldable.foldLeft.B, kotlin.Function2((arrow.instances.listk.foldable.foldLeft.B, arrow.instances.listk.foldable.foldLeft.A, )))arrow.instances.listk.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.listk.foldable$foldM(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.listk.foldable.foldM.G)), arrow.instances.listk.foldable.foldM.B, kotlin.Function2((arrow.instances.listk.foldable.foldM.B, arrow.instances.listk.foldable.foldM.A, arrow.Kind((arrow.instances.listk.foldable.foldM.G, )))))arrow.instances.listk.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.listk.foldable$foldMap(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.listk.foldable.foldMap.B)), kotlin.Function1((arrow.instances.listk.foldable.foldMap.A, arrow.instances.listk.foldable.foldMap.B)))arrow.instances.listk.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.listk.foldable$foldMapM(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.foldMapM.A)), arrow.instances.listk.foldable.foldMapM.MA, arrow.instances.listk.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.listk.foldable.foldMapM.A, arrow.Kind((arrow.instances.listk.foldable.foldMapM.G, arrow.instances.listk.foldable.foldMapM.B)))))arrow.instances.listk.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.listk.foldable$foldRight(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.listk.foldable.foldRight.B)), kotlin.Function2((arrow.instances.listk.foldable.foldRight.A, arrow.core.Eval((arrow.instances.listk.foldable.foldRight.B)), )))arrow.instances.listk.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.listk.foldable$foldable(arrow.data.ListK.Companion)arrow.instances.listk.foldable/arrow.data.-list-k/foldable.html
$dokka.location:arrow.instances.listk.foldable$forAll(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.forAll.A)), kotlin.Function1((arrow.instances.listk.foldable.forAll.A, kotlin.Boolean)))arrow.instances.listk.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.listk.foldable$get(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.listk.foldable.get.A)))), kotlin.Long)arrow.instances.listk.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.listk.foldable$isEmpty(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.isEmpty.A)))arrow.instances.listk.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.listk.foldable$nonEmpty(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.nonEmpty.A)))arrow.instances.listk.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.listk.foldable$reduceLeftOption(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.listk.foldable.reduceLeftOption.A, , )))arrow.instances.listk.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.listk.foldable$reduceLeftToOption(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.listk.foldable.reduceLeftToOption.A, arrow.instances.listk.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.listk.foldable.reduceLeftToOption.B, arrow.instances.listk.foldable.reduceLeftToOption.A, )))arrow.instances.listk.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.listk.foldable$reduceRightOption(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.listk.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.listk.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.listk.foldable$reduceRightToOption(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.listk.foldable.reduceRightToOption.A, arrow.instances.listk.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.listk.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.listk.foldable.reduceRightToOption.B)), )))arrow.instances.listk.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.listk.foldable$sequence_(arrow.Kind((arrow.data.ForListK, arrow.Kind((arrow.instances.listk.foldable.sequence_.G, arrow.instances.listk.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.listk.foldable.sequence_.G)))arrow.instances.listk.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.listk.foldable$size(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.listk.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.listk.foldable$traverse_(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.listk.foldable.traverse_.G)), kotlin.Function1((arrow.instances.listk.foldable.traverse_.A, arrow.Kind((arrow.instances.listk.foldable.traverse_.G, arrow.instances.listk.foldable.traverse_.B)))))arrow.instances.listk.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.listk.functor$as(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.as.A)), arrow.instances.listk.functor.as.B)arrow.instances.listk.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.listk.functor$fproduct(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.fproduct.A)), kotlin.Function1((arrow.instances.listk.functor.fproduct.A, arrow.instances.listk.functor.fproduct.B)))arrow.instances.listk.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.listk.functor$functor(arrow.data.ListK.Companion)arrow.instances.listk.functor/arrow.data.-list-k/functor.html
$dokka.location:arrow.instances.listk.functor$imap(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.imap.A)), kotlin.Function1((arrow.instances.listk.functor.imap.A, arrow.instances.listk.functor.imap.B)), kotlin.Function1((arrow.instances.listk.functor.imap.B, arrow.instances.listk.functor.imap.A)))arrow.instances.listk.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.listk.functor$map(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.map.A)), kotlin.Function1((arrow.instances.listk.functor.map.A, arrow.instances.listk.functor.map.B)))arrow.instances.listk.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.listk.functor$tupleLeft(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.tupleLeft.A)), arrow.instances.listk.functor.tupleLeft.B)arrow.instances.listk.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.listk.functor$tupleRight(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.tupleRight.A)), arrow.instances.listk.functor.tupleRight.B)arrow.instances.listk.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.listk.functor$void(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.void.A)))arrow.instances.listk.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.listk.functor$widen(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.functor.widen.A)))arrow.instances.listk.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.listk.hash$hash(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.listk.hash.hash.A)))arrow.instances.listk.hash/arrow.-kind/hash.html
$dokka.location:arrow.instances.listk.hash$hash(arrow.data.ListK.Companion, arrow.typeclasses.Hash((arrow.instances.listk.hash.hash.A)))arrow.instances.listk.hash/arrow.data.-list-k/hash.html
$dokka.location:arrow.instances.listk.monad$ap(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.ap.A)), arrow.Kind((arrow.data.ForListK, kotlin.Function1((arrow.instances.listk.monad.ap.A, arrow.instances.listk.monad.ap.B)))))arrow.instances.listk.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.listk.monad$effectM(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.effectM.A)), kotlin.Function1((arrow.instances.listk.monad.effectM.A, arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.effectM.B)))))arrow.instances.listk.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.listk.monad$flatMap(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.flatMap.A)), kotlin.Function1((arrow.instances.listk.monad.flatMap.A, arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.flatMap.B)))))arrow.instances.listk.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.listk.monad$flatten(arrow.Kind((arrow.data.ForListK, arrow.Kind((, arrow.instances.listk.monad.flatten.A)))))arrow.instances.listk.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.listk.monad$followedBy(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.followedBy.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.followedBy.B)))arrow.instances.listk.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.listk.monad$followedByEval(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.followedByEval.B)))))arrow.instances.listk.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.listk.monad$forEffect(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.forEffect.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.forEffect.B)))arrow.instances.listk.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.listk.monad$forEffectEval(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.forEffectEval.B)))))arrow.instances.listk.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.listk.monad$ifM(arrow.Kind((arrow.data.ForListK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.ifM.B)))))arrow.instances.listk.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.listk.monad$map(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.map.A)), kotlin.Function1((arrow.instances.listk.monad.map.A, arrow.instances.listk.monad.map.B)))arrow.instances.listk.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.listk.monad$monad(arrow.data.ListK.Companion)arrow.instances.listk.monad/arrow.data.-list-k/monad.html
$dokka.location:arrow.instances.listk.monad$mproduct(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.mproduct.A)), kotlin.Function1((arrow.instances.listk.monad.mproduct.A, arrow.Kind((arrow.data.ForListK, arrow.instances.listk.monad.mproduct.B)))))arrow.instances.listk.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.listk.monoid$combineAll(kotlin.collections.Collection((arrow.data.ListK((arrow.instances.listk.monoid.combineAll.A)))))arrow.instances.listk.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.listk.monoid$monoid(arrow.data.ListK.Companion)arrow.instances.listk.monoid/arrow.data.-list-k/monoid.html
$dokka.location:arrow.instances.listk.monoidK$monoidK(arrow.data.ListK.Companion)arrow.instances.listk.monoid-k/arrow.data.-list-k/monoid-k.html
$dokka.location:arrow.instances.listk.semigroup$maybeCombine(arrow.data.ListK((arrow.instances.listk.semigroup.maybeCombine.A)), arrow.data.ListK((arrow.instances.listk.semigroup.maybeCombine.A)))arrow.instances.listk.semigroup/arrow.data.-list-k/maybe-combine.html
$dokka.location:arrow.instances.listk.semigroup$plus(arrow.data.ListK((arrow.instances.listk.semigroup.plus.A)), arrow.data.ListK((arrow.instances.listk.semigroup.plus.A)))arrow.instances.listk.semigroup/arrow.data.-list-k/plus.html
$dokka.location:arrow.instances.listk.semigroup$semigroup(arrow.data.ListK.Companion)arrow.instances.listk.semigroup/arrow.data.-list-k/semigroup.html
$dokka.location:arrow.instances.listk.semigroupK$combineK(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.semigroupK.combineK.A)), arrow.Kind((arrow.data.ForListK, arrow.instances.listk.semigroupK.combineK.A)))arrow.instances.listk.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.listk.semigroupK$semigroupK(arrow.data.ListK.Companion)arrow.instances.listk.semigroup-k/arrow.data.-list-k/semigroup-k.html
$dokka.location:arrow.instances.listk.show$show(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.show.show.A)))arrow.instances.listk.show/arrow.-kind/show.html
$dokka.location:arrow.instances.listk.show$show(arrow.data.ListK.Companion)arrow.instances.listk.show/arrow.data.-list-k/show.html
$dokka.location:arrow.instances.listk.traverse$flatTraverse(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.data.ForListK)), arrow.typeclasses.Applicative((arrow.instances.listk.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.listk.traverse.flatTraverse.A, arrow.Kind((arrow.instances.listk.traverse.flatTraverse.G, arrow.Kind((arrow.data.ForListK, arrow.instances.listk.traverse.flatTraverse.B)))))))arrow.instances.listk.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.listk.traverse$map(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.traverse.map.A)), kotlin.Function1((arrow.instances.listk.traverse.map.A, arrow.instances.listk.traverse.map.B)))arrow.instances.listk.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.listk.traverse$sequence(arrow.Kind((arrow.data.ForListK, arrow.Kind((arrow.instances.listk.traverse.sequence.G, arrow.instances.listk.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.listk.traverse.sequence.G)))arrow.instances.listk.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.listk.traverse$traverse(arrow.Kind((arrow.data.ForListK, arrow.instances.listk.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.listk.traverse.traverse.G)), kotlin.Function1((arrow.instances.listk.traverse.traverse.A, arrow.Kind((arrow.instances.listk.traverse.traverse.G, arrow.instances.listk.traverse.traverse.B)))))arrow.instances.listk.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.listk.traverse$traverse(arrow.data.ListK.Companion)arrow.instances.listk.traverse/arrow.data.-list-k/traverse.html
$dokka.location:arrow.instances.mapk.eq$eq(arrow.data.MapK.Companion, arrow.typeclasses.Eq((arrow.instances.mapk.eq.eq.K)), arrow.typeclasses.Eq((arrow.instances.mapk.eq.eq.A)))arrow.instances.mapk.eq/arrow.data.-map-k/eq.html
$dokka.location:arrow.instances.mapk.eq$neqv(arrow.data.MapK((arrow.instances.mapk.eq.neqv.K, arrow.instances.mapk.eq.neqv.A)), arrow.data.MapK((arrow.instances.mapk.eq.neqv.K, arrow.instances.mapk.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.mapk.eq.neqv.K)), arrow.typeclasses.Eq((arrow.instances.mapk.eq.neqv.A)))arrow.instances.mapk.eq/arrow.data.-map-k/neqv.html
$dokka.location:arrow.instances.mapk.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.combineAll.K)), arrow.instances.mapk.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.mapk.foldable.combineAll.A)))arrow.instances.mapk.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.mapk.foldable$exists(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.exists.K)), arrow.instances.mapk.foldable.exists.A)), kotlin.Function1((arrow.instances.mapk.foldable.exists.A, kotlin.Boolean)))arrow.instances.mapk.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.mapk.foldable$find(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.find.K)), arrow.instances.mapk.foldable.find.A)), kotlin.Function1((arrow.instances.mapk.foldable.find.A, kotlin.Boolean)))arrow.instances.mapk.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.mapk.foldable$fold(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.fold.K)), arrow.instances.mapk.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.mapk.foldable.fold.A)))arrow.instances.mapk.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.mapk.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.foldLeft.K)), arrow.instances.mapk.foldable.foldLeft.A)), arrow.instances.mapk.foldable.foldLeft.B, kotlin.Function2((arrow.instances.mapk.foldable.foldLeft.B, arrow.instances.mapk.foldable.foldLeft.A, )))arrow.instances.mapk.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.mapk.foldable$foldM(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.foldM.K)), arrow.instances.mapk.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.mapk.foldable.foldM.G)), arrow.instances.mapk.foldable.foldM.B, kotlin.Function2((arrow.instances.mapk.foldable.foldM.B, arrow.instances.mapk.foldable.foldM.A, arrow.Kind((arrow.instances.mapk.foldable.foldM.G, )))))arrow.instances.mapk.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.mapk.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.foldMap.K)), arrow.instances.mapk.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.mapk.foldable.foldMap.B)), kotlin.Function1((arrow.instances.mapk.foldable.foldMap.A, arrow.instances.mapk.foldable.foldMap.B)))arrow.instances.mapk.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.mapk.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.foldMapM.K)), arrow.instances.mapk.foldable.foldMapM.A)), arrow.instances.mapk.foldable.foldMapM.MA, arrow.instances.mapk.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.mapk.foldable.foldMapM.A, arrow.Kind((arrow.instances.mapk.foldable.foldMapM.G, arrow.instances.mapk.foldable.foldMapM.B)))))arrow.instances.mapk.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.mapk.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.foldRight.K)), arrow.instances.mapk.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.mapk.foldable.foldRight.B)), kotlin.Function2((arrow.instances.mapk.foldable.foldRight.A, arrow.core.Eval((arrow.instances.mapk.foldable.foldRight.B)), )))arrow.instances.mapk.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.mapk.foldable$foldable(arrow.data.MapK.Companion)arrow.instances.mapk.foldable/arrow.data.-map-k/foldable.html
$dokka.location:arrow.instances.mapk.foldable$forAll(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.forAll.K)), arrow.instances.mapk.foldable.forAll.A)), kotlin.Function1((arrow.instances.mapk.foldable.forAll.A, kotlin.Boolean)))arrow.instances.mapk.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.mapk.foldable$get(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.get.K)), arrow.instances.mapk.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.mapk.foldable.get.A)))), kotlin.Long)arrow.instances.mapk.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.mapk.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.isEmpty.K)), arrow.instances.mapk.foldable.isEmpty.A)))arrow.instances.mapk.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.mapk.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.nonEmpty.K)), arrow.instances.mapk.foldable.nonEmpty.A)))arrow.instances.mapk.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.mapk.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.reduceLeftOption.K)), arrow.instances.mapk.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.mapk.foldable.reduceLeftOption.A, , )))arrow.instances.mapk.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.mapk.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.reduceLeftToOption.K)), arrow.instances.mapk.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.mapk.foldable.reduceLeftToOption.A, arrow.instances.mapk.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.mapk.foldable.reduceLeftToOption.B, arrow.instances.mapk.foldable.reduceLeftToOption.A, )))arrow.instances.mapk.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.mapk.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.reduceRightOption.K)), arrow.instances.mapk.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.mapk.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.mapk.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.mapk.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.reduceRightToOption.K)), arrow.instances.mapk.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.mapk.foldable.reduceRightToOption.A, arrow.instances.mapk.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.mapk.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.mapk.foldable.reduceRightToOption.B)), )))arrow.instances.mapk.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.mapk.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.sequence_.K)), arrow.Kind((arrow.instances.mapk.foldable.sequence_.G, arrow.instances.mapk.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.mapk.foldable.sequence_.G)))arrow.instances.mapk.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.mapk.foldable$size(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.size.K)), arrow.instances.mapk.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.mapk.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.mapk.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.foldable.traverse_.K)), arrow.instances.mapk.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.mapk.foldable.traverse_.G)), kotlin.Function1((arrow.instances.mapk.foldable.traverse_.A, arrow.Kind((arrow.instances.mapk.foldable.traverse_.G, arrow.instances.mapk.foldable.traverse_.B)))))arrow.instances.mapk.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.mapk.functor$as(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.as.K)), arrow.instances.mapk.functor.as.A)), arrow.instances.mapk.functor.as.B)arrow.instances.mapk.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.mapk.functor$fproduct(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.fproduct.K)), arrow.instances.mapk.functor.fproduct.A)), kotlin.Function1((arrow.instances.mapk.functor.fproduct.A, arrow.instances.mapk.functor.fproduct.B)))arrow.instances.mapk.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.mapk.functor$functor(arrow.data.MapK.Companion)arrow.instances.mapk.functor/arrow.data.-map-k/functor.html
$dokka.location:arrow.instances.mapk.functor$imap(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.imap.K)), arrow.instances.mapk.functor.imap.A)), kotlin.Function1((arrow.instances.mapk.functor.imap.A, arrow.instances.mapk.functor.imap.B)), kotlin.Function1((arrow.instances.mapk.functor.imap.B, arrow.instances.mapk.functor.imap.A)))arrow.instances.mapk.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.mapk.functor$map(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.map.K)), arrow.instances.mapk.functor.map.A)), kotlin.Function1((arrow.instances.mapk.functor.map.A, arrow.instances.mapk.functor.map.B)))arrow.instances.mapk.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.mapk.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.tupleLeft.K)), arrow.instances.mapk.functor.tupleLeft.A)), arrow.instances.mapk.functor.tupleLeft.B)arrow.instances.mapk.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.mapk.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.tupleRight.K)), arrow.instances.mapk.functor.tupleRight.A)), arrow.instances.mapk.functor.tupleRight.B)arrow.instances.mapk.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.mapk.functor$void(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.void.K)), arrow.instances.mapk.functor.void.A)))arrow.instances.mapk.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.mapk.functor$widen(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.functor.widen.K)), arrow.instances.mapk.functor.widen.A)))arrow.instances.mapk.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.mapk.hash$hash(arrow.data.MapK.Companion, arrow.typeclasses.Hash((arrow.instances.mapk.hash.hash.K)), arrow.typeclasses.Hash((arrow.instances.mapk.hash.hash.A)))arrow.instances.mapk.hash/arrow.data.-map-k/hash.html
$dokka.location:arrow.instances.mapk.monoid$combineAll(kotlin.collections.Collection((arrow.data.MapK((arrow.instances.mapk.monoid.combineAll.K, arrow.instances.mapk.monoid.combineAll.A)))), arrow.typeclasses.Semigroup((arrow.instances.mapk.monoid.combineAll.A)))arrow.instances.mapk.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.mapk.monoid$monoid(arrow.data.MapK.Companion, arrow.typeclasses.Semigroup((arrow.instances.mapk.monoid.monoid.A)))arrow.instances.mapk.monoid/arrow.data.-map-k/monoid.html
$dokka.location:arrow.instances.mapk.semigroup$maybeCombine(arrow.data.MapK((arrow.instances.mapk.semigroup.maybeCombine.K, arrow.instances.mapk.semigroup.maybeCombine.A)), arrow.data.MapK((arrow.instances.mapk.semigroup.maybeCombine.K, arrow.instances.mapk.semigroup.maybeCombine.A)), arrow.typeclasses.Semigroup((arrow.instances.mapk.semigroup.maybeCombine.A)))arrow.instances.mapk.semigroup/arrow.data.-map-k/maybe-combine.html
$dokka.location:arrow.instances.mapk.semigroup$plus(arrow.data.MapK((arrow.instances.mapk.semigroup.plus.K, arrow.instances.mapk.semigroup.plus.A)), arrow.data.MapK((arrow.instances.mapk.semigroup.plus.K, arrow.instances.mapk.semigroup.plus.A)), arrow.typeclasses.Semigroup((arrow.instances.mapk.semigroup.plus.A)))arrow.instances.mapk.semigroup/arrow.data.-map-k/plus.html
$dokka.location:arrow.instances.mapk.semigroup$semigroup(arrow.data.MapK.Companion, arrow.typeclasses.Semigroup((arrow.instances.mapk.semigroup.semigroup.A)))arrow.instances.mapk.semigroup/arrow.data.-map-k/semigroup.html
$dokka.location:arrow.instances.mapk.show$show(arrow.data.MapK.Companion)arrow.instances.mapk.show/arrow.data.-map-k/show.html
$dokka.location:arrow.instances.mapk.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.traverse.flatTraverse.K)), arrow.instances.mapk.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.traverse.flatTraverse.K)))), arrow.typeclasses.Applicative((arrow.instances.mapk.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.mapk.traverse.flatTraverse.A, arrow.Kind((arrow.instances.mapk.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.traverse.flatTraverse.K)), arrow.instances.mapk.traverse.flatTraverse.B)))))))arrow.instances.mapk.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.mapk.traverse$map(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.traverse.map.K)), arrow.instances.mapk.traverse.map.A)), kotlin.Function1((arrow.instances.mapk.traverse.map.A, arrow.instances.mapk.traverse.map.B)))arrow.instances.mapk.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.mapk.traverse$sequence(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.traverse.sequence.K)), arrow.Kind((arrow.instances.mapk.traverse.sequence.G, arrow.instances.mapk.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.mapk.traverse.sequence.G)))arrow.instances.mapk.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.mapk.traverse$traverse(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.instances.mapk.traverse.traverse.K)), arrow.instances.mapk.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.mapk.traverse.traverse.G)), kotlin.Function1((arrow.instances.mapk.traverse.traverse.A, arrow.Kind((arrow.instances.mapk.traverse.traverse.G, arrow.instances.mapk.traverse.traverse.B)))))arrow.instances.mapk.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.mapk.traverse$traverse(arrow.data.MapK.Companion)arrow.instances.mapk.traverse/arrow.data.-map-k/traverse.html
$dokka.location:arrow.instances.moore.comonad$coflatMap(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.comonad.coflatMap.V)), arrow.instances.moore.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.comonad.coflatMap.V)), arrow.instances.moore.comonad.coflatMap.A)), arrow.instances.moore.comonad.coflatMap.B)))arrow.instances.moore.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.moore.comonad$comonad(arrow.data.Moore.Companion)arrow.instances.moore.comonad/arrow.data.-moore/comonad.html
$dokka.location:arrow.instances.moore.comonad$duplicate(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.comonad.duplicate.V)), arrow.instances.moore.comonad.duplicate.A)))arrow.instances.moore.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.moore.comonad$extract(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.comonad.extract.V)), arrow.instances.moore.comonad.extract.A)))arrow.instances.moore.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.moore.functor$as(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.as.V)), arrow.instances.moore.functor.as.A)), arrow.instances.moore.functor.as.B)arrow.instances.moore.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.moore.functor$fproduct(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.fproduct.V)), arrow.instances.moore.functor.fproduct.A)), kotlin.Function1((arrow.instances.moore.functor.fproduct.A, arrow.instances.moore.functor.fproduct.B)))arrow.instances.moore.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.moore.functor$functor(arrow.data.Moore.Companion)arrow.instances.moore.functor/arrow.data.-moore/functor.html
$dokka.location:arrow.instances.moore.functor$imap(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.imap.V)), arrow.instances.moore.functor.imap.A)), kotlin.Function1((arrow.instances.moore.functor.imap.A, arrow.instances.moore.functor.imap.B)), kotlin.Function1((arrow.instances.moore.functor.imap.B, arrow.instances.moore.functor.imap.A)))arrow.instances.moore.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.moore.functor$map(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.map.V)), arrow.instances.moore.functor.map.A)), kotlin.Function1((arrow.instances.moore.functor.map.A, arrow.instances.moore.functor.map.B)))arrow.instances.moore.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.moore.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.tupleLeft.V)), arrow.instances.moore.functor.tupleLeft.A)), arrow.instances.moore.functor.tupleLeft.B)arrow.instances.moore.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.moore.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.tupleRight.V)), arrow.instances.moore.functor.tupleRight.A)), arrow.instances.moore.functor.tupleRight.B)arrow.instances.moore.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.moore.functor$void(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.void.V)), arrow.instances.moore.functor.void.A)))arrow.instances.moore.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.moore.functor$widen(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.instances.moore.functor.widen.V)), arrow.instances.moore.functor.widen.A)))arrow.instances.moore.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.nonemptylist.applicative$ap(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.ap.A)), arrow.Kind((arrow.data.ForNonEmptyList, kotlin.Function1((arrow.instances.nonemptylist.applicative.ap.A, arrow.instances.nonemptylist.applicative.ap.B)))))arrow.instances.nonemptylist.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.nonemptylist.applicative$applicative(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.applicative/arrow.data.-non-empty-list/applicative.html
$dokka.location:arrow.instances.nonemptylist.applicative$map(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.map.A)), kotlin.Function1((arrow.instances.nonemptylist.applicative.map.A, arrow.instances.nonemptylist.applicative.map.B)))arrow.instances.nonemptylist.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.nonemptylist.applicative$map2(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.map2.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.nonemptylist.applicative.map2.A, arrow.instances.nonemptylist.applicative.map2.B)), arrow.instances.nonemptylist.applicative.map2.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.nonemptylist.applicative$map2Eval(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.nonemptylist.applicative.map2Eval.A, arrow.instances.nonemptylist.applicative.map2Eval.B)), arrow.instances.nonemptylist.applicative.map2Eval.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.nonemptylist.applicative$plus(arrow.Kind((arrow.data.ForNonEmptyList, java.math.BigDecimal)), arrow.Kind((arrow.data.ForNonEmptyList, java.math.BigDecimal)))arrow.instances.nonemptylist.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple2((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple3((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple4((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C, arrow.instances.nonemptylist.applicative.product.D)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple5((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C, arrow.instances.nonemptylist.applicative.product.D, arrow.instances.nonemptylist.applicative.product.E)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple6((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C, arrow.instances.nonemptylist.applicative.product.D, arrow.instances.nonemptylist.applicative.product.E, arrow.instances.nonemptylist.applicative.product.FF)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple7((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C, arrow.instances.nonemptylist.applicative.product.D, arrow.instances.nonemptylist.applicative.product.E, arrow.instances.nonemptylist.applicative.product.FF, arrow.instances.nonemptylist.applicative.product.G)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple8((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C, arrow.instances.nonemptylist.applicative.product.D, arrow.instances.nonemptylist.applicative.product.E, arrow.instances.nonemptylist.applicative.product.FF, arrow.instances.nonemptylist.applicative.product.G, arrow.instances.nonemptylist.applicative.product.H)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple9((arrow.instances.nonemptylist.applicative.product.A, arrow.instances.nonemptylist.applicative.product.B, arrow.instances.nonemptylist.applicative.product.C, arrow.instances.nonemptylist.applicative.product.D, arrow.instances.nonemptylist.applicative.product.E, arrow.instances.nonemptylist.applicative.product.FF, arrow.instances.nonemptylist.applicative.product.G, arrow.instances.nonemptylist.applicative.product.H, arrow.instances.nonemptylist.applicative.product.I)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.Z)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.applicative$product(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.applicative.product.B)))arrow.instances.nonemptylist.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.nonemptylist.bimonad$bimonad(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.bimonad/arrow.data.-non-empty-list/bimonad.html
$dokka.location:arrow.instances.nonemptylist.comonad$coflatMap(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.comonad.coflatMap.A)), arrow.instances.nonemptylist.comonad.coflatMap.B)))arrow.instances.nonemptylist.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.nonemptylist.comonad$comonad(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.comonad/arrow.data.-non-empty-list/comonad.html
$dokka.location:arrow.instances.nonemptylist.comonad$duplicate(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.comonad.duplicate.A)))arrow.instances.nonemptylist.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.nonemptylist.comonad$extract(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.comonad.extract.A)))arrow.instances.nonemptylist.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.nonemptylist.eq$eq(arrow.data.NonEmptyList.Companion, arrow.typeclasses.Eq((arrow.instances.nonemptylist.eq.eq.A)))arrow.instances.nonemptylist.eq/arrow.data.-non-empty-list/eq.html
$dokka.location:arrow.instances.nonemptylist.eq$neqv(arrow.data.NonEmptyList((arrow.instances.nonemptylist.eq.neqv.A)), arrow.data.NonEmptyList((arrow.instances.nonemptylist.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.nonemptylist.eq.neqv.A)))arrow.instances.nonemptylist.eq/arrow.data.-non-empty-list/neqv.html
$dokka.location:arrow.instances.nonemptylist.foldable$combineAll(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.nonemptylist.foldable.combineAll.A)))arrow.instances.nonemptylist.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.nonemptylist.foldable$exists(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.exists.A)), kotlin.Function1((arrow.instances.nonemptylist.foldable.exists.A, kotlin.Boolean)))arrow.instances.nonemptylist.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.nonemptylist.foldable$find(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.find.A)), kotlin.Function1((arrow.instances.nonemptylist.foldable.find.A, kotlin.Boolean)))arrow.instances.nonemptylist.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.nonemptylist.foldable$fold(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.nonemptylist.foldable.fold.A)))arrow.instances.nonemptylist.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.nonemptylist.foldable$foldLeft(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.foldLeft.A)), arrow.instances.nonemptylist.foldable.foldLeft.B, kotlin.Function2((arrow.instances.nonemptylist.foldable.foldLeft.B, arrow.instances.nonemptylist.foldable.foldLeft.A, )))arrow.instances.nonemptylist.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.nonemptylist.foldable$foldM(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.nonemptylist.foldable.foldM.G)), arrow.instances.nonemptylist.foldable.foldM.B, kotlin.Function2((arrow.instances.nonemptylist.foldable.foldM.B, arrow.instances.nonemptylist.foldable.foldM.A, arrow.Kind((arrow.instances.nonemptylist.foldable.foldM.G, )))))arrow.instances.nonemptylist.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.nonemptylist.foldable$foldMap(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.nonemptylist.foldable.foldMap.B)), kotlin.Function1((arrow.instances.nonemptylist.foldable.foldMap.A, arrow.instances.nonemptylist.foldable.foldMap.B)))arrow.instances.nonemptylist.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.nonemptylist.foldable$foldMapM(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.foldMapM.A)), arrow.instances.nonemptylist.foldable.foldMapM.MA, arrow.instances.nonemptylist.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.nonemptylist.foldable.foldMapM.A, arrow.Kind((arrow.instances.nonemptylist.foldable.foldMapM.G, arrow.instances.nonemptylist.foldable.foldMapM.B)))))arrow.instances.nonemptylist.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.nonemptylist.foldable$foldRight(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.nonemptylist.foldable.foldRight.B)), kotlin.Function2((arrow.instances.nonemptylist.foldable.foldRight.A, arrow.core.Eval((arrow.instances.nonemptylist.foldable.foldRight.B)), )))arrow.instances.nonemptylist.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.nonemptylist.foldable$foldable(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.foldable/arrow.data.-non-empty-list/foldable.html
$dokka.location:arrow.instances.nonemptylist.foldable$forAll(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.forAll.A)), kotlin.Function1((arrow.instances.nonemptylist.foldable.forAll.A, kotlin.Boolean)))arrow.instances.nonemptylist.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.nonemptylist.foldable$get(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.nonemptylist.foldable.get.A)))), kotlin.Long)arrow.instances.nonemptylist.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.nonemptylist.foldable$isEmpty(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.isEmpty.A)))arrow.instances.nonemptylist.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.nonemptylist.foldable$nonEmpty(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.nonEmpty.A)))arrow.instances.nonemptylist.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.nonemptylist.foldable$reduceLeftOption(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.nonemptylist.foldable.reduceLeftOption.A, , )))arrow.instances.nonemptylist.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.nonemptylist.foldable$reduceLeftToOption(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.nonemptylist.foldable.reduceLeftToOption.A, arrow.instances.nonemptylist.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.nonemptylist.foldable.reduceLeftToOption.B, arrow.instances.nonemptylist.foldable.reduceLeftToOption.A, )))arrow.instances.nonemptylist.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.nonemptylist.foldable$reduceRightOption(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.nonemptylist.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.nonemptylist.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.nonemptylist.foldable$reduceRightToOption(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.nonemptylist.foldable.reduceRightToOption.A, arrow.instances.nonemptylist.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.nonemptylist.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.nonemptylist.foldable.reduceRightToOption.B)), )))arrow.instances.nonemptylist.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.nonemptylist.foldable$sequence_(arrow.Kind((arrow.data.ForNonEmptyList, arrow.Kind((arrow.instances.nonemptylist.foldable.sequence_.G, arrow.instances.nonemptylist.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.nonemptylist.foldable.sequence_.G)))arrow.instances.nonemptylist.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.nonemptylist.foldable$size(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.nonemptylist.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.nonemptylist.foldable$traverse_(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.nonemptylist.foldable.traverse_.G)), kotlin.Function1((arrow.instances.nonemptylist.foldable.traverse_.A, arrow.Kind((arrow.instances.nonemptylist.foldable.traverse_.G, arrow.instances.nonemptylist.foldable.traverse_.B)))))arrow.instances.nonemptylist.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.nonemptylist.functor$as(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.as.A)), arrow.instances.nonemptylist.functor.as.B)arrow.instances.nonemptylist.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.nonemptylist.functor$fproduct(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.fproduct.A)), kotlin.Function1((arrow.instances.nonemptylist.functor.fproduct.A, arrow.instances.nonemptylist.functor.fproduct.B)))arrow.instances.nonemptylist.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.nonemptylist.functor$functor(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.functor/arrow.data.-non-empty-list/functor.html
$dokka.location:arrow.instances.nonemptylist.functor$imap(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.imap.A)), kotlin.Function1((arrow.instances.nonemptylist.functor.imap.A, arrow.instances.nonemptylist.functor.imap.B)), kotlin.Function1((arrow.instances.nonemptylist.functor.imap.B, arrow.instances.nonemptylist.functor.imap.A)))arrow.instances.nonemptylist.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.nonemptylist.functor$map(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.map.A)), kotlin.Function1((arrow.instances.nonemptylist.functor.map.A, arrow.instances.nonemptylist.functor.map.B)))arrow.instances.nonemptylist.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.nonemptylist.functor$tupleLeft(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.tupleLeft.A)), arrow.instances.nonemptylist.functor.tupleLeft.B)arrow.instances.nonemptylist.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.nonemptylist.functor$tupleRight(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.tupleRight.A)), arrow.instances.nonemptylist.functor.tupleRight.B)arrow.instances.nonemptylist.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.nonemptylist.functor$void(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.void.A)))arrow.instances.nonemptylist.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.nonemptylist.functor$widen(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.functor.widen.A)))arrow.instances.nonemptylist.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.nonemptylist.hash$hash(arrow.data.NonEmptyList.Companion, arrow.typeclasses.Hash((arrow.instances.nonemptylist.hash.hash.A)))arrow.instances.nonemptylist.hash/arrow.data.-non-empty-list/hash.html
$dokka.location:arrow.instances.nonemptylist.monad$ap(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.ap.A)), arrow.Kind((arrow.data.ForNonEmptyList, kotlin.Function1((arrow.instances.nonemptylist.monad.ap.A, arrow.instances.nonemptylist.monad.ap.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.nonemptylist.monad$effectM(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.effectM.A)), kotlin.Function1((arrow.instances.nonemptylist.monad.effectM.A, arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.effectM.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.nonemptylist.monad$flatMap(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.flatMap.A)), kotlin.Function1((arrow.instances.nonemptylist.monad.flatMap.A, arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.flatMap.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.nonemptylist.monad$flatten(arrow.Kind((arrow.data.ForNonEmptyList, arrow.Kind((, arrow.instances.nonemptylist.monad.flatten.A)))))arrow.instances.nonemptylist.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.nonemptylist.monad$followedBy(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.followedBy.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.followedBy.B)))arrow.instances.nonemptylist.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.nonemptylist.monad$followedByEval(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.followedByEval.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.nonemptylist.monad$forEffect(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.forEffect.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.forEffect.B)))arrow.instances.nonemptylist.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.nonemptylist.monad$forEffectEval(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.forEffectEval.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.nonemptylist.monad$ifM(arrow.Kind((arrow.data.ForNonEmptyList, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.ifM.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.nonemptylist.monad$map(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.map.A)), kotlin.Function1((arrow.instances.nonemptylist.monad.map.A, arrow.instances.nonemptylist.monad.map.B)))arrow.instances.nonemptylist.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.nonemptylist.monad$monad(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.monad/arrow.data.-non-empty-list/monad.html
$dokka.location:arrow.instances.nonemptylist.monad$mproduct(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.mproduct.A)), kotlin.Function1((arrow.instances.nonemptylist.monad.mproduct.A, arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.monad.mproduct.B)))))arrow.instances.nonemptylist.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.nonemptylist.semigroup$maybeCombine(arrow.data.NonEmptyList((arrow.instances.nonemptylist.semigroup.maybeCombine.A)), arrow.data.NonEmptyList((arrow.instances.nonemptylist.semigroup.maybeCombine.A)))arrow.instances.nonemptylist.semigroup/arrow.data.-non-empty-list/maybe-combine.html
$dokka.location:arrow.instances.nonemptylist.semigroup$plus(arrow.data.NonEmptyList((arrow.instances.nonemptylist.semigroup.plus.A)), arrow.data.NonEmptyList((arrow.instances.nonemptylist.semigroup.plus.A)))arrow.instances.nonemptylist.semigroup/arrow.data.-non-empty-list/plus.html
$dokka.location:arrow.instances.nonemptylist.semigroup$semigroup(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.semigroup/arrow.data.-non-empty-list/semigroup.html
$dokka.location:arrow.instances.nonemptylist.semigroupK$combineK(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.semigroupK.combineK.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.semigroupK.combineK.A)))arrow.instances.nonemptylist.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.nonemptylist.semigroupK$semigroupK(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.semigroup-k/arrow.data.-non-empty-list/semigroup-k.html
$dokka.location:arrow.instances.nonemptylist.show$show(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.show/arrow.data.-non-empty-list/show.html
$dokka.location:arrow.instances.nonemptylist.traverse$flatTraverse(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.data.ForNonEmptyList)), arrow.typeclasses.Applicative((arrow.instances.nonemptylist.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.nonemptylist.traverse.flatTraverse.A, arrow.Kind((arrow.instances.nonemptylist.traverse.flatTraverse.G, arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.traverse.flatTraverse.B)))))))arrow.instances.nonemptylist.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.nonemptylist.traverse$map(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.traverse.map.A)), kotlin.Function1((arrow.instances.nonemptylist.traverse.map.A, arrow.instances.nonemptylist.traverse.map.B)))arrow.instances.nonemptylist.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.nonemptylist.traverse$sequence(arrow.Kind((arrow.data.ForNonEmptyList, arrow.Kind((arrow.instances.nonemptylist.traverse.sequence.G, arrow.instances.nonemptylist.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.nonemptylist.traverse.sequence.G)))arrow.instances.nonemptylist.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.nonemptylist.traverse$traverse(arrow.Kind((arrow.data.ForNonEmptyList, arrow.instances.nonemptylist.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.nonemptylist.traverse.traverse.G)), kotlin.Function1((arrow.instances.nonemptylist.traverse.traverse.A, arrow.Kind((arrow.instances.nonemptylist.traverse.traverse.G, arrow.instances.nonemptylist.traverse.traverse.B)))))arrow.instances.nonemptylist.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.nonemptylist.traverse$traverse(arrow.data.NonEmptyList.Companion)arrow.instances.nonemptylist.traverse/arrow.data.-non-empty-list/traverse.html
$dokka.location:arrow.instances.optiont.applicative$ap(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.ap.F)), arrow.instances.optiont.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.ap.F)), kotlin.Function1((arrow.instances.optiont.applicative.ap.A, arrow.instances.optiont.applicative.ap.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.ap.F)))arrow.instances.optiont.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.optiont.applicative$applicative(arrow.data.OptionT.Companion, arrow.typeclasses.Monad((arrow.instances.optiont.applicative.applicative.F)))arrow.instances.optiont.applicative/arrow.data.-option-t/applicative.html
$dokka.location:arrow.instances.optiont.applicative$map(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.map.F)), arrow.instances.optiont.applicative.map.A)), kotlin.Function1((arrow.instances.optiont.applicative.map.A, arrow.instances.optiont.applicative.map.B)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.map.F)))arrow.instances.optiont.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.optiont.applicative$map2(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.map2.F)), arrow.instances.optiont.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.map2.F)), arrow.instances.optiont.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.optiont.applicative.map2.A, arrow.instances.optiont.applicative.map2.B)), arrow.instances.optiont.applicative.map2.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.map2.F)))arrow.instances.optiont.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.optiont.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.map2Eval.F)), arrow.instances.optiont.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.map2Eval.F)), arrow.instances.optiont.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.optiont.applicative.map2Eval.A, arrow.instances.optiont.applicative.map2Eval.B)), arrow.instances.optiont.applicative.map2Eval.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.map2Eval.F)))arrow.instances.optiont.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.optiont.applicative$plus(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.plus.F)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.plus.F)), java.math.BigDecimal)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.plus.F)))arrow.instances.optiont.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple2((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple3((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple4((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C, arrow.instances.optiont.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple5((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C, arrow.instances.optiont.applicative.product.D, arrow.instances.optiont.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple6((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C, arrow.instances.optiont.applicative.product.D, arrow.instances.optiont.applicative.product.E, arrow.instances.optiont.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple7((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C, arrow.instances.optiont.applicative.product.D, arrow.instances.optiont.applicative.product.E, arrow.instances.optiont.applicative.product.FF, arrow.instances.optiont.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple8((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C, arrow.instances.optiont.applicative.product.D, arrow.instances.optiont.applicative.product.E, arrow.instances.optiont.applicative.product.FF, arrow.instances.optiont.applicative.product.G, arrow.instances.optiont.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.core.Tuple9((arrow.instances.optiont.applicative.product.A, arrow.instances.optiont.applicative.product.B, arrow.instances.optiont.applicative.product.C, arrow.instances.optiont.applicative.product.D, arrow.instances.optiont.applicative.product.E, arrow.instances.optiont.applicative.product.FF, arrow.instances.optiont.applicative.product.G, arrow.instances.optiont.applicative.product.H, arrow.instances.optiont.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.applicative.product.F)), arrow.instances.optiont.applicative.product.B)), arrow.typeclasses.Monad((arrow.instances.optiont.applicative.product.F)))arrow.instances.optiont.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.optiont.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.combineAll.F)), arrow.instances.optiont.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.optiont.foldable.combineAll.A)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.combineAll.F)))arrow.instances.optiont.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.optiont.foldable$exists(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.exists.F)), arrow.instances.optiont.foldable.exists.A)), kotlin.Function1((arrow.instances.optiont.foldable.exists.A, kotlin.Boolean)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.exists.F)))arrow.instances.optiont.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.optiont.foldable$find(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.find.F)), arrow.instances.optiont.foldable.find.A)), kotlin.Function1((arrow.instances.optiont.foldable.find.A, kotlin.Boolean)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.find.F)))arrow.instances.optiont.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.optiont.foldable$fold(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.fold.F)), arrow.instances.optiont.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.optiont.foldable.fold.A)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.fold.F)))arrow.instances.optiont.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.optiont.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.foldLeft.F)), arrow.instances.optiont.foldable.foldLeft.A)), arrow.instances.optiont.foldable.foldLeft.B, kotlin.Function2((arrow.instances.optiont.foldable.foldLeft.B, arrow.instances.optiont.foldable.foldLeft.A, )), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.foldLeft.F)))arrow.instances.optiont.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.optiont.foldable$foldM(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.foldM.F)), arrow.instances.optiont.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.optiont.foldable.foldM.G)), arrow.instances.optiont.foldable.foldM.B, kotlin.Function2((arrow.instances.optiont.foldable.foldM.B, arrow.instances.optiont.foldable.foldM.A, arrow.Kind((arrow.instances.optiont.foldable.foldM.G, )))), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.foldM.F)))arrow.instances.optiont.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.optiont.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.foldMap.F)), arrow.instances.optiont.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.optiont.foldable.foldMap.B)), kotlin.Function1((arrow.instances.optiont.foldable.foldMap.A, arrow.instances.optiont.foldable.foldMap.B)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.foldMap.F)))arrow.instances.optiont.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.optiont.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.foldMapM.F)), arrow.instances.optiont.foldable.foldMapM.A)), arrow.instances.optiont.foldable.foldMapM.MA, arrow.instances.optiont.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.optiont.foldable.foldMapM.A, arrow.Kind((arrow.instances.optiont.foldable.foldMapM.G, arrow.instances.optiont.foldable.foldMapM.B)))), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.foldMapM.F)))arrow.instances.optiont.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.optiont.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.foldRight.F)), arrow.instances.optiont.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.optiont.foldable.foldRight.B)), kotlin.Function2((arrow.instances.optiont.foldable.foldRight.A, arrow.core.Eval((arrow.instances.optiont.foldable.foldRight.B)), )), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.foldRight.F)))arrow.instances.optiont.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.optiont.foldable$foldable(arrow.data.OptionT.Companion, arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.foldable.F)))arrow.instances.optiont.foldable/arrow.data.-option-t/foldable.html
$dokka.location:arrow.instances.optiont.foldable$forAll(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.forAll.F)), arrow.instances.optiont.foldable.forAll.A)), kotlin.Function1((arrow.instances.optiont.foldable.forAll.A, kotlin.Boolean)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.forAll.F)))arrow.instances.optiont.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.optiont.foldable$get(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.get.F)), arrow.instances.optiont.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.optiont.foldable.get.A)))), kotlin.Long, arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.get.F)))arrow.instances.optiont.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.optiont.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.isEmpty.F)), arrow.instances.optiont.foldable.isEmpty.A)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.isEmpty.F)))arrow.instances.optiont.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.optiont.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.nonEmpty.F)), arrow.instances.optiont.foldable.nonEmpty.A)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.nonEmpty.F)))arrow.instances.optiont.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.optiont.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.reduceLeftOption.F)), arrow.instances.optiont.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.optiont.foldable.reduceLeftOption.A, , )), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.reduceLeftOption.F)))arrow.instances.optiont.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.optiont.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.reduceLeftToOption.F)), arrow.instances.optiont.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.optiont.foldable.reduceLeftToOption.A, arrow.instances.optiont.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.optiont.foldable.reduceLeftToOption.B, arrow.instances.optiont.foldable.reduceLeftToOption.A, )), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.reduceLeftToOption.F)))arrow.instances.optiont.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.optiont.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.reduceRightOption.F)), arrow.instances.optiont.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.optiont.foldable.reduceRightOption.A, arrow.core.Eval(()), )), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.reduceRightOption.F)))arrow.instances.optiont.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.optiont.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.reduceRightToOption.F)), arrow.instances.optiont.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.optiont.foldable.reduceRightToOption.A, arrow.instances.optiont.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.optiont.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.optiont.foldable.reduceRightToOption.B)), )), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.reduceRightToOption.F)))arrow.instances.optiont.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.optiont.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.sequence_.F)), arrow.Kind((arrow.instances.optiont.foldable.sequence_.G, arrow.instances.optiont.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.optiont.foldable.sequence_.G)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.sequence_.F)))arrow.instances.optiont.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.optiont.foldable$size(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.size.F)), arrow.instances.optiont.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.size.F)))arrow.instances.optiont.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.optiont.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.foldable.traverse_.F)), arrow.instances.optiont.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.optiont.foldable.traverse_.G)), kotlin.Function1((arrow.instances.optiont.foldable.traverse_.A, arrow.Kind((arrow.instances.optiont.foldable.traverse_.G, arrow.instances.optiont.foldable.traverse_.B)))), arrow.typeclasses.Foldable((arrow.instances.optiont.foldable.traverse_.F)))arrow.instances.optiont.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.optiont.functor$as(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.as.F)), arrow.instances.optiont.functor.as.A)), arrow.instances.optiont.functor.as.B, arrow.typeclasses.Functor((arrow.instances.optiont.functor.as.F)))arrow.instances.optiont.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.optiont.functor$fproduct(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.fproduct.F)), arrow.instances.optiont.functor.fproduct.A)), kotlin.Function1((arrow.instances.optiont.functor.fproduct.A, arrow.instances.optiont.functor.fproduct.B)), arrow.typeclasses.Functor((arrow.instances.optiont.functor.fproduct.F)))arrow.instances.optiont.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.optiont.functor$functor(arrow.data.OptionT.Companion, arrow.typeclasses.Functor((arrow.instances.optiont.functor.functor.F)))arrow.instances.optiont.functor/arrow.data.-option-t/functor.html
$dokka.location:arrow.instances.optiont.functor$imap(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.imap.F)), arrow.instances.optiont.functor.imap.A)), kotlin.Function1((arrow.instances.optiont.functor.imap.A, arrow.instances.optiont.functor.imap.B)), kotlin.Function1((arrow.instances.optiont.functor.imap.B, arrow.instances.optiont.functor.imap.A)), arrow.typeclasses.Functor((arrow.instances.optiont.functor.imap.F)))arrow.instances.optiont.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.optiont.functor$map(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.map.F)), arrow.instances.optiont.functor.map.A)), kotlin.Function1((arrow.instances.optiont.functor.map.A, arrow.instances.optiont.functor.map.B)), arrow.typeclasses.Functor((arrow.instances.optiont.functor.map.F)))arrow.instances.optiont.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.optiont.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.tupleLeft.F)), arrow.instances.optiont.functor.tupleLeft.A)), arrow.instances.optiont.functor.tupleLeft.B, arrow.typeclasses.Functor((arrow.instances.optiont.functor.tupleLeft.F)))arrow.instances.optiont.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.optiont.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.tupleRight.F)), arrow.instances.optiont.functor.tupleRight.A)), arrow.instances.optiont.functor.tupleRight.B, arrow.typeclasses.Functor((arrow.instances.optiont.functor.tupleRight.F)))arrow.instances.optiont.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.optiont.functor$void(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.void.F)), arrow.instances.optiont.functor.void.A)), arrow.typeclasses.Functor((arrow.instances.optiont.functor.void.F)))arrow.instances.optiont.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.optiont.functor$widen(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.functor.widen.F)), arrow.instances.optiont.functor.widen.A)), arrow.typeclasses.Functor((arrow.instances.optiont.functor.widen.F)))arrow.instances.optiont.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.optiont.monad$ap(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.ap.F)), arrow.instances.optiont.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.ap.F)), kotlin.Function1((arrow.instances.optiont.monad.ap.A, arrow.instances.optiont.monad.ap.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.ap.F)))arrow.instances.optiont.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.optiont.monad$effectM(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.effectM.F)), arrow.instances.optiont.monad.effectM.A)), kotlin.Function1((arrow.instances.optiont.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.effectM.F)), arrow.instances.optiont.monad.effectM.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.effectM.F)))arrow.instances.optiont.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.optiont.monad$flatMap(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.flatMap.F)), arrow.instances.optiont.monad.flatMap.A)), kotlin.Function1((arrow.instances.optiont.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.flatMap.F)), arrow.instances.optiont.monad.flatMap.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.flatMap.F)))arrow.instances.optiont.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.optiont.monad$flatten(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.flatten.F)), arrow.Kind((, arrow.instances.optiont.monad.flatten.A)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.flatten.F)))arrow.instances.optiont.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.optiont.monad$followedBy(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.followedBy.F)), arrow.instances.optiont.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.followedBy.F)), arrow.instances.optiont.monad.followedBy.B)), arrow.typeclasses.Monad((arrow.instances.optiont.monad.followedBy.F)))arrow.instances.optiont.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.optiont.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.followedByEval.F)), arrow.instances.optiont.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.followedByEval.F)), arrow.instances.optiont.monad.followedByEval.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.followedByEval.F)))arrow.instances.optiont.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.optiont.monad$forEffect(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.forEffect.F)), arrow.instances.optiont.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.forEffect.F)), arrow.instances.optiont.monad.forEffect.B)), arrow.typeclasses.Monad((arrow.instances.optiont.monad.forEffect.F)))arrow.instances.optiont.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.optiont.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.forEffectEval.F)), arrow.instances.optiont.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.forEffectEval.F)), arrow.instances.optiont.monad.forEffectEval.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.forEffectEval.F)))arrow.instances.optiont.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.optiont.monad$ifM(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.ifM.F)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.ifM.F)), arrow.instances.optiont.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.ifM.F)), arrow.instances.optiont.monad.ifM.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.ifM.F)))arrow.instances.optiont.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.optiont.monad$map(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.map.F)), arrow.instances.optiont.monad.map.A)), kotlin.Function1((arrow.instances.optiont.monad.map.A, arrow.instances.optiont.monad.map.B)), arrow.typeclasses.Monad((arrow.instances.optiont.monad.map.F)))arrow.instances.optiont.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.optiont.monad$monad(arrow.data.OptionT.Companion, arrow.typeclasses.Monad((arrow.instances.optiont.monad.monad.F)))arrow.instances.optiont.monad/arrow.data.-option-t/monad.html
$dokka.location:arrow.instances.optiont.monad$mproduct(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.mproduct.F)), arrow.instances.optiont.monad.mproduct.A)), kotlin.Function1((arrow.instances.optiont.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.monad.mproduct.F)), arrow.instances.optiont.monad.mproduct.B)))), arrow.typeclasses.Monad((arrow.instances.optiont.monad.mproduct.F)))arrow.instances.optiont.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.optiont.monoidK$monoidK(arrow.data.OptionT.Companion, arrow.typeclasses.Monad((arrow.instances.optiont.monoidK.monoidK.F)))arrow.instances.optiont.monoid-k/arrow.data.-option-t/monoid-k.html
$dokka.location:arrow.instances.optiont.semigroupK$combineK(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.semigroupK.combineK.F)), arrow.instances.optiont.semigroupK.combineK.A)), arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.semigroupK.combineK.F)), arrow.instances.optiont.semigroupK.combineK.A)), arrow.typeclasses.Monad((arrow.instances.optiont.semigroupK.combineK.F)))arrow.instances.optiont.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.optiont.semigroupK$semigroupK(arrow.data.OptionT.Companion, arrow.typeclasses.Monad((arrow.instances.optiont.semigroupK.semigroupK.F)))arrow.instances.optiont.semigroup-k/arrow.data.-option-t/semigroup-k.html
$dokka.location:arrow.instances.optiont.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.traverse.flatTraverse.F)), arrow.instances.optiont.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.traverse.flatTraverse.F)))), arrow.typeclasses.Applicative((arrow.instances.optiont.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.optiont.traverse.flatTraverse.A, arrow.Kind((arrow.instances.optiont.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.traverse.flatTraverse.F)), arrow.instances.optiont.traverse.flatTraverse.B)))))), arrow.typeclasses.Traverse((arrow.instances.optiont.traverse.flatTraverse.F)))arrow.instances.optiont.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.optiont.traverse$map(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.traverse.map.F)), arrow.instances.optiont.traverse.map.A)), kotlin.Function1((arrow.instances.optiont.traverse.map.A, arrow.instances.optiont.traverse.map.B)), arrow.typeclasses.Traverse((arrow.instances.optiont.traverse.map.F)))arrow.instances.optiont.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.optiont.traverse$sequence(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.traverse.sequence.F)), arrow.Kind((arrow.instances.optiont.traverse.sequence.G, arrow.instances.optiont.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.optiont.traverse.sequence.G)), arrow.typeclasses.Traverse((arrow.instances.optiont.traverse.sequence.F)))arrow.instances.optiont.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.optiont.traverse$traverse(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.instances.optiont.traverse.traverse.F)), arrow.instances.optiont.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.optiont.traverse.traverse.G)), kotlin.Function1((arrow.instances.optiont.traverse.traverse.A, arrow.Kind((arrow.instances.optiont.traverse.traverse.G, arrow.instances.optiont.traverse.traverse.B)))), arrow.typeclasses.Traverse((arrow.instances.optiont.traverse.traverse.F)))arrow.instances.optiont.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.optiont.traverse$traverse(arrow.data.OptionT.Companion, arrow.typeclasses.Traverse((arrow.instances.optiont.traverse.traverse.F)))arrow.instances.optiont.traverse/arrow.data.-option-t/traverse.html
$dokka.location:arrow.instances.sequence.applicative$ap(kotlin.sequences.Sequence((arrow.instances.sequence.applicative.ap.A)), kotlin.sequences.Sequence((kotlin.Function1((arrow.instances.sequence.applicative.ap.A, arrow.instances.sequence.applicative.ap.B)))))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/ap.html
$dokka.location:arrow.instances.sequence.applicative$map(kotlin.sequences.Sequence((arrow.instances.sequence.applicative.map.A)), kotlin.Function1((arrow.instances.sequence.applicative.map.A, arrow.instances.sequence.applicative.map.B)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/map.html
$dokka.location:arrow.instances.sequence.applicative$map2(kotlin.sequences.Sequence((arrow.instances.sequence.applicative.map2.A)), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.sequence.applicative.map2.A, arrow.instances.sequence.applicative.map2.B)), arrow.instances.sequence.applicative.map2.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/map2.html
$dokka.location:arrow.instances.sequence.applicative$map2Eval(kotlin.sequences.Sequence((arrow.instances.sequence.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.sequence.applicative.map2Eval.A, arrow.instances.sequence.applicative.map2Eval.B)), arrow.instances.sequence.applicative.map2Eval.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/map2-eval.html
$dokka.location:arrow.instances.sequence.applicative$plus(kotlin.sequences.Sequence((java.math.BigDecimal)), kotlin.sequences.Sequence((java.math.BigDecimal)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/plus.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple2((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple3((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple4((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C, arrow.instances.sequence.applicative.product.D)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple5((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C, arrow.instances.sequence.applicative.product.D, arrow.instances.sequence.applicative.product.E)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple6((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C, arrow.instances.sequence.applicative.product.D, arrow.instances.sequence.applicative.product.E, arrow.instances.sequence.applicative.product.FF)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple7((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C, arrow.instances.sequence.applicative.product.D, arrow.instances.sequence.applicative.product.E, arrow.instances.sequence.applicative.product.FF, arrow.instances.sequence.applicative.product.G)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple8((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C, arrow.instances.sequence.applicative.product.D, arrow.instances.sequence.applicative.product.E, arrow.instances.sequence.applicative.product.FF, arrow.instances.sequence.applicative.product.G, arrow.instances.sequence.applicative.product.H)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.core.Tuple9((arrow.instances.sequence.applicative.product.A, arrow.instances.sequence.applicative.product.B, arrow.instances.sequence.applicative.product.C, arrow.instances.sequence.applicative.product.D, arrow.instances.sequence.applicative.product.E, arrow.instances.sequence.applicative.product.FF, arrow.instances.sequence.applicative.product.G, arrow.instances.sequence.applicative.product.H, arrow.instances.sequence.applicative.product.I)))), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.Z)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.applicative$product(kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.A)), kotlin.sequences.Sequence((arrow.instances.sequence.applicative.product.B)))arrow.instances.sequence.applicative/kotlin.sequences.-sequence/product.html
$dokka.location:arrow.instances.sequence.eq$neqv(kotlin.sequences.Sequence((arrow.instances.sequence.eq.neqv.A)), kotlin.sequences.Sequence((arrow.instances.sequence.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.sequence.eq.neqv.A)))arrow.instances.sequence.eq/kotlin.sequences.-sequence/neqv.html
$dokka.location:arrow.instances.sequence.foldable$combineAll(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.sequence.foldable.combineAll.A)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/combine-all.html
$dokka.location:arrow.instances.sequence.foldable$exists(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.exists.A)), kotlin.Function1((arrow.instances.sequence.foldable.exists.A, kotlin.Boolean)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/exists.html
$dokka.location:arrow.instances.sequence.foldable$find(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.find.A)), kotlin.Function1((arrow.instances.sequence.foldable.find.A, kotlin.Boolean)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/find.html
$dokka.location:arrow.instances.sequence.foldable$fold(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.sequence.foldable.fold.A)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/fold.html
$dokka.location:arrow.instances.sequence.foldable$foldLeft(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.foldLeft.A)), arrow.instances.sequence.foldable.foldLeft.B, kotlin.Function2((arrow.instances.sequence.foldable.foldLeft.B, arrow.instances.sequence.foldable.foldLeft.A, )))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/fold-left.html
$dokka.location:arrow.instances.sequence.foldable$foldM(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.sequence.foldable.foldM.G)), arrow.instances.sequence.foldable.foldM.B, kotlin.Function2((arrow.instances.sequence.foldable.foldM.B, arrow.instances.sequence.foldable.foldM.A, arrow.Kind((arrow.instances.sequence.foldable.foldM.G, )))))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/fold-m.html
$dokka.location:arrow.instances.sequence.foldable$foldMap(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.sequence.foldable.foldMap.B)), kotlin.Function1((arrow.instances.sequence.foldable.foldMap.A, arrow.instances.sequence.foldable.foldMap.B)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/fold-map.html
$dokka.location:arrow.instances.sequence.foldable$foldMapM(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.foldMapM.A)), arrow.instances.sequence.foldable.foldMapM.MA, arrow.instances.sequence.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.sequence.foldable.foldMapM.A, arrow.Kind((arrow.instances.sequence.foldable.foldMapM.G, arrow.instances.sequence.foldable.foldMapM.B)))))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/fold-map-m.html
$dokka.location:arrow.instances.sequence.foldable$foldRight(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.sequence.foldable.foldRight.B)), kotlin.Function2((arrow.instances.sequence.foldable.foldRight.A, arrow.core.Eval((arrow.instances.sequence.foldable.foldRight.B)), )))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/fold-right.html
$dokka.location:arrow.instances.sequence.foldable$forAll(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.forAll.A)), kotlin.Function1((arrow.instances.sequence.foldable.forAll.A, kotlin.Boolean)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/for-all.html
$dokka.location:arrow.instances.sequence.foldable$get(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.sequence.foldable.get.A)))), kotlin.Long)arrow.instances.sequence.foldable/kotlin.sequences.-sequence/get.html
$dokka.location:arrow.instances.sequence.foldable$isEmpty(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.isEmpty.A)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/is-empty.html
$dokka.location:arrow.instances.sequence.foldable$nonEmpty(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.nonEmpty.A)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/non-empty.html
$dokka.location:arrow.instances.sequence.foldable$reduceLeftOption(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.sequence.foldable.reduceLeftOption.A, , )))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/reduce-left-option.html
$dokka.location:arrow.instances.sequence.foldable$reduceLeftToOption(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.sequence.foldable.reduceLeftToOption.A, arrow.instances.sequence.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.sequence.foldable.reduceLeftToOption.B, arrow.instances.sequence.foldable.reduceLeftToOption.A, )))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/reduce-left-to-option.html
$dokka.location:arrow.instances.sequence.foldable$reduceRightOption(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.sequence.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/reduce-right-option.html
$dokka.location:arrow.instances.sequence.foldable$reduceRightToOption(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.sequence.foldable.reduceRightToOption.A, arrow.instances.sequence.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.sequence.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.sequence.foldable.reduceRightToOption.B)), )))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/reduce-right-to-option.html
$dokka.location:arrow.instances.sequence.foldable$sequence_(kotlin.sequences.Sequence((arrow.Kind((arrow.instances.sequence.foldable.sequence_.G, arrow.instances.sequence.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.sequence.foldable.sequence_.G)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/sequence_.html
$dokka.location:arrow.instances.sequence.foldable$size(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/size.html
$dokka.location:arrow.instances.sequence.foldable$traverse_(kotlin.sequences.Sequence((arrow.instances.sequence.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.sequence.foldable.traverse_.G)), kotlin.Function1((arrow.instances.sequence.foldable.traverse_.A, arrow.Kind((arrow.instances.sequence.foldable.traverse_.G, arrow.instances.sequence.foldable.traverse_.B)))))arrow.instances.sequence.foldable/kotlin.sequences.-sequence/traverse_.html
$dokka.location:arrow.instances.sequence.functor$as(kotlin.sequences.Sequence((arrow.instances.sequence.functor.as.A)), arrow.instances.sequence.functor.as.B)arrow.instances.sequence.functor/kotlin.sequences.-sequence/as.html
$dokka.location:arrow.instances.sequence.functor$fproduct(kotlin.sequences.Sequence((arrow.instances.sequence.functor.fproduct.A)), kotlin.Function1((arrow.instances.sequence.functor.fproduct.A, arrow.instances.sequence.functor.fproduct.B)))arrow.instances.sequence.functor/kotlin.sequences.-sequence/fproduct.html
$dokka.location:arrow.instances.sequence.functor$imap(kotlin.sequences.Sequence((arrow.instances.sequence.functor.imap.A)), kotlin.Function1((arrow.instances.sequence.functor.imap.A, arrow.instances.sequence.functor.imap.B)), kotlin.Function1((arrow.instances.sequence.functor.imap.B, arrow.instances.sequence.functor.imap.A)))arrow.instances.sequence.functor/kotlin.sequences.-sequence/imap.html
$dokka.location:arrow.instances.sequence.functor$map(kotlin.sequences.Sequence((arrow.instances.sequence.functor.map.A)), kotlin.Function1((arrow.instances.sequence.functor.map.A, arrow.instances.sequence.functor.map.B)))arrow.instances.sequence.functor/kotlin.sequences.-sequence/map.html
$dokka.location:arrow.instances.sequence.functor$tupleLeft(kotlin.sequences.Sequence((arrow.instances.sequence.functor.tupleLeft.A)), arrow.instances.sequence.functor.tupleLeft.B)arrow.instances.sequence.functor/kotlin.sequences.-sequence/tuple-left.html
$dokka.location:arrow.instances.sequence.functor$tupleRight(kotlin.sequences.Sequence((arrow.instances.sequence.functor.tupleRight.A)), arrow.instances.sequence.functor.tupleRight.B)arrow.instances.sequence.functor/kotlin.sequences.-sequence/tuple-right.html
$dokka.location:arrow.instances.sequence.functor$void(kotlin.sequences.Sequence((arrow.instances.sequence.functor.void.A)))arrow.instances.sequence.functor/kotlin.sequences.-sequence/void.html
$dokka.location:arrow.instances.sequence.functor$widen(kotlin.sequences.Sequence((arrow.instances.sequence.functor.widen.A)))arrow.instances.sequence.functor/kotlin.sequences.-sequence/widen.html
$dokka.location:arrow.instances.sequence.monad$ap(kotlin.sequences.Sequence((arrow.instances.sequence.monad.ap.A)), kotlin.sequences.Sequence((kotlin.Function1((arrow.instances.sequence.monad.ap.A, arrow.instances.sequence.monad.ap.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/ap.html
$dokka.location:arrow.instances.sequence.monad$effectM(kotlin.sequences.Sequence((arrow.instances.sequence.monad.effectM.A)), kotlin.Function1((arrow.instances.sequence.monad.effectM.A, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.effectM.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/effect-m.html
$dokka.location:arrow.instances.sequence.monad$flatMap(kotlin.sequences.Sequence((arrow.instances.sequence.monad.flatMap.A)), kotlin.Function1((arrow.instances.sequence.monad.flatMap.A, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.flatMap.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/flat-map.html
$dokka.location:arrow.instances.sequence.monad$flatten(kotlin.sequences.Sequence((arrow.data.SequenceK((arrow.instances.sequence.monad.flatten.A)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/flatten.html
$dokka.location:arrow.instances.sequence.monad$followedBy(kotlin.sequences.Sequence((arrow.instances.sequence.monad.followedBy.A)), kotlin.sequences.Sequence((arrow.instances.sequence.monad.followedBy.B)))arrow.instances.sequence.monad/kotlin.sequences.-sequence/followed-by.html
$dokka.location:arrow.instances.sequence.monad$followedByEval(kotlin.sequences.Sequence((arrow.instances.sequence.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.followedByEval.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/followed-by-eval.html
$dokka.location:arrow.instances.sequence.monad$forEffect(kotlin.sequences.Sequence((arrow.instances.sequence.monad.forEffect.A)), kotlin.sequences.Sequence((arrow.instances.sequence.monad.forEffect.B)))arrow.instances.sequence.monad/kotlin.sequences.-sequence/for-effect.html
$dokka.location:arrow.instances.sequence.monad$forEffectEval(kotlin.sequences.Sequence((arrow.instances.sequence.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.forEffectEval.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/for-effect-eval.html
$dokka.location:arrow.instances.sequence.monad$ifM(kotlin.sequences.Sequence((kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.ifM.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/if-m.html
$dokka.location:arrow.instances.sequence.monad$map(kotlin.sequences.Sequence((arrow.instances.sequence.monad.map.A)), kotlin.Function1((arrow.instances.sequence.monad.map.A, arrow.instances.sequence.monad.map.B)))arrow.instances.sequence.monad/kotlin.sequences.-sequence/map.html
$dokka.location:arrow.instances.sequence.monad$mproduct(kotlin.sequences.Sequence((arrow.instances.sequence.monad.mproduct.A)), kotlin.Function1((arrow.instances.sequence.monad.mproduct.A, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.monad.mproduct.B)))))arrow.instances.sequence.monad/kotlin.sequences.-sequence/mproduct.html
$dokka.location:arrow.instances.sequence.monoid$combineAll(kotlin.collections.Collection((arrow.data.SequenceK((arrow.instances.sequence.monoid.combineAll.A)))))arrow.instances.sequence.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.sequence.semigroup$maybeCombine(kotlin.sequences.Sequence((arrow.instances.sequence.semigroup.maybeCombine.A)), kotlin.sequences.Sequence((arrow.instances.sequence.semigroup.maybeCombine.A)))arrow.instances.sequence.semigroup/kotlin.sequences.-sequence/maybe-combine.html
$dokka.location:arrow.instances.sequence.semigroup$plus(kotlin.sequences.Sequence((arrow.instances.sequence.semigroup.plus.A)), kotlin.sequences.Sequence((arrow.instances.sequence.semigroup.plus.A)))arrow.instances.sequence.semigroup/kotlin.sequences.-sequence/plus.html
$dokka.location:arrow.instances.sequence.semigroupK$combineK(kotlin.sequences.Sequence((arrow.instances.sequence.semigroupK.combineK.A)), kotlin.sequences.Sequence((arrow.instances.sequence.semigroupK.combineK.A)))arrow.instances.sequence.semigroup-k/kotlin.sequences.-sequence/combine-k.html
$dokka.location:arrow.instances.sequence.traverse$flatTraverse(kotlin.sequences.Sequence((arrow.instances.sequence.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.data.ForSequenceK)), arrow.typeclasses.Applicative((arrow.instances.sequence.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.sequence.traverse.flatTraverse.A, arrow.Kind((arrow.instances.sequence.traverse.flatTraverse.G, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequence.traverse.flatTraverse.B)))))))arrow.instances.sequence.traverse/kotlin.sequences.-sequence/flat-traverse.html
$dokka.location:arrow.instances.sequence.traverse$map(kotlin.sequences.Sequence((arrow.instances.sequence.traverse.map.A)), kotlin.Function1((arrow.instances.sequence.traverse.map.A, arrow.instances.sequence.traverse.map.B)))arrow.instances.sequence.traverse/kotlin.sequences.-sequence/map.html
$dokka.location:arrow.instances.sequence.traverse$sequence(kotlin.sequences.Sequence((arrow.Kind((arrow.instances.sequence.traverse.sequence.G, arrow.instances.sequence.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.sequence.traverse.sequence.G)))arrow.instances.sequence.traverse/kotlin.sequences.-sequence/sequence.html
$dokka.location:arrow.instances.sequence.traverse$traverse(kotlin.sequences.Sequence((arrow.instances.sequence.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.sequence.traverse.traverse.G)), kotlin.Function1((arrow.instances.sequence.traverse.traverse.A, arrow.Kind((arrow.instances.sequence.traverse.traverse.G, arrow.instances.sequence.traverse.traverse.B)))))arrow.instances.sequence.traverse/kotlin.sequences.-sequence/traverse.html
$dokka.location:arrow.instances.sequencek.applicative$ap(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.ap.A)), arrow.Kind((arrow.data.ForSequenceK, kotlin.Function1((arrow.instances.sequencek.applicative.ap.A, arrow.instances.sequencek.applicative.ap.B)))))arrow.instances.sequencek.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.sequencek.applicative$applicative(arrow.data.SequenceK.Companion)arrow.instances.sequencek.applicative/arrow.data.-sequence-k/applicative.html
$dokka.location:arrow.instances.sequencek.applicative$map(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.map.A)), kotlin.Function1((arrow.instances.sequencek.applicative.map.A, arrow.instances.sequencek.applicative.map.B)))arrow.instances.sequencek.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.sequencek.applicative$map2(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.map2.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.sequencek.applicative.map2.A, arrow.instances.sequencek.applicative.map2.B)), arrow.instances.sequencek.applicative.map2.Z)))arrow.instances.sequencek.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.sequencek.applicative$map2Eval(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.sequencek.applicative.map2Eval.A, arrow.instances.sequencek.applicative.map2Eval.B)), arrow.instances.sequencek.applicative.map2Eval.Z)))arrow.instances.sequencek.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.sequencek.applicative$plus(arrow.Kind((arrow.data.ForSequenceK, java.math.BigDecimal)), arrow.Kind((arrow.data.ForSequenceK, java.math.BigDecimal)))arrow.instances.sequencek.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple2((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple3((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple4((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C, arrow.instances.sequencek.applicative.product.D)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple5((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C, arrow.instances.sequencek.applicative.product.D, arrow.instances.sequencek.applicative.product.E)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple6((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C, arrow.instances.sequencek.applicative.product.D, arrow.instances.sequencek.applicative.product.E, arrow.instances.sequencek.applicative.product.FF)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple7((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C, arrow.instances.sequencek.applicative.product.D, arrow.instances.sequencek.applicative.product.E, arrow.instances.sequencek.applicative.product.FF, arrow.instances.sequencek.applicative.product.G)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple8((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C, arrow.instances.sequencek.applicative.product.D, arrow.instances.sequencek.applicative.product.E, arrow.instances.sequencek.applicative.product.FF, arrow.instances.sequencek.applicative.product.G, arrow.instances.sequencek.applicative.product.H)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple9((arrow.instances.sequencek.applicative.product.A, arrow.instances.sequencek.applicative.product.B, arrow.instances.sequencek.applicative.product.C, arrow.instances.sequencek.applicative.product.D, arrow.instances.sequencek.applicative.product.E, arrow.instances.sequencek.applicative.product.FF, arrow.instances.sequencek.applicative.product.G, arrow.instances.sequencek.applicative.product.H, arrow.instances.sequencek.applicative.product.I)))), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.Z)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.applicative$product(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.applicative.product.B)))arrow.instances.sequencek.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.sequencek.eq$eq(arrow.data.SequenceK.Companion, arrow.typeclasses.Eq((arrow.instances.sequencek.eq.eq.A)))arrow.instances.sequencek.eq/arrow.data.-sequence-k/eq.html
$dokka.location:arrow.instances.sequencek.eq$neqv(arrow.data.SequenceK((arrow.instances.sequencek.eq.neqv.A)), arrow.data.SequenceK((arrow.instances.sequencek.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.sequencek.eq.neqv.A)))arrow.instances.sequencek.eq/arrow.data.-sequence-k/neqv.html
$dokka.location:arrow.instances.sequencek.foldable$combineAll(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.sequencek.foldable.combineAll.A)))arrow.instances.sequencek.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.sequencek.foldable$exists(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.exists.A)), kotlin.Function1((arrow.instances.sequencek.foldable.exists.A, kotlin.Boolean)))arrow.instances.sequencek.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.sequencek.foldable$find(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.find.A)), kotlin.Function1((arrow.instances.sequencek.foldable.find.A, kotlin.Boolean)))arrow.instances.sequencek.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.sequencek.foldable$fold(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.sequencek.foldable.fold.A)))arrow.instances.sequencek.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.sequencek.foldable$foldLeft(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.foldLeft.A)), arrow.instances.sequencek.foldable.foldLeft.B, kotlin.Function2((arrow.instances.sequencek.foldable.foldLeft.B, arrow.instances.sequencek.foldable.foldLeft.A, )))arrow.instances.sequencek.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.sequencek.foldable$foldM(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.sequencek.foldable.foldM.G)), arrow.instances.sequencek.foldable.foldM.B, kotlin.Function2((arrow.instances.sequencek.foldable.foldM.B, arrow.instances.sequencek.foldable.foldM.A, arrow.Kind((arrow.instances.sequencek.foldable.foldM.G, )))))arrow.instances.sequencek.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.sequencek.foldable$foldMap(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.sequencek.foldable.foldMap.B)), kotlin.Function1((arrow.instances.sequencek.foldable.foldMap.A, arrow.instances.sequencek.foldable.foldMap.B)))arrow.instances.sequencek.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.sequencek.foldable$foldMapM(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.foldMapM.A)), arrow.instances.sequencek.foldable.foldMapM.MA, arrow.instances.sequencek.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.sequencek.foldable.foldMapM.A, arrow.Kind((arrow.instances.sequencek.foldable.foldMapM.G, arrow.instances.sequencek.foldable.foldMapM.B)))))arrow.instances.sequencek.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.sequencek.foldable$foldRight(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.sequencek.foldable.foldRight.B)), kotlin.Function2((arrow.instances.sequencek.foldable.foldRight.A, arrow.core.Eval((arrow.instances.sequencek.foldable.foldRight.B)), )))arrow.instances.sequencek.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.sequencek.foldable$foldable(arrow.data.SequenceK.Companion)arrow.instances.sequencek.foldable/arrow.data.-sequence-k/foldable.html
$dokka.location:arrow.instances.sequencek.foldable$forAll(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.forAll.A)), kotlin.Function1((arrow.instances.sequencek.foldable.forAll.A, kotlin.Boolean)))arrow.instances.sequencek.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.sequencek.foldable$get(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.sequencek.foldable.get.A)))), kotlin.Long)arrow.instances.sequencek.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.sequencek.foldable$isEmpty(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.isEmpty.A)))arrow.instances.sequencek.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.sequencek.foldable$nonEmpty(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.nonEmpty.A)))arrow.instances.sequencek.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.sequencek.foldable$reduceLeftOption(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.sequencek.foldable.reduceLeftOption.A, , )))arrow.instances.sequencek.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.sequencek.foldable$reduceLeftToOption(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.sequencek.foldable.reduceLeftToOption.A, arrow.instances.sequencek.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.sequencek.foldable.reduceLeftToOption.B, arrow.instances.sequencek.foldable.reduceLeftToOption.A, )))arrow.instances.sequencek.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.sequencek.foldable$reduceRightOption(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.sequencek.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.sequencek.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.sequencek.foldable$reduceRightToOption(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.sequencek.foldable.reduceRightToOption.A, arrow.instances.sequencek.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.sequencek.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.sequencek.foldable.reduceRightToOption.B)), )))arrow.instances.sequencek.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.sequencek.foldable$sequence_(arrow.Kind((arrow.data.ForSequenceK, arrow.Kind((arrow.instances.sequencek.foldable.sequence_.G, arrow.instances.sequencek.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.sequencek.foldable.sequence_.G)))arrow.instances.sequencek.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.sequencek.foldable$size(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.sequencek.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.sequencek.foldable$traverse_(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.sequencek.foldable.traverse_.G)), kotlin.Function1((arrow.instances.sequencek.foldable.traverse_.A, arrow.Kind((arrow.instances.sequencek.foldable.traverse_.G, arrow.instances.sequencek.foldable.traverse_.B)))))arrow.instances.sequencek.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.sequencek.functor$as(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.as.A)), arrow.instances.sequencek.functor.as.B)arrow.instances.sequencek.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.sequencek.functor$fproduct(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.fproduct.A)), kotlin.Function1((arrow.instances.sequencek.functor.fproduct.A, arrow.instances.sequencek.functor.fproduct.B)))arrow.instances.sequencek.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.sequencek.functor$functor(arrow.data.SequenceK.Companion)arrow.instances.sequencek.functor/arrow.data.-sequence-k/functor.html
$dokka.location:arrow.instances.sequencek.functor$imap(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.imap.A)), kotlin.Function1((arrow.instances.sequencek.functor.imap.A, arrow.instances.sequencek.functor.imap.B)), kotlin.Function1((arrow.instances.sequencek.functor.imap.B, arrow.instances.sequencek.functor.imap.A)))arrow.instances.sequencek.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.sequencek.functor$map(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.map.A)), kotlin.Function1((arrow.instances.sequencek.functor.map.A, arrow.instances.sequencek.functor.map.B)))arrow.instances.sequencek.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.sequencek.functor$tupleLeft(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.tupleLeft.A)), arrow.instances.sequencek.functor.tupleLeft.B)arrow.instances.sequencek.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.sequencek.functor$tupleRight(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.tupleRight.A)), arrow.instances.sequencek.functor.tupleRight.B)arrow.instances.sequencek.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.sequencek.functor$void(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.void.A)))arrow.instances.sequencek.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.sequencek.functor$widen(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.functor.widen.A)))arrow.instances.sequencek.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.sequencek.hash$hash(arrow.data.SequenceK.Companion, arrow.typeclasses.Hash((arrow.instances.sequencek.hash.hash.A)))arrow.instances.sequencek.hash/arrow.data.-sequence-k/hash.html
$dokka.location:arrow.instances.sequencek.monad$ap(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.ap.A)), arrow.Kind((arrow.data.ForSequenceK, kotlin.Function1((arrow.instances.sequencek.monad.ap.A, arrow.instances.sequencek.monad.ap.B)))))arrow.instances.sequencek.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.sequencek.monad$effectM(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.effectM.A)), kotlin.Function1((arrow.instances.sequencek.monad.effectM.A, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.effectM.B)))))arrow.instances.sequencek.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.sequencek.monad$flatMap(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.flatMap.A)), kotlin.Function1((arrow.instances.sequencek.monad.flatMap.A, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.flatMap.B)))))arrow.instances.sequencek.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.sequencek.monad$flatten(arrow.Kind((arrow.data.ForSequenceK, arrow.Kind((, arrow.instances.sequencek.monad.flatten.A)))))arrow.instances.sequencek.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.sequencek.monad$followedBy(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.followedBy.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.followedBy.B)))arrow.instances.sequencek.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.sequencek.monad$followedByEval(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.followedByEval.B)))))arrow.instances.sequencek.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.sequencek.monad$forEffect(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.forEffect.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.forEffect.B)))arrow.instances.sequencek.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.sequencek.monad$forEffectEval(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.forEffectEval.B)))))arrow.instances.sequencek.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.sequencek.monad$ifM(arrow.Kind((arrow.data.ForSequenceK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.ifM.B)))))arrow.instances.sequencek.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.sequencek.monad$map(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.map.A)), kotlin.Function1((arrow.instances.sequencek.monad.map.A, arrow.instances.sequencek.monad.map.B)))arrow.instances.sequencek.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.sequencek.monad$monad(arrow.data.SequenceK.Companion)arrow.instances.sequencek.monad/arrow.data.-sequence-k/monad.html
$dokka.location:arrow.instances.sequencek.monad$mproduct(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.mproduct.A)), kotlin.Function1((arrow.instances.sequencek.monad.mproduct.A, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.monad.mproduct.B)))))arrow.instances.sequencek.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.sequencek.monoid$combineAll(kotlin.collections.Collection((arrow.data.SequenceK((arrow.instances.sequencek.monoid.combineAll.A)))))arrow.instances.sequencek.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.sequencek.monoid$monoid(arrow.data.SequenceK.Companion)arrow.instances.sequencek.monoid/arrow.data.-sequence-k/monoid.html
$dokka.location:arrow.instances.sequencek.monoidK$monoidK(arrow.data.SequenceK.Companion)arrow.instances.sequencek.monoid-k/arrow.data.-sequence-k/monoid-k.html
$dokka.location:arrow.instances.sequencek.semigroup$maybeCombine(arrow.data.SequenceK((arrow.instances.sequencek.semigroup.maybeCombine.A)), arrow.data.SequenceK((arrow.instances.sequencek.semigroup.maybeCombine.A)))arrow.instances.sequencek.semigroup/arrow.data.-sequence-k/maybe-combine.html
$dokka.location:arrow.instances.sequencek.semigroup$plus(arrow.data.SequenceK((arrow.instances.sequencek.semigroup.plus.A)), arrow.data.SequenceK((arrow.instances.sequencek.semigroup.plus.A)))arrow.instances.sequencek.semigroup/arrow.data.-sequence-k/plus.html
$dokka.location:arrow.instances.sequencek.semigroup$semigroup(arrow.data.SequenceK.Companion)arrow.instances.sequencek.semigroup/arrow.data.-sequence-k/semigroup.html
$dokka.location:arrow.instances.sequencek.semigroupK$combineK(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.semigroupK.combineK.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.semigroupK.combineK.A)))arrow.instances.sequencek.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.sequencek.semigroupK$semigroupK(arrow.data.SequenceK.Companion)arrow.instances.sequencek.semigroup-k/arrow.data.-sequence-k/semigroup-k.html
$dokka.location:arrow.instances.sequencek.show$show(arrow.data.SequenceK.Companion)arrow.instances.sequencek.show/arrow.data.-sequence-k/show.html
$dokka.location:arrow.instances.sequencek.traverse$flatTraverse(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.data.ForSequenceK)), arrow.typeclasses.Applicative((arrow.instances.sequencek.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.sequencek.traverse.flatTraverse.A, arrow.Kind((arrow.instances.sequencek.traverse.flatTraverse.G, arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.traverse.flatTraverse.B)))))))arrow.instances.sequencek.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.sequencek.traverse$map(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.traverse.map.A)), kotlin.Function1((arrow.instances.sequencek.traverse.map.A, arrow.instances.sequencek.traverse.map.B)))arrow.instances.sequencek.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.sequencek.traverse$sequence(arrow.Kind((arrow.data.ForSequenceK, arrow.Kind((arrow.instances.sequencek.traverse.sequence.G, arrow.instances.sequencek.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.sequencek.traverse.sequence.G)))arrow.instances.sequencek.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.sequencek.traverse$traverse(arrow.Kind((arrow.data.ForSequenceK, arrow.instances.sequencek.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.sequencek.traverse.traverse.G)), kotlin.Function1((arrow.instances.sequencek.traverse.traverse.A, arrow.Kind((arrow.instances.sequencek.traverse.traverse.G, arrow.instances.sequencek.traverse.traverse.B)))))arrow.instances.sequencek.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.sequencek.traverse$traverse(arrow.data.SequenceK.Companion)arrow.instances.sequencek.traverse/arrow.data.-sequence-k/traverse.html
$dokka.location:arrow.instances.set.eq$neqv(kotlin.collections.Set((arrow.instances.set.eq.neqv.A)), kotlin.collections.Set((arrow.instances.set.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.set.eq.neqv.A)))arrow.instances.set.eq/kotlin.collections.-set/neqv.html
$dokka.location:arrow.instances.set.foldable$combineAll(kotlin.collections.Set((arrow.instances.set.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.set.foldable.combineAll.A)))arrow.instances.set.foldable/kotlin.collections.-set/combine-all.html
$dokka.location:arrow.instances.set.foldable$exists(kotlin.collections.Set((arrow.instances.set.foldable.exists.A)), kotlin.Function1((arrow.instances.set.foldable.exists.A, kotlin.Boolean)))arrow.instances.set.foldable/kotlin.collections.-set/exists.html
$dokka.location:arrow.instances.set.foldable$find(kotlin.collections.Set((arrow.instances.set.foldable.find.A)), kotlin.Function1((arrow.instances.set.foldable.find.A, kotlin.Boolean)))arrow.instances.set.foldable/kotlin.collections.-set/find.html
$dokka.location:arrow.instances.set.foldable$fold(kotlin.collections.Set((arrow.instances.set.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.set.foldable.fold.A)))arrow.instances.set.foldable/kotlin.collections.-set/fold.html
$dokka.location:arrow.instances.set.foldable$foldLeft(kotlin.collections.Set((arrow.instances.set.foldable.foldLeft.A)), arrow.instances.set.foldable.foldLeft.B, kotlin.Function2((arrow.instances.set.foldable.foldLeft.B, arrow.instances.set.foldable.foldLeft.A, )))arrow.instances.set.foldable/kotlin.collections.-set/fold-left.html
$dokka.location:arrow.instances.set.foldable$foldM(kotlin.collections.Set((arrow.instances.set.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.set.foldable.foldM.G)), arrow.instances.set.foldable.foldM.B, kotlin.Function2((arrow.instances.set.foldable.foldM.B, arrow.instances.set.foldable.foldM.A, arrow.Kind((arrow.instances.set.foldable.foldM.G, )))))arrow.instances.set.foldable/kotlin.collections.-set/fold-m.html
$dokka.location:arrow.instances.set.foldable$foldMap(kotlin.collections.Set((arrow.instances.set.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.set.foldable.foldMap.B)), kotlin.Function1((arrow.instances.set.foldable.foldMap.A, arrow.instances.set.foldable.foldMap.B)))arrow.instances.set.foldable/kotlin.collections.-set/fold-map.html
$dokka.location:arrow.instances.set.foldable$foldMapM(kotlin.collections.Set((arrow.instances.set.foldable.foldMapM.A)), arrow.instances.set.foldable.foldMapM.MA, arrow.instances.set.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.set.foldable.foldMapM.A, arrow.Kind((arrow.instances.set.foldable.foldMapM.G, arrow.instances.set.foldable.foldMapM.B)))))arrow.instances.set.foldable/kotlin.collections.-set/fold-map-m.html
$dokka.location:arrow.instances.set.foldable$foldRight(kotlin.collections.Set((arrow.instances.set.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.set.foldable.foldRight.B)), kotlin.Function2((arrow.instances.set.foldable.foldRight.A, arrow.core.Eval((arrow.instances.set.foldable.foldRight.B)), )))arrow.instances.set.foldable/kotlin.collections.-set/fold-right.html
$dokka.location:arrow.instances.set.foldable$forAll(kotlin.collections.Set((arrow.instances.set.foldable.forAll.A)), kotlin.Function1((arrow.instances.set.foldable.forAll.A, kotlin.Boolean)))arrow.instances.set.foldable/kotlin.collections.-set/for-all.html
$dokka.location:arrow.instances.set.foldable$get(kotlin.collections.Set((arrow.instances.set.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.set.foldable.get.A)))), kotlin.Long)arrow.instances.set.foldable/kotlin.collections.-set/get.html
$dokka.location:arrow.instances.set.foldable$nonEmpty(kotlin.collections.Set((arrow.instances.set.foldable.nonEmpty.A)))arrow.instances.set.foldable/kotlin.collections.-set/non-empty.html
$dokka.location:arrow.instances.set.foldable$reduceLeftOption(kotlin.collections.Set((arrow.instances.set.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.set.foldable.reduceLeftOption.A, , )))arrow.instances.set.foldable/kotlin.collections.-set/reduce-left-option.html
$dokka.location:arrow.instances.set.foldable$reduceLeftToOption(kotlin.collections.Set((arrow.instances.set.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.set.foldable.reduceLeftToOption.A, arrow.instances.set.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.set.foldable.reduceLeftToOption.B, arrow.instances.set.foldable.reduceLeftToOption.A, )))arrow.instances.set.foldable/kotlin.collections.-set/reduce-left-to-option.html
$dokka.location:arrow.instances.set.foldable$reduceRightOption(kotlin.collections.Set((arrow.instances.set.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.set.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.set.foldable/kotlin.collections.-set/reduce-right-option.html
$dokka.location:arrow.instances.set.foldable$reduceRightToOption(kotlin.collections.Set((arrow.instances.set.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.set.foldable.reduceRightToOption.A, arrow.instances.set.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.set.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.set.foldable.reduceRightToOption.B)), )))arrow.instances.set.foldable/kotlin.collections.-set/reduce-right-to-option.html
$dokka.location:arrow.instances.set.foldable$sequence_(kotlin.collections.Set((arrow.Kind((arrow.instances.set.foldable.sequence_.G, arrow.instances.set.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.set.foldable.sequence_.G)))arrow.instances.set.foldable/kotlin.collections.-set/sequence_.html
$dokka.location:arrow.instances.set.foldable$traverse_(kotlin.collections.Set((arrow.instances.set.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.set.foldable.traverse_.G)), kotlin.Function1((arrow.instances.set.foldable.traverse_.A, arrow.Kind((arrow.instances.set.foldable.traverse_.G, arrow.instances.set.foldable.traverse_.B)))))arrow.instances.set.foldable/kotlin.collections.-set/traverse_.html
$dokka.location:arrow.instances.set.monoid$combineAll(kotlin.collections.Collection((arrow.data.SetK((arrow.instances.set.monoid.combineAll.A)))))arrow.instances.set.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.set.semigroup$maybeCombine(kotlin.collections.Set((arrow.instances.set.semigroup.maybeCombine.A)), kotlin.collections.Set((arrow.instances.set.semigroup.maybeCombine.A)))arrow.instances.set.semigroup/kotlin.collections.-set/maybe-combine.html
$dokka.location:arrow.instances.set.semigroup$plus(kotlin.collections.Set((arrow.instances.set.semigroup.plus.A)), kotlin.collections.Set((arrow.instances.set.semigroup.plus.A)))arrow.instances.set.semigroup/kotlin.collections.-set/plus.html
$dokka.location:arrow.instances.set.semigroupK$combineK(kotlin.collections.Set((arrow.instances.set.semigroupK.combineK.A)), kotlin.collections.Set((arrow.instances.set.semigroupK.combineK.A)))arrow.instances.set.semigroup-k/kotlin.collections.-set/combine-k.html
$dokka.location:arrow.instances.setk.eq$eq(arrow.data.SetK.Companion, arrow.typeclasses.Eq((arrow.instances.setk.eq.eq.A)))arrow.instances.setk.eq/arrow.data.-set-k/eq.html
$dokka.location:arrow.instances.setk.eq$neqv(arrow.data.SetK((arrow.instances.setk.eq.neqv.A)), arrow.data.SetK((arrow.instances.setk.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.setk.eq.neqv.A)))arrow.instances.setk.eq/arrow.data.-set-k/neqv.html
$dokka.location:arrow.instances.setk.foldable$combineAll(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.setk.foldable.combineAll.A)))arrow.instances.setk.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.setk.foldable$exists(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.exists.A)), kotlin.Function1((arrow.instances.setk.foldable.exists.A, kotlin.Boolean)))arrow.instances.setk.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.setk.foldable$find(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.find.A)), kotlin.Function1((arrow.instances.setk.foldable.find.A, kotlin.Boolean)))arrow.instances.setk.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.setk.foldable$fold(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.setk.foldable.fold.A)))arrow.instances.setk.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.setk.foldable$foldLeft(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.foldLeft.A)), arrow.instances.setk.foldable.foldLeft.B, kotlin.Function2((arrow.instances.setk.foldable.foldLeft.B, arrow.instances.setk.foldable.foldLeft.A, )))arrow.instances.setk.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.setk.foldable$foldM(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.setk.foldable.foldM.G)), arrow.instances.setk.foldable.foldM.B, kotlin.Function2((arrow.instances.setk.foldable.foldM.B, arrow.instances.setk.foldable.foldM.A, arrow.Kind((arrow.instances.setk.foldable.foldM.G, )))))arrow.instances.setk.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.setk.foldable$foldMap(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.setk.foldable.foldMap.B)), kotlin.Function1((arrow.instances.setk.foldable.foldMap.A, arrow.instances.setk.foldable.foldMap.B)))arrow.instances.setk.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.setk.foldable$foldMapM(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.foldMapM.A)), arrow.instances.setk.foldable.foldMapM.MA, arrow.instances.setk.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.setk.foldable.foldMapM.A, arrow.Kind((arrow.instances.setk.foldable.foldMapM.G, arrow.instances.setk.foldable.foldMapM.B)))))arrow.instances.setk.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.setk.foldable$foldRight(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.setk.foldable.foldRight.B)), kotlin.Function2((arrow.instances.setk.foldable.foldRight.A, arrow.core.Eval((arrow.instances.setk.foldable.foldRight.B)), )))arrow.instances.setk.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.setk.foldable$foldable(arrow.data.SetK.Companion)arrow.instances.setk.foldable/arrow.data.-set-k/foldable.html
$dokka.location:arrow.instances.setk.foldable$forAll(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.forAll.A)), kotlin.Function1((arrow.instances.setk.foldable.forAll.A, kotlin.Boolean)))arrow.instances.setk.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.setk.foldable$get(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.setk.foldable.get.A)))), kotlin.Long)arrow.instances.setk.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.setk.foldable$isEmpty(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.isEmpty.A)))arrow.instances.setk.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.setk.foldable$nonEmpty(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.nonEmpty.A)))arrow.instances.setk.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.setk.foldable$reduceLeftOption(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.setk.foldable.reduceLeftOption.A, , )))arrow.instances.setk.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.setk.foldable$reduceLeftToOption(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.setk.foldable.reduceLeftToOption.A, arrow.instances.setk.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.setk.foldable.reduceLeftToOption.B, arrow.instances.setk.foldable.reduceLeftToOption.A, )))arrow.instances.setk.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.setk.foldable$reduceRightOption(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.setk.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.setk.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.setk.foldable$reduceRightToOption(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.setk.foldable.reduceRightToOption.A, arrow.instances.setk.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.setk.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.setk.foldable.reduceRightToOption.B)), )))arrow.instances.setk.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.setk.foldable$sequence_(arrow.Kind((arrow.data.ForSetK, arrow.Kind((arrow.instances.setk.foldable.sequence_.G, arrow.instances.setk.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.setk.foldable.sequence_.G)))arrow.instances.setk.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.setk.foldable$size(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.setk.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.setk.foldable$traverse_(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.setk.foldable.traverse_.G)), kotlin.Function1((arrow.instances.setk.foldable.traverse_.A, arrow.Kind((arrow.instances.setk.foldable.traverse_.G, arrow.instances.setk.foldable.traverse_.B)))))arrow.instances.setk.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.setk.hash$hash(arrow.data.SetK.Companion, arrow.typeclasses.Hash((arrow.instances.setk.hash.hash.A)))arrow.instances.setk.hash/arrow.data.-set-k/hash.html
$dokka.location:arrow.instances.setk.monoid$combineAll(kotlin.collections.Collection((arrow.data.SetK((arrow.instances.setk.monoid.combineAll.A)))))arrow.instances.setk.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.setk.monoid$monoid(arrow.data.SetK.Companion)arrow.instances.setk.monoid/arrow.data.-set-k/monoid.html
$dokka.location:arrow.instances.setk.monoidK$monoidK(arrow.data.SetK.Companion)arrow.instances.setk.monoid-k/arrow.data.-set-k/monoid-k.html
$dokka.location:arrow.instances.setk.semigroup$maybeCombine(arrow.data.SetK((arrow.instances.setk.semigroup.maybeCombine.A)), arrow.data.SetK((arrow.instances.setk.semigroup.maybeCombine.A)))arrow.instances.setk.semigroup/arrow.data.-set-k/maybe-combine.html
$dokka.location:arrow.instances.setk.semigroup$plus(arrow.data.SetK((arrow.instances.setk.semigroup.plus.A)), arrow.data.SetK((arrow.instances.setk.semigroup.plus.A)))arrow.instances.setk.semigroup/arrow.data.-set-k/plus.html
$dokka.location:arrow.instances.setk.semigroup$semigroup(arrow.data.SetK.Companion)arrow.instances.setk.semigroup/arrow.data.-set-k/semigroup.html
$dokka.location:arrow.instances.setk.semigroupK$combineK(arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.semigroupK.combineK.A)), arrow.Kind((arrow.data.ForSetK, arrow.instances.setk.semigroupK.combineK.A)))arrow.instances.setk.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.setk.semigroupK$semigroupK(arrow.data.SetK.Companion)arrow.instances.setk.semigroup-k/arrow.data.-set-k/semigroup-k.html
$dokka.location:arrow.instances.setk.show$show(arrow.data.SetK.Companion)arrow.instances.setk.show/arrow.data.-set-k/show.html
$dokka.location:arrow.instances.statet.applicative$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.ap.F)), arrow.instances.statet.applicative.ap.S)), arrow.instances.statet.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.ap.F)), arrow.instances.statet.applicative.ap.S)), kotlin.Function1((arrow.instances.statet.applicative.ap.A, arrow.instances.statet.applicative.ap.B)))), arrow.typeclasses.Monad((arrow.instances.statet.applicative.ap.F)))arrow.instances.statet.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.statet.applicative$applicative(arrow.data.StateT.Companion, arrow.typeclasses.Monad((arrow.instances.statet.applicative.applicative.F)))arrow.instances.statet.applicative/arrow.data.-state-t/applicative.html
$dokka.location:arrow.instances.statet.applicative$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.map.F)), arrow.instances.statet.applicative.map.S)), arrow.instances.statet.applicative.map.A)), kotlin.Function1((arrow.instances.statet.applicative.map.A, arrow.instances.statet.applicative.map.B)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.map.F)))arrow.instances.statet.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.statet.applicative$map2(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.map2.F)), arrow.instances.statet.applicative.map2.S)), arrow.instances.statet.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.map2.F)), arrow.instances.statet.applicative.map2.S)), arrow.instances.statet.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.statet.applicative.map2.A, arrow.instances.statet.applicative.map2.B)), arrow.instances.statet.applicative.map2.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.map2.F)))arrow.instances.statet.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.statet.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.map2Eval.F)), arrow.instances.statet.applicative.map2Eval.S)), arrow.instances.statet.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.map2Eval.F)), arrow.instances.statet.applicative.map2Eval.S)), arrow.instances.statet.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.statet.applicative.map2Eval.A, arrow.instances.statet.applicative.map2Eval.B)), arrow.instances.statet.applicative.map2Eval.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.map2Eval.F)))arrow.instances.statet.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.statet.applicative$plus(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.plus.F)), arrow.instances.statet.applicative.plus.S)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.plus.F)), arrow.instances.statet.applicative.plus.S)), java.math.BigDecimal)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.plus.F)))arrow.instances.statet.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple2((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple3((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple4((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C, arrow.instances.statet.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple5((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C, arrow.instances.statet.applicative.product.D, arrow.instances.statet.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple6((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C, arrow.instances.statet.applicative.product.D, arrow.instances.statet.applicative.product.E, arrow.instances.statet.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple7((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C, arrow.instances.statet.applicative.product.D, arrow.instances.statet.applicative.product.E, arrow.instances.statet.applicative.product.FF, arrow.instances.statet.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple8((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C, arrow.instances.statet.applicative.product.D, arrow.instances.statet.applicative.product.E, arrow.instances.statet.applicative.product.FF, arrow.instances.statet.applicative.product.G, arrow.instances.statet.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.core.Tuple9((arrow.instances.statet.applicative.product.A, arrow.instances.statet.applicative.product.B, arrow.instances.statet.applicative.product.C, arrow.instances.statet.applicative.product.D, arrow.instances.statet.applicative.product.E, arrow.instances.statet.applicative.product.FF, arrow.instances.statet.applicative.product.G, arrow.instances.statet.applicative.product.H, arrow.instances.statet.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicative.product.F)), arrow.instances.statet.applicative.product.S)), arrow.instances.statet.applicative.product.B)), arrow.typeclasses.Monad((arrow.instances.statet.applicative.product.F)))arrow.instances.statet.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.statet.applicativeError$applicativeError(arrow.data.StateT.Companion, arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.applicativeError.F, arrow.instances.statet.applicativeError.applicativeError.E)))arrow.instances.statet.applicative-error/arrow.data.-state-t/applicative-error.html
$dokka.location:arrow.instances.statet.applicativeError$attempt(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicativeError.attempt.F)), arrow.instances.statet.applicativeError.attempt.S)), arrow.instances.statet.applicativeError.attempt.A)), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.attempt.F, arrow.instances.statet.applicativeError.attempt.E)))arrow.instances.statet.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.instances.statet.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicativeError.catch.F)), arrow.instances.statet.applicativeError.catch.S)), kotlin.Throwable)), kotlin.Function0((arrow.instances.statet.applicativeError.catch.A)), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.catch.F, arrow.instances.statet.applicativeError.catch.E)))arrow.instances.statet.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.instances.statet.applicativeError$fromEither(arrow.core.Either((arrow.instances.statet.applicativeError.fromEither.EE, arrow.instances.statet.applicativeError.fromEither.A)), kotlin.Function1((arrow.instances.statet.applicativeError.fromEither.EE, arrow.instances.statet.applicativeError.fromEither.E)), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.fromEither.F, arrow.instances.statet.applicativeError.fromEither.E)))arrow.instances.statet.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.instances.statet.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.instances.statet.applicativeError.fromOption.A)), kotlin.Function0((arrow.instances.statet.applicativeError.fromOption.E)), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.fromOption.F, arrow.instances.statet.applicativeError.fromOption.E)))arrow.instances.statet.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.instances.statet.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.instances.statet.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, arrow.instances.statet.applicativeError.fromTry.E)), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.fromTry.F, arrow.instances.statet.applicativeError.fromTry.E)))arrow.instances.statet.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.instances.statet.applicativeError$handleError(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicativeError.handleError.F)), arrow.instances.statet.applicativeError.handleError.S)), arrow.instances.statet.applicativeError.handleError.A)), kotlin.Function1((arrow.instances.statet.applicativeError.handleError.E, arrow.instances.statet.applicativeError.handleError.A)), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.handleError.F, arrow.instances.statet.applicativeError.handleError.E)))arrow.instances.statet.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.instances.statet.applicativeError$handleErrorWith(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicativeError.handleErrorWith.F)), arrow.instances.statet.applicativeError.handleErrorWith.S)), arrow.instances.statet.applicativeError.handleErrorWith.A)), kotlin.Function1((arrow.instances.statet.applicativeError.handleErrorWith.E, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.applicativeError.handleErrorWith.F)), arrow.instances.statet.applicativeError.handleErrorWith.S)), arrow.instances.statet.applicativeError.handleErrorWith.A)))), arrow.typeclasses.MonadError((arrow.instances.statet.applicativeError.handleErrorWith.F, arrow.instances.statet.applicativeError.handleErrorWith.E)))arrow.instances.statet.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.instances.statet.functor$as(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.as.F)), arrow.instances.statet.functor.as.S)), arrow.instances.statet.functor.as.A)), arrow.instances.statet.functor.as.B, arrow.typeclasses.Functor((arrow.instances.statet.functor.as.F)))arrow.instances.statet.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.statet.functor$fproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.fproduct.F)), arrow.instances.statet.functor.fproduct.S)), arrow.instances.statet.functor.fproduct.A)), kotlin.Function1((arrow.instances.statet.functor.fproduct.A, arrow.instances.statet.functor.fproduct.B)), arrow.typeclasses.Functor((arrow.instances.statet.functor.fproduct.F)))arrow.instances.statet.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.statet.functor$functor(arrow.data.StateT.Companion, arrow.typeclasses.Functor((arrow.instances.statet.functor.functor.F)))arrow.instances.statet.functor/arrow.data.-state-t/functor.html
$dokka.location:arrow.instances.statet.functor$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.imap.F)), arrow.instances.statet.functor.imap.S)), arrow.instances.statet.functor.imap.A)), kotlin.Function1((arrow.instances.statet.functor.imap.A, arrow.instances.statet.functor.imap.B)), kotlin.Function1((arrow.instances.statet.functor.imap.B, arrow.instances.statet.functor.imap.A)), arrow.typeclasses.Functor((arrow.instances.statet.functor.imap.F)))arrow.instances.statet.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.statet.functor$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.map.F)), arrow.instances.statet.functor.map.S)), arrow.instances.statet.functor.map.A)), kotlin.Function1((arrow.instances.statet.functor.map.A, arrow.instances.statet.functor.map.B)), arrow.typeclasses.Functor((arrow.instances.statet.functor.map.F)))arrow.instances.statet.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.statet.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.tupleLeft.F)), arrow.instances.statet.functor.tupleLeft.S)), arrow.instances.statet.functor.tupleLeft.A)), arrow.instances.statet.functor.tupleLeft.B, arrow.typeclasses.Functor((arrow.instances.statet.functor.tupleLeft.F)))arrow.instances.statet.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.statet.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.tupleRight.F)), arrow.instances.statet.functor.tupleRight.S)), arrow.instances.statet.functor.tupleRight.A)), arrow.instances.statet.functor.tupleRight.B, arrow.typeclasses.Functor((arrow.instances.statet.functor.tupleRight.F)))arrow.instances.statet.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.statet.functor$void(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.void.F)), arrow.instances.statet.functor.void.S)), arrow.instances.statet.functor.void.A)), arrow.typeclasses.Functor((arrow.instances.statet.functor.void.F)))arrow.instances.statet.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.statet.functor$widen(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.functor.widen.F)), arrow.instances.statet.functor.widen.S)), arrow.instances.statet.functor.widen.A)), arrow.typeclasses.Functor((arrow.instances.statet.functor.widen.F)))arrow.instances.statet.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.statet.monad$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.ap.F)), arrow.instances.statet.monad.ap.S)), arrow.instances.statet.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.ap.F)), arrow.instances.statet.monad.ap.S)), kotlin.Function1((arrow.instances.statet.monad.ap.A, arrow.instances.statet.monad.ap.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.ap.F)))arrow.instances.statet.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.statet.monad$effectM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.effectM.F)), arrow.instances.statet.monad.effectM.S)), arrow.instances.statet.monad.effectM.A)), kotlin.Function1((arrow.instances.statet.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.effectM.F)), arrow.instances.statet.monad.effectM.S)), arrow.instances.statet.monad.effectM.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.effectM.F)))arrow.instances.statet.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.statet.monad$flatMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.flatMap.F)), arrow.instances.statet.monad.flatMap.S)), arrow.instances.statet.monad.flatMap.A)), kotlin.Function1((arrow.instances.statet.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.flatMap.F)), arrow.instances.statet.monad.flatMap.S)), arrow.instances.statet.monad.flatMap.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.flatMap.F)))arrow.instances.statet.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.statet.monad$flatten(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.flatten.F)), arrow.instances.statet.monad.flatten.S)), arrow.Kind((, arrow.instances.statet.monad.flatten.A)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.flatten.F)))arrow.instances.statet.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.statet.monad$followedBy(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.followedBy.F)), arrow.instances.statet.monad.followedBy.S)), arrow.instances.statet.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.followedBy.F)), arrow.instances.statet.monad.followedBy.S)), arrow.instances.statet.monad.followedBy.B)), arrow.typeclasses.Monad((arrow.instances.statet.monad.followedBy.F)))arrow.instances.statet.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.statet.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.followedByEval.F)), arrow.instances.statet.monad.followedByEval.S)), arrow.instances.statet.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.followedByEval.F)), arrow.instances.statet.monad.followedByEval.S)), arrow.instances.statet.monad.followedByEval.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.followedByEval.F)))arrow.instances.statet.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.statet.monad$forEffect(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.forEffect.F)), arrow.instances.statet.monad.forEffect.S)), arrow.instances.statet.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.forEffect.F)), arrow.instances.statet.monad.forEffect.S)), arrow.instances.statet.monad.forEffect.B)), arrow.typeclasses.Monad((arrow.instances.statet.monad.forEffect.F)))arrow.instances.statet.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.statet.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.forEffectEval.F)), arrow.instances.statet.monad.forEffectEval.S)), arrow.instances.statet.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.forEffectEval.F)), arrow.instances.statet.monad.forEffectEval.S)), arrow.instances.statet.monad.forEffectEval.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.forEffectEval.F)))arrow.instances.statet.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.statet.monad$ifM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.ifM.F)), arrow.instances.statet.monad.ifM.S)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.ifM.F)), arrow.instances.statet.monad.ifM.S)), arrow.instances.statet.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.ifM.F)), arrow.instances.statet.monad.ifM.S)), arrow.instances.statet.monad.ifM.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.ifM.F)))arrow.instances.statet.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.statet.monad$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.map.F)), arrow.instances.statet.monad.map.S)), arrow.instances.statet.monad.map.A)), kotlin.Function1((arrow.instances.statet.monad.map.A, arrow.instances.statet.monad.map.B)), arrow.typeclasses.Monad((arrow.instances.statet.monad.map.F)))arrow.instances.statet.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.statet.monad$monad(arrow.data.StateT.Companion, arrow.typeclasses.Monad((arrow.instances.statet.monad.monad.F)))arrow.instances.statet.monad/arrow.data.-state-t/monad.html
$dokka.location:arrow.instances.statet.monad$mproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.mproduct.F)), arrow.instances.statet.monad.mproduct.S)), arrow.instances.statet.monad.mproduct.A)), kotlin.Function1((arrow.instances.statet.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monad.mproduct.F)), arrow.instances.statet.monad.mproduct.S)), arrow.instances.statet.monad.mproduct.B)))), arrow.typeclasses.Monad((arrow.instances.statet.monad.mproduct.F)))arrow.instances.statet.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.statet.monadError$ensure(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.monadError.ensure.F)), arrow.instances.statet.monadError.ensure.S)), arrow.instances.statet.monadError.ensure.A)), kotlin.Function0((arrow.instances.statet.monadError.ensure.E)), kotlin.Function1((arrow.instances.statet.monadError.ensure.A, kotlin.Boolean)), arrow.typeclasses.MonadError((arrow.instances.statet.monadError.ensure.F, arrow.instances.statet.monadError.ensure.E)))arrow.instances.statet.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.instances.statet.monadError$monadError(arrow.data.StateT.Companion, arrow.typeclasses.MonadError((arrow.instances.statet.monadError.monadError.F, arrow.instances.statet.monadError.monadError.E)))arrow.instances.statet.monad-error/arrow.data.-state-t/monad-error.html
$dokka.location:arrow.instances.statet.semigroupK$combineK(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.semigroupK.combineK.F)), arrow.instances.statet.semigroupK.combineK.S)), arrow.instances.statet.semigroupK.combineK.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.instances.statet.semigroupK.combineK.F)), arrow.instances.statet.semigroupK.combineK.S)), arrow.instances.statet.semigroupK.combineK.A)), arrow.typeclasses.Monad((arrow.instances.statet.semigroupK.combineK.F)), arrow.typeclasses.SemigroupK((arrow.instances.statet.semigroupK.combineK.F)))arrow.instances.statet.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.statet.semigroupK$semigroupK(arrow.data.StateT.Companion, arrow.typeclasses.Monad((arrow.instances.statet.semigroupK.semigroupK.F)), arrow.typeclasses.SemigroupK((arrow.instances.statet.semigroupK.semigroupK.F)))arrow.instances.statet.semigroup-k/arrow.data.-state-t/semigroup-k.html
$dokka.location:arrow.instances.store.comonad$coflatMap(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.comonad.coflatMap.S)), arrow.instances.store.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.comonad.coflatMap.S)), arrow.instances.store.comonad.coflatMap.A)), arrow.instances.store.comonad.coflatMap.B)))arrow.instances.store.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.store.comonad$comonad(arrow.data.Store.Companion)arrow.instances.store.comonad/arrow.data.-store/comonad.html
$dokka.location:arrow.instances.store.comonad$duplicate(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.comonad.duplicate.S)), arrow.instances.store.comonad.duplicate.A)))arrow.instances.store.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.store.comonad$extract(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.comonad.extract.S)), arrow.instances.store.comonad.extract.A)))arrow.instances.store.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.store.functor$as(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.as.S)), arrow.instances.store.functor.as.A)), arrow.instances.store.functor.as.B)arrow.instances.store.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.store.functor$fproduct(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.fproduct.S)), arrow.instances.store.functor.fproduct.A)), kotlin.Function1((arrow.instances.store.functor.fproduct.A, arrow.instances.store.functor.fproduct.B)))arrow.instances.store.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.store.functor$functor(arrow.data.Store.Companion)arrow.instances.store.functor/arrow.data.-store/functor.html
$dokka.location:arrow.instances.store.functor$imap(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.imap.S)), arrow.instances.store.functor.imap.A)), kotlin.Function1((arrow.instances.store.functor.imap.A, arrow.instances.store.functor.imap.B)), kotlin.Function1((arrow.instances.store.functor.imap.B, arrow.instances.store.functor.imap.A)))arrow.instances.store.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.store.functor$map(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.map.S)), arrow.instances.store.functor.map.A)), kotlin.Function1((arrow.instances.store.functor.map.A, arrow.instances.store.functor.map.B)))arrow.instances.store.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.store.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.tupleLeft.S)), arrow.instances.store.functor.tupleLeft.A)), arrow.instances.store.functor.tupleLeft.B)arrow.instances.store.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.store.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.tupleRight.S)), arrow.instances.store.functor.tupleRight.A)), arrow.instances.store.functor.tupleRight.B)arrow.instances.store.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.store.functor$void(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.void.S)), arrow.instances.store.functor.void.A)))arrow.instances.store.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.store.functor$widen(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.instances.store.functor.widen.S)), arrow.instances.store.functor.widen.A)))arrow.instances.store.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.sum.comonad$coflatMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.comonad.coflatMap.F)), arrow.instances.sum.comonad.coflatMap.G)), arrow.instances.sum.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.comonad.coflatMap.F)), arrow.instances.sum.comonad.coflatMap.G)), arrow.instances.sum.comonad.coflatMap.A)), arrow.instances.sum.comonad.coflatMap.B)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.coflatMap.F)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.coflatMap.G)))arrow.instances.sum.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.sum.comonad$comonad(arrow.data.Sum.Companion, arrow.typeclasses.Comonad((arrow.instances.sum.comonad.comonad.F)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.comonad.G)))arrow.instances.sum.comonad/arrow.data.-sum/comonad.html
$dokka.location:arrow.instances.sum.comonad$duplicate(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.comonad.duplicate.F)), arrow.instances.sum.comonad.duplicate.G)), arrow.instances.sum.comonad.duplicate.A)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.duplicate.F)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.duplicate.G)))arrow.instances.sum.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.sum.comonad$extract(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.comonad.extract.F)), arrow.instances.sum.comonad.extract.G)), arrow.instances.sum.comonad.extract.A)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.extract.F)), arrow.typeclasses.Comonad((arrow.instances.sum.comonad.extract.G)))arrow.instances.sum.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.sum.eq$eq(arrow.data.Sum.Companion, arrow.typeclasses.Eq((arrow.Kind((arrow.instances.sum.eq.eq.F, arrow.instances.sum.eq.eq.A)))), arrow.typeclasses.Eq((arrow.Kind((arrow.instances.sum.eq.eq.G, arrow.instances.sum.eq.eq.A)))))arrow.instances.sum.eq/arrow.data.-sum/eq.html
$dokka.location:arrow.instances.sum.eq$neqv(arrow.data.Sum((arrow.instances.sum.eq.neqv.F, arrow.instances.sum.eq.neqv.G, arrow.instances.sum.eq.neqv.A)), arrow.data.Sum((arrow.instances.sum.eq.neqv.F, arrow.instances.sum.eq.neqv.G, arrow.instances.sum.eq.neqv.A)), arrow.typeclasses.Eq((arrow.Kind((arrow.instances.sum.eq.neqv.F, arrow.instances.sum.eq.neqv.A)))), arrow.typeclasses.Eq((arrow.Kind((arrow.instances.sum.eq.neqv.G, arrow.instances.sum.eq.neqv.A)))))arrow.instances.sum.eq/arrow.data.-sum/neqv.html
$dokka.location:arrow.instances.sum.functor$as(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.as.F)), arrow.instances.sum.functor.as.G)), arrow.instances.sum.functor.as.A)), arrow.instances.sum.functor.as.B, arrow.typeclasses.Functor((arrow.instances.sum.functor.as.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.as.G)))arrow.instances.sum.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.sum.functor$fproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.fproduct.F)), arrow.instances.sum.functor.fproduct.G)), arrow.instances.sum.functor.fproduct.A)), kotlin.Function1((arrow.instances.sum.functor.fproduct.A, arrow.instances.sum.functor.fproduct.B)), arrow.typeclasses.Functor((arrow.instances.sum.functor.fproduct.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.fproduct.G)))arrow.instances.sum.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.sum.functor$functor(arrow.data.Sum.Companion, arrow.typeclasses.Functor((arrow.instances.sum.functor.functor.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.functor.G)))arrow.instances.sum.functor/arrow.data.-sum/functor.html
$dokka.location:arrow.instances.sum.functor$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.imap.F)), arrow.instances.sum.functor.imap.G)), arrow.instances.sum.functor.imap.A)), kotlin.Function1((arrow.instances.sum.functor.imap.A, arrow.instances.sum.functor.imap.B)), kotlin.Function1((arrow.instances.sum.functor.imap.B, arrow.instances.sum.functor.imap.A)), arrow.typeclasses.Functor((arrow.instances.sum.functor.imap.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.imap.G)))arrow.instances.sum.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.sum.functor$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.map.F)), arrow.instances.sum.functor.map.G)), arrow.instances.sum.functor.map.A)), kotlin.Function1((arrow.instances.sum.functor.map.A, arrow.instances.sum.functor.map.B)), arrow.typeclasses.Functor((arrow.instances.sum.functor.map.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.map.G)))arrow.instances.sum.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.sum.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.tupleLeft.F)), arrow.instances.sum.functor.tupleLeft.G)), arrow.instances.sum.functor.tupleLeft.A)), arrow.instances.sum.functor.tupleLeft.B, arrow.typeclasses.Functor((arrow.instances.sum.functor.tupleLeft.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.tupleLeft.G)))arrow.instances.sum.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.sum.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.tupleRight.F)), arrow.instances.sum.functor.tupleRight.G)), arrow.instances.sum.functor.tupleRight.A)), arrow.instances.sum.functor.tupleRight.B, arrow.typeclasses.Functor((arrow.instances.sum.functor.tupleRight.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.tupleRight.G)))arrow.instances.sum.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.sum.functor$void(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.void.F)), arrow.instances.sum.functor.void.G)), arrow.instances.sum.functor.void.A)), arrow.typeclasses.Functor((arrow.instances.sum.functor.void.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.void.G)))arrow.instances.sum.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.sum.functor$widen(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.instances.sum.functor.widen.F)), arrow.instances.sum.functor.widen.G)), arrow.instances.sum.functor.widen.A)), arrow.typeclasses.Functor((arrow.instances.sum.functor.widen.F)), arrow.typeclasses.Functor((arrow.instances.sum.functor.widen.G)))arrow.instances.sum.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.sum.hash$hash(arrow.data.Sum.Companion, arrow.typeclasses.Hash((arrow.Kind((arrow.instances.sum.hash.hash.F, arrow.instances.sum.hash.hash.A)))), arrow.typeclasses.Hash((arrow.Kind((arrow.instances.sum.hash.hash.G, arrow.instances.sum.hash.hash.A)))))arrow.instances.sum.hash/arrow.data.-sum/hash.html
$dokka.location:arrow.instances.validated.applicative$ap(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.ap.E)), arrow.instances.validated.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.ap.E)), kotlin.Function1((arrow.instances.validated.applicative.ap.A, arrow.instances.validated.applicative.ap.B)))), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.ap.E)))arrow.instances.validated.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.validated.applicative$applicative(arrow.data.Validated.Companion, arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.applicative.E)))arrow.instances.validated.applicative/arrow.data.-validated/applicative.html
$dokka.location:arrow.instances.validated.applicative$map(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.map.E)), arrow.instances.validated.applicative.map.A)), kotlin.Function1((arrow.instances.validated.applicative.map.A, arrow.instances.validated.applicative.map.B)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.map.E)))arrow.instances.validated.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.validated.applicative$map2(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.map2.E)), arrow.instances.validated.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.map2.E)), arrow.instances.validated.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.validated.applicative.map2.A, arrow.instances.validated.applicative.map2.B)), arrow.instances.validated.applicative.map2.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.map2.E)))arrow.instances.validated.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.validated.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.map2Eval.E)), arrow.instances.validated.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.map2Eval.E)), arrow.instances.validated.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.validated.applicative.map2Eval.A, arrow.instances.validated.applicative.map2Eval.B)), arrow.instances.validated.applicative.map2Eval.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.map2Eval.E)))arrow.instances.validated.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.validated.applicative$plus(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.plus.E)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.plus.E)), java.math.BigDecimal)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.plus.E)))arrow.instances.validated.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple2((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple3((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple4((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C, arrow.instances.validated.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple5((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C, arrow.instances.validated.applicative.product.D, )))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple6((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C, arrow.instances.validated.applicative.product.D, , arrow.instances.validated.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple7((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C, arrow.instances.validated.applicative.product.D, , arrow.instances.validated.applicative.product.FF, arrow.instances.validated.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple8((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C, arrow.instances.validated.applicative.product.D, , arrow.instances.validated.applicative.product.FF, arrow.instances.validated.applicative.product.G, arrow.instances.validated.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.core.Tuple9((arrow.instances.validated.applicative.product.A, arrow.instances.validated.applicative.product.B, arrow.instances.validated.applicative.product.C, arrow.instances.validated.applicative.product.D, , arrow.instances.validated.applicative.product.FF, arrow.instances.validated.applicative.product.G, arrow.instances.validated.applicative.product.H, arrow.instances.validated.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.Z)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicative$product(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicative.product.E)), arrow.instances.validated.applicative.product.B)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicative.product.E)))arrow.instances.validated.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.validated.applicativeError$applicativeError(arrow.data.Validated.Companion, arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.applicativeError.E)))arrow.instances.validated.applicative-error/arrow.data.-validated/applicative-error.html
$dokka.location:arrow.instances.validated.applicativeError$attempt(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicativeError.attempt.E)), arrow.instances.validated.applicativeError.attempt.A)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.attempt.E)))arrow.instances.validated.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.instances.validated.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicativeError.catch.E)), kotlin.Throwable)), kotlin.Function0((arrow.instances.validated.applicativeError.catch.A)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.catch.E)))arrow.instances.validated.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.instances.validated.applicativeError$fromEither(arrow.core.Either((arrow.instances.validated.applicativeError.fromEither.EE, arrow.instances.validated.applicativeError.fromEither.A)), kotlin.Function1((arrow.instances.validated.applicativeError.fromEither.EE, arrow.instances.validated.applicativeError.fromEither.E)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.fromEither.E)))arrow.instances.validated.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.instances.validated.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.instances.validated.applicativeError.fromOption.A)), kotlin.Function0((arrow.instances.validated.applicativeError.fromOption.E)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.fromOption.E)))arrow.instances.validated.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.instances.validated.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.instances.validated.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, arrow.instances.validated.applicativeError.fromTry.E)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.fromTry.E)))arrow.instances.validated.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.instances.validated.applicativeError$handleError(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicativeError.handleError.E)), arrow.instances.validated.applicativeError.handleError.A)), kotlin.Function1((arrow.instances.validated.applicativeError.handleError.E, arrow.instances.validated.applicativeError.handleError.A)), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.handleError.E)))arrow.instances.validated.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.instances.validated.applicativeError$handleErrorWith(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.applicativeError.handleErrorWith.E)), arrow.instances.validated.applicativeError.handleErrorWith.A)), kotlin.Function1((arrow.instances.validated.applicativeError.handleErrorWith.E, arrow.Kind((arrow.Kind((arrow.data.ForValidated, )), arrow.instances.validated.applicativeError.handleErrorWith.A)))), arrow.typeclasses.Semigroup((arrow.instances.validated.applicativeError.handleErrorWith.E)))arrow.instances.validated.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.instances.validated.eq$eq(arrow.data.Validated.Companion, arrow.typeclasses.Eq((arrow.instances.validated.eq.eq.L)), arrow.typeclasses.Eq((arrow.instances.validated.eq.eq.R)))arrow.instances.validated.eq/arrow.data.-validated/eq.html
$dokka.location:arrow.instances.validated.eq$neqv(arrow.data.Validated((arrow.instances.validated.eq.neqv.L, arrow.instances.validated.eq.neqv.R)), arrow.data.Validated((arrow.instances.validated.eq.neqv.L, arrow.instances.validated.eq.neqv.R)), arrow.typeclasses.Eq((arrow.instances.validated.eq.neqv.L)), arrow.typeclasses.Eq((arrow.instances.validated.eq.neqv.R)))arrow.instances.validated.eq/arrow.data.-validated/neqv.html
$dokka.location:arrow.instances.validated.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.combineAll.E)), arrow.instances.validated.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.validated.foldable.combineAll.A)))arrow.instances.validated.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.validated.foldable$exists(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.exists.E)), arrow.instances.validated.foldable.exists.A)), kotlin.Function1((arrow.instances.validated.foldable.exists.A, kotlin.Boolean)))arrow.instances.validated.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.validated.foldable$find(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.find.E)), arrow.instances.validated.foldable.find.A)), kotlin.Function1((arrow.instances.validated.foldable.find.A, kotlin.Boolean)))arrow.instances.validated.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.validated.foldable$fold(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.fold.E)), arrow.instances.validated.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.validated.foldable.fold.A)))arrow.instances.validated.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.validated.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.foldLeft.E)), arrow.instances.validated.foldable.foldLeft.A)), arrow.instances.validated.foldable.foldLeft.B, kotlin.Function2((arrow.instances.validated.foldable.foldLeft.B, arrow.instances.validated.foldable.foldLeft.A, )))arrow.instances.validated.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.validated.foldable$foldM(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.foldM.E)), arrow.instances.validated.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.validated.foldable.foldM.G)), arrow.instances.validated.foldable.foldM.B, kotlin.Function2((arrow.instances.validated.foldable.foldM.B, arrow.instances.validated.foldable.foldM.A, arrow.Kind((arrow.instances.validated.foldable.foldM.G, )))))arrow.instances.validated.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.validated.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.foldMap.E)), arrow.instances.validated.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.validated.foldable.foldMap.B)), kotlin.Function1((arrow.instances.validated.foldable.foldMap.A, arrow.instances.validated.foldable.foldMap.B)))arrow.instances.validated.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.validated.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.foldMapM.E)), arrow.instances.validated.foldable.foldMapM.A)), arrow.instances.validated.foldable.foldMapM.MA, arrow.instances.validated.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.validated.foldable.foldMapM.A, arrow.Kind((arrow.instances.validated.foldable.foldMapM.G, arrow.instances.validated.foldable.foldMapM.B)))))arrow.instances.validated.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.validated.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.foldRight.E)), arrow.instances.validated.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.validated.foldable.foldRight.B)), kotlin.Function2((arrow.instances.validated.foldable.foldRight.A, arrow.core.Eval((arrow.instances.validated.foldable.foldRight.B)), )))arrow.instances.validated.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.validated.foldable$foldable(arrow.data.Validated.Companion)arrow.instances.validated.foldable/arrow.data.-validated/foldable.html
$dokka.location:arrow.instances.validated.foldable$forAll(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.forAll.E)), arrow.instances.validated.foldable.forAll.A)), kotlin.Function1((arrow.instances.validated.foldable.forAll.A, kotlin.Boolean)))arrow.instances.validated.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.validated.foldable$get(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.get.E)), arrow.instances.validated.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.validated.foldable.get.A)))), kotlin.Long)arrow.instances.validated.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.validated.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.isEmpty.E)), arrow.instances.validated.foldable.isEmpty.A)))arrow.instances.validated.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.validated.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.nonEmpty.E)), arrow.instances.validated.foldable.nonEmpty.A)))arrow.instances.validated.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.validated.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.reduceLeftOption.E)), arrow.instances.validated.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.validated.foldable.reduceLeftOption.A, , )))arrow.instances.validated.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.validated.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.reduceLeftToOption.E)), arrow.instances.validated.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.validated.foldable.reduceLeftToOption.A, arrow.instances.validated.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.validated.foldable.reduceLeftToOption.B, arrow.instances.validated.foldable.reduceLeftToOption.A, )))arrow.instances.validated.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.validated.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.reduceRightOption.E)), arrow.instances.validated.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.validated.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.validated.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.validated.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.reduceRightToOption.E)), arrow.instances.validated.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.validated.foldable.reduceRightToOption.A, arrow.instances.validated.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.validated.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.validated.foldable.reduceRightToOption.B)), )))arrow.instances.validated.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.validated.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.sequence_.E)), arrow.Kind((arrow.instances.validated.foldable.sequence_.G, arrow.instances.validated.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.validated.foldable.sequence_.G)))arrow.instances.validated.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.validated.foldable$size(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.size.E)), arrow.instances.validated.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.validated.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.validated.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.foldable.traverse_.E)), arrow.instances.validated.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.validated.foldable.traverse_.G)), kotlin.Function1((arrow.instances.validated.foldable.traverse_.A, arrow.Kind((arrow.instances.validated.foldable.traverse_.G, arrow.instances.validated.foldable.traverse_.B)))))arrow.instances.validated.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.validated.functor$as(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.as.E)), arrow.instances.validated.functor.as.A)), arrow.instances.validated.functor.as.B)arrow.instances.validated.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.validated.functor$fproduct(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.fproduct.E)), arrow.instances.validated.functor.fproduct.A)), kotlin.Function1((arrow.instances.validated.functor.fproduct.A, arrow.instances.validated.functor.fproduct.B)))arrow.instances.validated.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.validated.functor$functor(arrow.data.Validated.Companion)arrow.instances.validated.functor/arrow.data.-validated/functor.html
$dokka.location:arrow.instances.validated.functor$imap(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.imap.E)), arrow.instances.validated.functor.imap.A)), kotlin.Function1((arrow.instances.validated.functor.imap.A, arrow.instances.validated.functor.imap.B)), kotlin.Function1((arrow.instances.validated.functor.imap.B, arrow.instances.validated.functor.imap.A)))arrow.instances.validated.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.validated.functor$map(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.map.E)), arrow.instances.validated.functor.map.A)), kotlin.Function1((arrow.instances.validated.functor.map.A, arrow.instances.validated.functor.map.B)))arrow.instances.validated.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.validated.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.tupleLeft.E)), arrow.instances.validated.functor.tupleLeft.A)), arrow.instances.validated.functor.tupleLeft.B)arrow.instances.validated.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.validated.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.tupleRight.E)), arrow.instances.validated.functor.tupleRight.A)), arrow.instances.validated.functor.tupleRight.B)arrow.instances.validated.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.validated.functor$void(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.void.E)), arrow.instances.validated.functor.void.A)))arrow.instances.validated.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.validated.functor$widen(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.functor.widen.E)), arrow.instances.validated.functor.widen.A)))arrow.instances.validated.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.validated.hash$hash(arrow.data.Validated.Companion, arrow.typeclasses.Hash((arrow.instances.validated.hash.hash.L)), arrow.typeclasses.Hash((arrow.instances.validated.hash.hash.R)))arrow.instances.validated.hash/arrow.data.-validated/hash.html
$dokka.location:arrow.instances.validated.semigroupK$combineK(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.semigroupK.combineK.E)), arrow.instances.validated.semigroupK.combineK.A)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.semigroupK.combineK.E)), arrow.instances.validated.semigroupK.combineK.A)), arrow.typeclasses.Semigroup((arrow.instances.validated.semigroupK.combineK.E)))arrow.instances.validated.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.validated.semigroupK$semigroupK(arrow.data.Validated.Companion, arrow.typeclasses.Semigroup((arrow.instances.validated.semigroupK.semigroupK.E)))arrow.instances.validated.semigroup-k/arrow.data.-validated/semigroup-k.html
$dokka.location:arrow.instances.validated.show$show(arrow.data.Validated.Companion)arrow.instances.validated.show/arrow.data.-validated/show.html
$dokka.location:arrow.instances.validated.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.traverse.flatTraverse.E)), arrow.instances.validated.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.traverse.flatTraverse.E)))), arrow.typeclasses.Applicative((arrow.instances.validated.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.validated.traverse.flatTraverse.A, arrow.Kind((arrow.instances.validated.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.traverse.flatTraverse.E)), arrow.instances.validated.traverse.flatTraverse.B)))))))arrow.instances.validated.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.validated.traverse$map(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.traverse.map.E)), arrow.instances.validated.traverse.map.A)), kotlin.Function1((arrow.instances.validated.traverse.map.A, arrow.instances.validated.traverse.map.B)))arrow.instances.validated.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.validated.traverse$sequence(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.traverse.sequence.E)), arrow.Kind((arrow.instances.validated.traverse.sequence.G, arrow.instances.validated.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.validated.traverse.sequence.G)))arrow.instances.validated.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.validated.traverse$traverse(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.instances.validated.traverse.traverse.E)), arrow.instances.validated.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.validated.traverse.traverse.G)), kotlin.Function1((arrow.instances.validated.traverse.traverse.A, arrow.Kind((arrow.instances.validated.traverse.traverse.G, arrow.instances.validated.traverse.traverse.B)))))arrow.instances.validated.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.validated.traverse$traverse(arrow.data.Validated.Companion)arrow.instances.validated.traverse/arrow.data.-validated/traverse.html
$dokka.location:arrow.instances.writert.applicative$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.ap.F)), arrow.instances.writert.applicative.ap.W)), arrow.instances.writert.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.ap.F)), arrow.instances.writert.applicative.ap.W)), kotlin.Function1((arrow.instances.writert.applicative.ap.A, arrow.instances.writert.applicative.ap.B)))), arrow.typeclasses.Monad((arrow.instances.writert.applicative.ap.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.ap.W)))arrow.instances.writert.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.writert.applicative$applicative(arrow.data.WriterT.Companion, arrow.typeclasses.Monad((arrow.instances.writert.applicative.applicative.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.applicative.W)))arrow.instances.writert.applicative/arrow.data.-writer-t/applicative.html
$dokka.location:arrow.instances.writert.applicative$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.map.F)), arrow.instances.writert.applicative.map.W)), arrow.instances.writert.applicative.map.A)), kotlin.Function1((arrow.instances.writert.applicative.map.A, arrow.instances.writert.applicative.map.B)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.map.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.map.W)))arrow.instances.writert.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.writert.applicative$map2(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.map2.F)), arrow.instances.writert.applicative.map2.W)), arrow.instances.writert.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.map2.F)), arrow.instances.writert.applicative.map2.W)), arrow.instances.writert.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.writert.applicative.map2.A, arrow.instances.writert.applicative.map2.B)), arrow.instances.writert.applicative.map2.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.map2.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.map2.W)))arrow.instances.writert.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.writert.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.map2Eval.F)), arrow.instances.writert.applicative.map2Eval.W)), arrow.instances.writert.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.map2Eval.F)), arrow.instances.writert.applicative.map2Eval.W)), arrow.instances.writert.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.writert.applicative.map2Eval.A, arrow.instances.writert.applicative.map2Eval.B)), arrow.instances.writert.applicative.map2Eval.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.map2Eval.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.map2Eval.W)))arrow.instances.writert.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.writert.applicative$plus(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.plus.F)), arrow.instances.writert.applicative.plus.W)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.plus.F)), arrow.instances.writert.applicative.plus.W)), java.math.BigDecimal)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.plus.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.plus.W)))arrow.instances.writert.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple2((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple3((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple4((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C, arrow.instances.writert.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple5((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C, arrow.instances.writert.applicative.product.D, arrow.instances.writert.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple6((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C, arrow.instances.writert.applicative.product.D, arrow.instances.writert.applicative.product.E, arrow.instances.writert.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple7((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C, arrow.instances.writert.applicative.product.D, arrow.instances.writert.applicative.product.E, arrow.instances.writert.applicative.product.FF, arrow.instances.writert.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple8((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C, arrow.instances.writert.applicative.product.D, arrow.instances.writert.applicative.product.E, arrow.instances.writert.applicative.product.FF, arrow.instances.writert.applicative.product.G, arrow.instances.writert.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.core.Tuple9((arrow.instances.writert.applicative.product.A, arrow.instances.writert.applicative.product.B, arrow.instances.writert.applicative.product.C, arrow.instances.writert.applicative.product.D, arrow.instances.writert.applicative.product.E, arrow.instances.writert.applicative.product.FF, arrow.instances.writert.applicative.product.G, arrow.instances.writert.applicative.product.H, arrow.instances.writert.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.Z)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.applicative$product(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.applicative.product.F)), arrow.instances.writert.applicative.product.W)), arrow.instances.writert.applicative.product.B)), arrow.typeclasses.Monad((arrow.instances.writert.applicative.product.F)), arrow.typeclasses.Monoid((arrow.instances.writert.applicative.product.W)))arrow.instances.writert.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.writert.functor$as(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.as.F)), arrow.instances.writert.functor.as.W)), arrow.instances.writert.functor.as.A)), arrow.instances.writert.functor.as.B, arrow.typeclasses.Functor((arrow.instances.writert.functor.as.F)))arrow.instances.writert.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.writert.functor$fproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.fproduct.F)), arrow.instances.writert.functor.fproduct.W)), arrow.instances.writert.functor.fproduct.A)), kotlin.Function1((arrow.instances.writert.functor.fproduct.A, arrow.instances.writert.functor.fproduct.B)), arrow.typeclasses.Functor((arrow.instances.writert.functor.fproduct.F)))arrow.instances.writert.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.writert.functor$functor(arrow.data.WriterT.Companion, arrow.typeclasses.Functor((arrow.instances.writert.functor.functor.F)))arrow.instances.writert.functor/arrow.data.-writer-t/functor.html
$dokka.location:arrow.instances.writert.functor$imap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.imap.F)), arrow.instances.writert.functor.imap.W)), arrow.instances.writert.functor.imap.A)), kotlin.Function1((arrow.instances.writert.functor.imap.A, arrow.instances.writert.functor.imap.B)), kotlin.Function1((arrow.instances.writert.functor.imap.B, arrow.instances.writert.functor.imap.A)), arrow.typeclasses.Functor((arrow.instances.writert.functor.imap.F)))arrow.instances.writert.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.writert.functor$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.map.F)), arrow.instances.writert.functor.map.W)), arrow.instances.writert.functor.map.A)), kotlin.Function1((arrow.instances.writert.functor.map.A, arrow.instances.writert.functor.map.B)), arrow.typeclasses.Functor((arrow.instances.writert.functor.map.F)))arrow.instances.writert.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.writert.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.tupleLeft.F)), arrow.instances.writert.functor.tupleLeft.W)), arrow.instances.writert.functor.tupleLeft.A)), arrow.instances.writert.functor.tupleLeft.B, arrow.typeclasses.Functor((arrow.instances.writert.functor.tupleLeft.F)))arrow.instances.writert.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.writert.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.tupleRight.F)), arrow.instances.writert.functor.tupleRight.W)), arrow.instances.writert.functor.tupleRight.A)), arrow.instances.writert.functor.tupleRight.B, arrow.typeclasses.Functor((arrow.instances.writert.functor.tupleRight.F)))arrow.instances.writert.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.writert.functor$void(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.void.F)), arrow.instances.writert.functor.void.W)), arrow.instances.writert.functor.void.A)), arrow.typeclasses.Functor((arrow.instances.writert.functor.void.F)))arrow.instances.writert.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.writert.functor$widen(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.functor.widen.F)), arrow.instances.writert.functor.widen.W)), arrow.instances.writert.functor.widen.A)), arrow.typeclasses.Functor((arrow.instances.writert.functor.widen.F)))arrow.instances.writert.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.writert.monad$ap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.ap.F)), arrow.instances.writert.monad.ap.W)), arrow.instances.writert.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.ap.F)), arrow.instances.writert.monad.ap.W)), kotlin.Function1((arrow.instances.writert.monad.ap.A, arrow.instances.writert.monad.ap.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.ap.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.ap.W)))arrow.instances.writert.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.writert.monad$effectM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.effectM.F)), arrow.instances.writert.monad.effectM.W)), arrow.instances.writert.monad.effectM.A)), kotlin.Function1((arrow.instances.writert.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.effectM.F)), arrow.instances.writert.monad.effectM.W)), arrow.instances.writert.monad.effectM.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.effectM.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.effectM.W)))arrow.instances.writert.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.writert.monad$flatMap(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.flatMap.F)), arrow.instances.writert.monad.flatMap.W)), arrow.instances.writert.monad.flatMap.A)), kotlin.Function1((arrow.instances.writert.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.flatMap.F)), arrow.instances.writert.monad.flatMap.W)), arrow.instances.writert.monad.flatMap.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.flatMap.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.flatMap.W)))arrow.instances.writert.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.writert.monad$flatten(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.flatten.F)), arrow.instances.writert.monad.flatten.W)), arrow.Kind((, arrow.instances.writert.monad.flatten.A)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.flatten.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.flatten.W)))arrow.instances.writert.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.writert.monad$followedBy(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.followedBy.F)), arrow.instances.writert.monad.followedBy.W)), arrow.instances.writert.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.followedBy.F)), arrow.instances.writert.monad.followedBy.W)), arrow.instances.writert.monad.followedBy.B)), arrow.typeclasses.Monad((arrow.instances.writert.monad.followedBy.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.followedBy.W)))arrow.instances.writert.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.writert.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.followedByEval.F)), arrow.instances.writert.monad.followedByEval.W)), arrow.instances.writert.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.followedByEval.F)), arrow.instances.writert.monad.followedByEval.W)), arrow.instances.writert.monad.followedByEval.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.followedByEval.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.followedByEval.W)))arrow.instances.writert.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.writert.monad$forEffect(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.forEffect.F)), arrow.instances.writert.monad.forEffect.W)), arrow.instances.writert.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.forEffect.F)), arrow.instances.writert.monad.forEffect.W)), arrow.instances.writert.monad.forEffect.B)), arrow.typeclasses.Monad((arrow.instances.writert.monad.forEffect.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.forEffect.W)))arrow.instances.writert.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.writert.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.forEffectEval.F)), arrow.instances.writert.monad.forEffectEval.W)), arrow.instances.writert.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.forEffectEval.F)), arrow.instances.writert.monad.forEffectEval.W)), arrow.instances.writert.monad.forEffectEval.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.forEffectEval.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.forEffectEval.W)))arrow.instances.writert.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.writert.monad$ifM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.ifM.F)), arrow.instances.writert.monad.ifM.W)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.ifM.F)), arrow.instances.writert.monad.ifM.W)), arrow.instances.writert.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.ifM.F)), arrow.instances.writert.monad.ifM.W)), arrow.instances.writert.monad.ifM.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.ifM.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.ifM.W)))arrow.instances.writert.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.writert.monad$map(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.map.F)), arrow.instances.writert.monad.map.W)), arrow.instances.writert.monad.map.A)), kotlin.Function1((arrow.instances.writert.monad.map.A, arrow.instances.writert.monad.map.B)), arrow.typeclasses.Monad((arrow.instances.writert.monad.map.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.map.W)))arrow.instances.writert.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.writert.monad$monad(arrow.data.WriterT.Companion, arrow.typeclasses.Monad((arrow.instances.writert.monad.monad.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.monad.W)))arrow.instances.writert.monad/arrow.data.-writer-t/monad.html
$dokka.location:arrow.instances.writert.monad$mproduct(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.mproduct.F)), arrow.instances.writert.monad.mproduct.W)), arrow.instances.writert.monad.mproduct.A)), kotlin.Function1((arrow.instances.writert.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.monad.mproduct.F)), arrow.instances.writert.monad.mproduct.W)), arrow.instances.writert.monad.mproduct.B)))), arrow.typeclasses.Monad((arrow.instances.writert.monad.mproduct.F)), arrow.typeclasses.Monoid((arrow.instances.writert.monad.mproduct.W)))arrow.instances.writert.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.writert.monoidK$monoidK(arrow.data.WriterT.Companion, arrow.typeclasses.MonoidK((arrow.instances.writert.monoidK.monoidK.F)))arrow.instances.writert.monoid-k/arrow.data.-writer-t/monoid-k.html
$dokka.location:arrow.instances.writert.semigroupK$combineK(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.semigroupK.combineK.F)), arrow.instances.writert.semigroupK.combineK.W)), arrow.instances.writert.semigroupK.combineK.A)), arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.instances.writert.semigroupK.combineK.F)), arrow.instances.writert.semigroupK.combineK.W)), arrow.instances.writert.semigroupK.combineK.A)), arrow.typeclasses.SemigroupK((arrow.instances.writert.semigroupK.combineK.F)))arrow.instances.writert.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.writert.semigroupK$semigroupK(arrow.data.WriterT.Companion, arrow.typeclasses.SemigroupK((arrow.instances.writert.semigroupK.semigroupK.F)))arrow.instances.writert.semigroup-k/arrow.data.-writer-t/semigroup-k.html
arrow.instances
arrow.instances.cokleisli.contravariant
arrow.instances.cokleisli.profunctor
arrow.instances.coproduct.comonad
arrow.instances.coproduct.contravariant
arrow.instances.coproduct.eq
arrow.instances.coproduct.foldable
arrow.instances.coproduct.functor
arrow.instances.coproduct.hash
arrow.instances.coproduct.traverse
arrow.instances.day.applicative
arrow.instances.day.comonad
arrow.instances.day.functor
arrow.instances.ior.applicative
arrow.instances.ior.bifunctor
arrow.instances.ior.eq
arrow.instances.ior.foldable
arrow.instances.ior.functor
arrow.instances.ior.hash
arrow.instances.ior.monad
arrow.instances.ior.show
arrow.instances.ior.traverse
arrow.instances.kleisli.applicative
arrow.instances.kleisli.applicativeError
arrow.instances.kleisli.contravariant
arrow.instances.kleisli.functor
arrow.instances.kleisli.monad
arrow.instances.kleisli.monadError
arrow.instances.list.applicative
arrow.instances.list.eq
arrow.instances.list.foldable
arrow.instances.list.functor
arrow.instances.list.hash
arrow.instances.list.monad
arrow.instances.list.monoid
arrow.instances.list.monoidK
arrow.instances.list.semigroup
arrow.instances.list.semigroupK
arrow.instances.list.show
arrow.instances.list.traverse
arrow.instances.listk.applicative
arrow.instances.listk.eq
arrow.instances.listk.foldable
arrow.instances.listk.functor
arrow.instances.listk.hash
arrow.instances.listk.monad
arrow.instances.listk.monoid
arrow.instances.listk.monoidK
arrow.instances.listk.semigroup
arrow.instances.listk.semigroupK
arrow.instances.listk.show
arrow.instances.listk.traverse
arrow.instances.mapk.eq
arrow.instances.mapk.foldable
arrow.instances.mapk.functor
arrow.instances.mapk.hash
arrow.instances.mapk.monoid
arrow.instances.mapk.semigroup
arrow.instances.mapk.show
arrow.instances.mapk.traverse
arrow.instances.moore.comonad
arrow.instances.moore.functor
arrow.instances.nonemptylist.applicative
arrow.instances.nonemptylist.bimonad
arrow.instances.nonemptylist.comonad
arrow.instances.nonemptylist.eq
arrow.instances.nonemptylist.foldable
arrow.instances.nonemptylist.functor
arrow.instances.nonemptylist.hash
arrow.instances.nonemptylist.monad
arrow.instances.nonemptylist.semigroup
arrow.instances.nonemptylist.semigroupK
arrow.instances.nonemptylist.show
arrow.instances.nonemptylist.traverse
arrow.instances.optiont.applicative
arrow.instances.optiont.foldable
arrow.instances.optiont.functor
arrow.instances.optiont.monad
arrow.instances.optiont.monoidK
arrow.instances.optiont.semigroupK
arrow.instances.optiont.traverse
arrow.instances.sequence.applicative
arrow.instances.sequence.eq
arrow.instances.sequence.foldable
arrow.instances.sequence.functor
arrow.instances.sequence.monad
arrow.instances.sequence.monoid
arrow.instances.sequence.monoidK
arrow.instances.sequence.semigroup
arrow.instances.sequence.semigroupK
arrow.instances.sequence.traverse
arrow.instances.sequencek.applicative
arrow.instances.sequencek.eq
arrow.instances.sequencek.foldable
arrow.instances.sequencek.functor
arrow.instances.sequencek.hash
arrow.instances.sequencek.monad
arrow.instances.sequencek.monoid
arrow.instances.sequencek.monoidK
arrow.instances.sequencek.semigroup
arrow.instances.sequencek.semigroupK
arrow.instances.sequencek.show
arrow.instances.sequencek.traverse
arrow.instances.set.eq
arrow.instances.set.foldable
arrow.instances.set.monoid
arrow.instances.set.monoidK
arrow.instances.set.semigroup
arrow.instances.set.semigroupK
arrow.instances.setk.eq
arrow.instances.setk.foldable
arrow.instances.setk.hash
arrow.instances.setk.monoid
arrow.instances.setk.monoidK
arrow.instances.setk.semigroup
arrow.instances.setk.semigroupK
arrow.instances.setk.show
arrow.instances.statet.applicative
arrow.instances.statet.applicativeError
arrow.instances.statet.functor
arrow.instances.statet.monad
arrow.instances.statet.monadError
arrow.instances.statet.semigroupK
arrow.instances.store.comonad
arrow.instances.store.functor
arrow.instances.sum.comonad
arrow.instances.sum.eq
arrow.instances.sum.functor
arrow.instances.sum.hash
arrow.instances.validated.applicative
arrow.instances.validated.applicativeError
arrow.instances.validated.eq
arrow.instances.validated.foldable
arrow.instances.validated.functor
arrow.instances.validated.hash
arrow.instances.validated.semigroupK
arrow.instances.validated.show
arrow.instances.validated.traverse
arrow.instances.writert.applicative
arrow.instances.writert.functor
arrow.instances.writert.monad
arrow.instances.writert.monoidK
arrow.instances.writert.semigroupK
