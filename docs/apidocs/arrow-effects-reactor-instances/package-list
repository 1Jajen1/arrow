$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.effects.fluxk.applicative$ap(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.ap.A)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Function1((arrow.effects.fluxk.applicative.ap.A, arrow.effects.fluxk.applicative.ap.B)))))arrow.effects.fluxk.applicative/arrow.-kind/ap.html
$dokka.location:arrow.effects.fluxk.applicative$map(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.map.A)), kotlin.Function1((arrow.effects.fluxk.applicative.map.A, arrow.effects.fluxk.applicative.map.B)))arrow.effects.fluxk.applicative/arrow.-kind/map.html
$dokka.location:arrow.effects.fluxk.applicative$map2(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.map2.A)), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.effects.fluxk.applicative.map2.A, arrow.effects.fluxk.applicative.map2.B)), arrow.effects.fluxk.applicative.map2.Z)))arrow.effects.fluxk.applicative/arrow.-kind/map2.html
$dokka.location:arrow.effects.fluxk.applicative$map2Eval(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.effects.fluxk.applicative.map2Eval.A, arrow.effects.fluxk.applicative.map2Eval.B)), arrow.effects.fluxk.applicative.map2Eval.Z)))arrow.effects.fluxk.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.effects.fluxk.applicative$plus(arrow.Kind((arrow.effects.ForFluxK, java.math.BigDecimal)), arrow.Kind((arrow.effects.ForFluxK, java.math.BigDecimal)))arrow.effects.fluxk.applicative/arrow.-kind/plus.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple2((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple3((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple4((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C, arrow.effects.fluxk.applicative.product.D)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple5((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C, arrow.effects.fluxk.applicative.product.D, arrow.effects.fluxk.applicative.product.E)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple6((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C, arrow.effects.fluxk.applicative.product.D, arrow.effects.fluxk.applicative.product.E, arrow.effects.fluxk.applicative.product.FF)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple7((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C, arrow.effects.fluxk.applicative.product.D, arrow.effects.fluxk.applicative.product.E, arrow.effects.fluxk.applicative.product.FF, arrow.effects.fluxk.applicative.product.G)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple8((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C, arrow.effects.fluxk.applicative.product.D, arrow.effects.fluxk.applicative.product.E, arrow.effects.fluxk.applicative.product.FF, arrow.effects.fluxk.applicative.product.G, arrow.effects.fluxk.applicative.product.H)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.core.Tuple9((arrow.effects.fluxk.applicative.product.A, arrow.effects.fluxk.applicative.product.B, arrow.effects.fluxk.applicative.product.C, arrow.effects.fluxk.applicative.product.D, arrow.effects.fluxk.applicative.product.E, arrow.effects.fluxk.applicative.product.FF, arrow.effects.fluxk.applicative.product.G, arrow.effects.fluxk.applicative.product.H, arrow.effects.fluxk.applicative.product.I)))), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.Z)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicative$product(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.A)), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicative.product.B)))arrow.effects.fluxk.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.fluxk.applicativeError$attempt(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicativeError.attempt.A)))arrow.effects.fluxk.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.effects.fluxk.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.effects.ForFluxK, kotlin.Throwable)), kotlin.Function0((arrow.effects.fluxk.applicativeError.catch.A)))arrow.effects.fluxk.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.effects.fluxk.applicativeError$fromEither(arrow.core.Either((arrow.effects.fluxk.applicativeError.fromEither.EE, arrow.effects.fluxk.applicativeError.fromEither.A)), kotlin.Function1((arrow.effects.fluxk.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.effects.fluxk.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.effects.fluxk.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.effects.fluxk.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.effects.fluxk.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.effects.fluxk.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.effects.fluxk.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.effects.fluxk.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.effects.fluxk.applicativeError$handleError(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.fluxk.applicativeError.handleError.A)))arrow.effects.fluxk.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.effects.fluxk.applicativeError$handleErrorWith(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.applicativeError.handleErrorWith.A)))))arrow.effects.fluxk.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects.fluxk.applicativeError$raiseError(kotlin.Throwable)arrow.effects.fluxk.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.effects.fluxk.async$continueOn(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.async.continueOn.A)), kotlin.coroutines.CoroutineContext)arrow.effects.fluxk.async/arrow.-kind/continue-on.html
$dokka.location:arrow.effects.fluxk.bracket$bracket(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.bracket.A)), kotlin.Function1((arrow.effects.fluxk.bracket.bracket.A, arrow.Kind((arrow.effects.ForFluxK, kotlin.Unit)))), kotlin.Function1((arrow.effects.fluxk.bracket.bracket.A, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.bracket.B)))))arrow.effects.fluxk.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.effects.fluxk.bracket$bracketCase(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.bracketCase.A)), kotlin.Function2((arrow.effects.fluxk.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Unit)))), kotlin.Function1((arrow.effects.fluxk.bracket.bracketCase.A, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.bracketCase.B)))))arrow.effects.fluxk.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.effects.fluxk.bracket$guarantee(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.guarantee.A)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Unit)))arrow.effects.fluxk.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.effects.fluxk.bracket$guaranteeCase(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Unit)))))arrow.effects.fluxk.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.effects.fluxk.bracket$uncancelable(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.bracket.uncancelable.A)))arrow.effects.fluxk.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.effects.fluxk.concurrentEffect$runAsyncCancellable(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.concurrentEffect.runAsyncCancellable.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.fluxk.concurrentEffect.runAsyncCancellable.A)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Unit)))))arrow.effects.fluxk.concurrent-effect/arrow.-kind/run-async-cancellable.html
$dokka.location:arrow.effects.fluxk.effect$runAsync(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.effect.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.fluxk.effect.runAsync.A)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Unit)))))arrow.effects.fluxk.effect/arrow.-kind/run-async.html
$dokka.location:arrow.effects.fluxk.foldable$combineAll(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.effects.fluxk.foldable.combineAll.A)))arrow.effects.fluxk.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.effects.fluxk.foldable$exists(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.exists.A)), kotlin.Function1((arrow.effects.fluxk.foldable.exists.A, kotlin.Boolean)))arrow.effects.fluxk.foldable/arrow.-kind/exists.html
$dokka.location:arrow.effects.fluxk.foldable$find(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.find.A)), kotlin.Function1((arrow.effects.fluxk.foldable.find.A, kotlin.Boolean)))arrow.effects.fluxk.foldable/arrow.-kind/find.html
$dokka.location:arrow.effects.fluxk.foldable$fold(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.effects.fluxk.foldable.fold.A)))arrow.effects.fluxk.foldable/arrow.-kind/fold.html
$dokka.location:arrow.effects.fluxk.foldable$foldLeft(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.foldLeft.A)), arrow.effects.fluxk.foldable.foldLeft.B, kotlin.Function2((arrow.effects.fluxk.foldable.foldLeft.B, arrow.effects.fluxk.foldable.foldLeft.A, )))arrow.effects.fluxk.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.effects.fluxk.foldable$foldM(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.effects.fluxk.foldable.foldM.G)), arrow.effects.fluxk.foldable.foldM.B, kotlin.Function2((arrow.effects.fluxk.foldable.foldM.B, arrow.effects.fluxk.foldable.foldM.A, arrow.Kind((arrow.effects.fluxk.foldable.foldM.G, )))))arrow.effects.fluxk.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.effects.fluxk.foldable$foldMap(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.effects.fluxk.foldable.foldMap.B)), kotlin.Function1((arrow.effects.fluxk.foldable.foldMap.A, arrow.effects.fluxk.foldable.foldMap.B)))arrow.effects.fluxk.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.effects.fluxk.foldable$foldMapM(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.foldMapM.A)), arrow.effects.fluxk.foldable.foldMapM.MA, arrow.effects.fluxk.foldable.foldMapM.MO, kotlin.Function1((arrow.effects.fluxk.foldable.foldMapM.A, arrow.Kind((arrow.effects.fluxk.foldable.foldMapM.G, arrow.effects.fluxk.foldable.foldMapM.B)))))arrow.effects.fluxk.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.effects.fluxk.foldable$foldRight(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.foldRight.A)), arrow.core.Eval((arrow.effects.fluxk.foldable.foldRight.B)), kotlin.Function2((arrow.effects.fluxk.foldable.foldRight.A, arrow.core.Eval((arrow.effects.fluxk.foldable.foldRight.B)), )))arrow.effects.fluxk.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.effects.fluxk.foldable$forAll(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.forAll.A)), kotlin.Function1((arrow.effects.fluxk.foldable.forAll.A, kotlin.Boolean)))arrow.effects.fluxk.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.effects.fluxk.foldable$get(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.effects.fluxk.foldable.get.A)))), kotlin.Long)arrow.effects.fluxk.foldable/arrow.-kind/get.html
$dokka.location:arrow.effects.fluxk.foldable$isEmpty(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.isEmpty.A)))arrow.effects.fluxk.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.effects.fluxk.foldable$nonEmpty(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.nonEmpty.A)))arrow.effects.fluxk.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.effects.fluxk.foldable$reduceLeftOption(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.effects.fluxk.foldable.reduceLeftOption.A, , )))arrow.effects.fluxk.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.effects.fluxk.foldable$reduceLeftToOption(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.effects.fluxk.foldable.reduceLeftToOption.A, arrow.effects.fluxk.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.effects.fluxk.foldable.reduceLeftToOption.B, arrow.effects.fluxk.foldable.reduceLeftToOption.A, )))arrow.effects.fluxk.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.effects.fluxk.foldable$reduceRightOption(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.reduceRightOption.A)), kotlin.Function2((arrow.effects.fluxk.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.effects.fluxk.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.effects.fluxk.foldable$reduceRightToOption(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.effects.fluxk.foldable.reduceRightToOption.A, arrow.effects.fluxk.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.effects.fluxk.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.effects.fluxk.foldable.reduceRightToOption.B)), )))arrow.effects.fluxk.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.effects.fluxk.foldable$sequence_(arrow.Kind((arrow.effects.ForFluxK, arrow.Kind((arrow.effects.fluxk.foldable.sequence_.G, arrow.effects.fluxk.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.effects.fluxk.foldable.sequence_.G)))arrow.effects.fluxk.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.effects.fluxk.foldable$size(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.effects.fluxk.foldable/arrow.-kind/size.html
$dokka.location:arrow.effects.fluxk.foldable$traverse_(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.effects.fluxk.foldable.traverse_.G)), kotlin.Function1((arrow.effects.fluxk.foldable.traverse_.A, arrow.Kind((arrow.effects.fluxk.foldable.traverse_.G, arrow.effects.fluxk.foldable.traverse_.B)))))arrow.effects.fluxk.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.effects.fluxk.functor$as(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.as.A)), arrow.effects.fluxk.functor.as.B)arrow.effects.fluxk.functor/arrow.-kind/as.html
$dokka.location:arrow.effects.fluxk.functor$fproduct(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.fproduct.A)), kotlin.Function1((arrow.effects.fluxk.functor.fproduct.A, arrow.effects.fluxk.functor.fproduct.B)))arrow.effects.fluxk.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.effects.fluxk.functor$imap(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.imap.A)), kotlin.Function1((arrow.effects.fluxk.functor.imap.A, arrow.effects.fluxk.functor.imap.B)), kotlin.Function1((arrow.effects.fluxk.functor.imap.B, arrow.effects.fluxk.functor.imap.A)))arrow.effects.fluxk.functor/arrow.-kind/imap.html
$dokka.location:arrow.effects.fluxk.functor$map(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.map.A)), kotlin.Function1((arrow.effects.fluxk.functor.map.A, arrow.effects.fluxk.functor.map.B)))arrow.effects.fluxk.functor/arrow.-kind/map.html
$dokka.location:arrow.effects.fluxk.functor$tupleLeft(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.tupleLeft.A)), arrow.effects.fluxk.functor.tupleLeft.B)arrow.effects.fluxk.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.effects.fluxk.functor$tupleRight(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.tupleRight.A)), arrow.effects.fluxk.functor.tupleRight.B)arrow.effects.fluxk.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.effects.fluxk.functor$void(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.void.A)))arrow.effects.fluxk.functor/arrow.-kind/void.html
$dokka.location:arrow.effects.fluxk.functor$widen(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.functor.widen.A)))arrow.effects.fluxk.functor/arrow.-kind/widen.html
$dokka.location:arrow.effects.fluxk.monad$ap(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.ap.A)), arrow.Kind((arrow.effects.ForFluxK, kotlin.Function1((arrow.effects.fluxk.monad.ap.A, arrow.effects.fluxk.monad.ap.B)))))arrow.effects.fluxk.monad/arrow.-kind/ap.html
$dokka.location:arrow.effects.fluxk.monad$effectM(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.effectM.A)), kotlin.Function1((arrow.effects.fluxk.monad.effectM.A, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.effectM.B)))))arrow.effects.fluxk.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.effects.fluxk.monad$flatMap(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.flatMap.A)), kotlin.Function1((arrow.effects.fluxk.monad.flatMap.A, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.flatMap.B)))))arrow.effects.fluxk.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.effects.fluxk.monad$flatten(arrow.Kind((arrow.effects.ForFluxK, arrow.Kind((, arrow.effects.fluxk.monad.flatten.A)))))arrow.effects.fluxk.monad/arrow.-kind/flatten.html
$dokka.location:arrow.effects.fluxk.monad$followedBy(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.followedBy.A)), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.followedBy.B)))arrow.effects.fluxk.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.effects.fluxk.monad$followedByEval(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.followedByEval.B)))))arrow.effects.fluxk.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.effects.fluxk.monad$forEffect(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.forEffect.A)), arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.forEffect.B)))arrow.effects.fluxk.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.effects.fluxk.monad$forEffectEval(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.forEffectEval.B)))))arrow.effects.fluxk.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.effects.fluxk.monad$ifM(arrow.Kind((arrow.effects.ForFluxK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.ifM.B)))))arrow.effects.fluxk.monad/arrow.-kind/if-m.html
$dokka.location:arrow.effects.fluxk.monad$map(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.map.A)), kotlin.Function1((arrow.effects.fluxk.monad.map.A, arrow.effects.fluxk.monad.map.B)))arrow.effects.fluxk.monad/arrow.-kind/map.html
$dokka.location:arrow.effects.fluxk.monad$mproduct(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.mproduct.A)), kotlin.Function1((arrow.effects.fluxk.monad.mproduct.A, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monad.mproduct.B)))))arrow.effects.fluxk.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.effects.fluxk.monadError$ensure(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.effects.fluxk.monadError.ensure.A, kotlin.Boolean)))arrow.effects.fluxk.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.effects.fluxk.traverse$flatTraverse(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.effects.ForFluxK)), arrow.typeclasses.Applicative((arrow.effects.fluxk.traverse.flatTraverse.G)), kotlin.Function1((arrow.effects.fluxk.traverse.flatTraverse.A, arrow.Kind((arrow.effects.fluxk.traverse.flatTraverse.G, arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.traverse.flatTraverse.B)))))))arrow.effects.fluxk.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.effects.fluxk.traverse$map(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.traverse.map.A)), kotlin.Function1((arrow.effects.fluxk.traverse.map.A, arrow.effects.fluxk.traverse.map.B)))arrow.effects.fluxk.traverse/arrow.-kind/map.html
$dokka.location:arrow.effects.fluxk.traverse$sequence(arrow.Kind((arrow.effects.ForFluxK, arrow.Kind((arrow.effects.fluxk.traverse.sequence.G, arrow.effects.fluxk.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.effects.fluxk.traverse.sequence.G)))arrow.effects.fluxk.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.effects.fluxk.traverse$traverse(arrow.Kind((arrow.effects.ForFluxK, arrow.effects.fluxk.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.effects.fluxk.traverse.traverse.G)), kotlin.Function1((arrow.effects.fluxk.traverse.traverse.A, arrow.Kind((arrow.effects.fluxk.traverse.traverse.G, arrow.effects.fluxk.traverse.traverse.B)))))arrow.effects.fluxk.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.effects.monok.applicative$ap(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.ap.A)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Function1((arrow.effects.monok.applicative.ap.A, arrow.effects.monok.applicative.ap.B)))))arrow.effects.monok.applicative/arrow.-kind/ap.html
$dokka.location:arrow.effects.monok.applicative$map(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.map.A)), kotlin.Function1((arrow.effects.monok.applicative.map.A, arrow.effects.monok.applicative.map.B)))arrow.effects.monok.applicative/arrow.-kind/map.html
$dokka.location:arrow.effects.monok.applicative$map2(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.map2.A)), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.effects.monok.applicative.map2.A, arrow.effects.monok.applicative.map2.B)), arrow.effects.monok.applicative.map2.Z)))arrow.effects.monok.applicative/arrow.-kind/map2.html
$dokka.location:arrow.effects.monok.applicative$map2Eval(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.effects.monok.applicative.map2Eval.A, arrow.effects.monok.applicative.map2Eval.B)), arrow.effects.monok.applicative.map2Eval.Z)))arrow.effects.monok.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.effects.monok.applicative$plus(arrow.Kind((arrow.effects.ForMonoK, java.math.BigDecimal)), arrow.Kind((arrow.effects.ForMonoK, java.math.BigDecimal)))arrow.effects.monok.applicative/arrow.-kind/plus.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple2((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple3((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple4((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C, arrow.effects.monok.applicative.product.D)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple5((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C, arrow.effects.monok.applicative.product.D, arrow.effects.monok.applicative.product.E)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple6((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C, arrow.effects.monok.applicative.product.D, arrow.effects.monok.applicative.product.E, arrow.effects.monok.applicative.product.FF)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple7((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C, arrow.effects.monok.applicative.product.D, arrow.effects.monok.applicative.product.E, arrow.effects.monok.applicative.product.FF, arrow.effects.monok.applicative.product.G)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple8((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C, arrow.effects.monok.applicative.product.D, arrow.effects.monok.applicative.product.E, arrow.effects.monok.applicative.product.FF, arrow.effects.monok.applicative.product.G, arrow.effects.monok.applicative.product.H)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.core.Tuple9((arrow.effects.monok.applicative.product.A, arrow.effects.monok.applicative.product.B, arrow.effects.monok.applicative.product.C, arrow.effects.monok.applicative.product.D, arrow.effects.monok.applicative.product.E, arrow.effects.monok.applicative.product.FF, arrow.effects.monok.applicative.product.G, arrow.effects.monok.applicative.product.H, arrow.effects.monok.applicative.product.I)))), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.Z)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicative$product(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.A)), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicative.product.B)))arrow.effects.monok.applicative/arrow.-kind/product.html
$dokka.location:arrow.effects.monok.applicativeError$attempt(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicativeError.attempt.A)))arrow.effects.monok.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.effects.monok.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.effects.ForMonoK, kotlin.Throwable)), kotlin.Function0((arrow.effects.monok.applicativeError.catch.A)))arrow.effects.monok.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.effects.monok.applicativeError$fromEither(arrow.core.Either((arrow.effects.monok.applicativeError.fromEither.EE, arrow.effects.monok.applicativeError.fromEither.A)), kotlin.Function1((arrow.effects.monok.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.effects.monok.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.effects.monok.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.effects.monok.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.effects.monok.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.effects.monok.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.effects.monok.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.effects.monok.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.effects.monok.applicativeError$handleError(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.effects.monok.applicativeError.handleError.A)))arrow.effects.monok.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.effects.monok.applicativeError$handleErrorWith(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.applicativeError.handleErrorWith.A)))))arrow.effects.monok.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.effects.monok.applicativeError$raiseError(kotlin.Throwable)arrow.effects.monok.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.effects.monok.async$continueOn(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.async.continueOn.A)), kotlin.coroutines.CoroutineContext)arrow.effects.monok.async/arrow.-kind/continue-on.html
$dokka.location:arrow.effects.monok.bracket$bracket(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.bracket.A)), kotlin.Function1((arrow.effects.monok.bracket.bracket.A, arrow.Kind((arrow.effects.ForMonoK, kotlin.Unit)))), kotlin.Function1((arrow.effects.monok.bracket.bracket.A, arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.bracket.B)))))arrow.effects.monok.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.effects.monok.bracket$bracketCase(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.bracketCase.A)), kotlin.Function2((arrow.effects.monok.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Unit)))), kotlin.Function1((arrow.effects.monok.bracket.bracketCase.A, arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.bracketCase.B)))))arrow.effects.monok.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.effects.monok.bracket$guarantee(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.guarantee.A)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Unit)))arrow.effects.monok.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.effects.monok.bracket$guaranteeCase(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Unit)))))arrow.effects.monok.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.effects.monok.bracket$uncancelable(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.bracket.uncancelable.A)))arrow.effects.monok.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.effects.monok.concurrentEffect$runAsyncCancellable(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.concurrentEffect.runAsyncCancellable.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.monok.concurrentEffect.runAsyncCancellable.A)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Unit)))))arrow.effects.monok.concurrent-effect/arrow.-kind/run-async-cancellable.html
$dokka.location:arrow.effects.monok.effect$runAsync(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.effect.runAsync.A)), kotlin.Function1((arrow.core.Either((kotlin.Throwable, arrow.effects.monok.effect.runAsync.A)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Unit)))))arrow.effects.monok.effect/arrow.-kind/run-async.html
$dokka.location:arrow.effects.monok.functor$as(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.as.A)), arrow.effects.monok.functor.as.B)arrow.effects.monok.functor/arrow.-kind/as.html
$dokka.location:arrow.effects.monok.functor$fproduct(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.fproduct.A)), kotlin.Function1((arrow.effects.monok.functor.fproduct.A, arrow.effects.monok.functor.fproduct.B)))arrow.effects.monok.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.effects.monok.functor$imap(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.imap.A)), kotlin.Function1((arrow.effects.monok.functor.imap.A, arrow.effects.monok.functor.imap.B)), kotlin.Function1((arrow.effects.monok.functor.imap.B, arrow.effects.monok.functor.imap.A)))arrow.effects.monok.functor/arrow.-kind/imap.html
$dokka.location:arrow.effects.monok.functor$map(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.map.A)), kotlin.Function1((arrow.effects.monok.functor.map.A, arrow.effects.monok.functor.map.B)))arrow.effects.monok.functor/arrow.-kind/map.html
$dokka.location:arrow.effects.monok.functor$tupleLeft(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.tupleLeft.A)), arrow.effects.monok.functor.tupleLeft.B)arrow.effects.monok.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.effects.monok.functor$tupleRight(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.tupleRight.A)), arrow.effects.monok.functor.tupleRight.B)arrow.effects.monok.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.effects.monok.functor$void(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.void.A)))arrow.effects.monok.functor/arrow.-kind/void.html
$dokka.location:arrow.effects.monok.functor$widen(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.functor.widen.A)))arrow.effects.monok.functor/arrow.-kind/widen.html
$dokka.location:arrow.effects.monok.monad$ap(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.ap.A)), arrow.Kind((arrow.effects.ForMonoK, kotlin.Function1((arrow.effects.monok.monad.ap.A, arrow.effects.monok.monad.ap.B)))))arrow.effects.monok.monad/arrow.-kind/ap.html
$dokka.location:arrow.effects.monok.monad$effectM(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.effectM.A)), kotlin.Function1((arrow.effects.monok.monad.effectM.A, arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.effectM.B)))))arrow.effects.monok.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.effects.monok.monad$flatMap(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.flatMap.A)), kotlin.Function1((arrow.effects.monok.monad.flatMap.A, arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.flatMap.B)))))arrow.effects.monok.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.effects.monok.monad$flatten(arrow.Kind((arrow.effects.ForMonoK, arrow.Kind((, arrow.effects.monok.monad.flatten.A)))))arrow.effects.monok.monad/arrow.-kind/flatten.html
$dokka.location:arrow.effects.monok.monad$followedBy(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.followedBy.A)), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.followedBy.B)))arrow.effects.monok.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.effects.monok.monad$followedByEval(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.followedByEval.B)))))arrow.effects.monok.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.effects.monok.monad$forEffect(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.forEffect.A)), arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.forEffect.B)))arrow.effects.monok.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.effects.monok.monad$forEffectEval(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.forEffectEval.B)))))arrow.effects.monok.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.effects.monok.monad$ifM(arrow.Kind((arrow.effects.ForMonoK, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.ifM.B)))))arrow.effects.monok.monad/arrow.-kind/if-m.html
$dokka.location:arrow.effects.monok.monad$map(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.map.A)), kotlin.Function1((arrow.effects.monok.monad.map.A, arrow.effects.monok.monad.map.B)))arrow.effects.monok.monad/arrow.-kind/map.html
$dokka.location:arrow.effects.monok.monad$mproduct(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.mproduct.A)), kotlin.Function1((arrow.effects.monok.monad.mproduct.A, arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monad.mproduct.B)))))arrow.effects.monok.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.effects.monok.monadError$ensure(arrow.Kind((arrow.effects.ForMonoK, arrow.effects.monok.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.effects.monok.monadError.ensure.A, kotlin.Boolean)))arrow.effects.monok.monad-error/arrow.-kind/ensure.html
arrow.effects
arrow.effects.fluxk.applicative
arrow.effects.fluxk.applicativeError
arrow.effects.fluxk.async
arrow.effects.fluxk.bracket
arrow.effects.fluxk.concurrentEffect
arrow.effects.fluxk.effect
arrow.effects.fluxk.foldable
arrow.effects.fluxk.functor
arrow.effects.fluxk.monad
arrow.effects.fluxk.monadDefer
arrow.effects.fluxk.monadError
arrow.effects.fluxk.monadThrow
arrow.effects.fluxk.traverse
arrow.effects.monok.applicative
arrow.effects.monok.applicativeError
arrow.effects.monok.async
arrow.effects.monok.bracket
arrow.effects.monok.concurrentEffect
arrow.effects.monok.effect
arrow.effects.monok.functor
arrow.effects.monok.monad
arrow.effects.monok.monadError
arrow.effects.monok.monadThrow
