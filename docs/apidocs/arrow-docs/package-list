$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.aql$fix(arrow.Kind((arrow.aql.ForBox, arrow.aql.fix.A)))arrow.aql/arrow.-kind/fix.html
$dokka.location:arrow.aql.box.foldable$combineAll(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.aql.box.foldable.combineAll.A)))arrow.aql.box.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.aql.box.foldable$exists(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.exists.A)), kotlin.Function1((arrow.aql.box.foldable.exists.A, kotlin.Boolean)))arrow.aql.box.foldable/arrow.-kind/exists.html
$dokka.location:arrow.aql.box.foldable$find(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.find.A)), kotlin.Function1((arrow.aql.box.foldable.find.A, kotlin.Boolean)))arrow.aql.box.foldable/arrow.-kind/find.html
$dokka.location:arrow.aql.box.foldable$fold(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.aql.box.foldable.fold.A)))arrow.aql.box.foldable/arrow.-kind/fold.html
$dokka.location:arrow.aql.box.foldable$foldLeft(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.foldLeft.A)), arrow.aql.box.foldable.foldLeft.B, kotlin.Function2((arrow.aql.box.foldable.foldLeft.B, arrow.aql.box.foldable.foldLeft.A, )))arrow.aql.box.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.aql.box.foldable$foldM(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.aql.box.foldable.foldM.G)), arrow.aql.box.foldable.foldM.B, kotlin.Function2((arrow.aql.box.foldable.foldM.B, arrow.aql.box.foldable.foldM.A, arrow.Kind((arrow.aql.box.foldable.foldM.G, )))))arrow.aql.box.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.aql.box.foldable$foldMap(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.aql.box.foldable.foldMap.B)), kotlin.Function1((arrow.aql.box.foldable.foldMap.A, arrow.aql.box.foldable.foldMap.B)))arrow.aql.box.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.aql.box.foldable$foldMapM(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.foldMapM.A)), arrow.aql.box.foldable.foldMapM.MA, arrow.aql.box.foldable.foldMapM.MO, kotlin.Function1((arrow.aql.box.foldable.foldMapM.A, arrow.Kind((arrow.aql.box.foldable.foldMapM.G, arrow.aql.box.foldable.foldMapM.B)))))arrow.aql.box.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.aql.box.foldable$foldRight(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.foldRight.A)), arrow.core.Eval((arrow.aql.box.foldable.foldRight.B)), kotlin.Function2((arrow.aql.box.foldable.foldRight.A, arrow.core.Eval((arrow.aql.box.foldable.foldRight.B)), )))arrow.aql.box.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.aql.box.foldable$forAll(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.forAll.A)), kotlin.Function1((arrow.aql.box.foldable.forAll.A, kotlin.Boolean)))arrow.aql.box.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.aql.box.foldable$get(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.aql.box.foldable.get.A)))), kotlin.Long)arrow.aql.box.foldable/arrow.-kind/get.html
$dokka.location:arrow.aql.box.foldable$isEmpty(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.isEmpty.A)))arrow.aql.box.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.aql.box.foldable$nonEmpty(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.nonEmpty.A)))arrow.aql.box.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.aql.box.foldable$reduceLeftOption(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.aql.box.foldable.reduceLeftOption.A, , )))arrow.aql.box.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.aql.box.foldable$reduceLeftToOption(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.aql.box.foldable.reduceLeftToOption.A, arrow.aql.box.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.aql.box.foldable.reduceLeftToOption.B, arrow.aql.box.foldable.reduceLeftToOption.A, )))arrow.aql.box.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.aql.box.foldable$reduceRightOption(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.reduceRightOption.A)), kotlin.Function2((arrow.aql.box.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.aql.box.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.aql.box.foldable$reduceRightToOption(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.aql.box.foldable.reduceRightToOption.A, arrow.aql.box.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.aql.box.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.aql.box.foldable.reduceRightToOption.B)), )))arrow.aql.box.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.aql.box.foldable$sequence_(arrow.Kind((arrow.aql.ForBox, arrow.Kind((arrow.aql.box.foldable.sequence_.G, arrow.aql.box.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.aql.box.foldable.sequence_.G)))arrow.aql.box.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.aql.box.foldable$size(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.aql.box.foldable/arrow.-kind/size.html
$dokka.location:arrow.aql.box.foldable$traverse_(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.aql.box.foldable.traverse_.G)), kotlin.Function1((arrow.aql.box.foldable.traverse_.A, arrow.Kind((arrow.aql.box.foldable.traverse_.G, arrow.aql.box.foldable.traverse_.B)))))arrow.aql.box.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.aql.box.functor$as(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.as.A)), arrow.aql.box.functor.as.B)arrow.aql.box.functor/arrow.-kind/as.html
$dokka.location:arrow.aql.box.functor$fproduct(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.fproduct.A)), kotlin.Function1((arrow.aql.box.functor.fproduct.A, arrow.aql.box.functor.fproduct.B)))arrow.aql.box.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.aql.box.functor$imap(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.imap.A)), kotlin.Function1((arrow.aql.box.functor.imap.A, arrow.aql.box.functor.imap.B)), kotlin.Function1((arrow.aql.box.functor.imap.B, arrow.aql.box.functor.imap.A)))arrow.aql.box.functor/arrow.-kind/imap.html
$dokka.location:arrow.aql.box.functor$map(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.map.A)), kotlin.Function1((arrow.aql.box.functor.map.A, arrow.aql.box.functor.map.B)))arrow.aql.box.functor/arrow.-kind/map.html
$dokka.location:arrow.aql.box.functor$tupleLeft(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.tupleLeft.A)), arrow.aql.box.functor.tupleLeft.B)arrow.aql.box.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.aql.box.functor$tupleRight(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.tupleRight.A)), arrow.aql.box.functor.tupleRight.B)arrow.aql.box.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.aql.box.functor$void(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.void.A)))arrow.aql.box.functor/arrow.-kind/void.html
$dokka.location:arrow.aql.box.functor$widen(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functor.widen.A)))arrow.aql.box.functor/arrow.-kind/widen.html
$dokka.location:arrow.aql.box.functorFilter$collect(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functorFilter.collect.A)), arrow.core.PartialFunction((arrow.aql.box.functorFilter.collect.A, arrow.aql.box.functorFilter.collect.B)))arrow.aql.box.functor-filter/arrow.-kind/collect.html
$dokka.location:arrow.aql.box.functorFilter$filter(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functorFilter.filter.A)), kotlin.Function1((arrow.aql.box.functorFilter.filter.A, kotlin.Boolean)))arrow.aql.box.functor-filter/arrow.-kind/filter.html
$dokka.location:arrow.aql.box.functorFilter$flattenOption(arrow.Kind((arrow.aql.ForBox, arrow.core.Option((arrow.aql.box.functorFilter.flattenOption.A)))))arrow.aql.box.functor-filter/arrow.-kind/flatten-option.html
$dokka.location:arrow.aql.box.functorFilter$mapFilter(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.functorFilter.mapFilter.A)), kotlin.Function1((arrow.aql.box.functorFilter.mapFilter.A, arrow.core.Option((arrow.aql.box.functorFilter.mapFilter.B)))))arrow.aql.box.functor-filter/arrow.-kind/map-filter.html
$dokka.location:arrow.aql.box.select$query(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.select.query.A)), kotlin.Function1((arrow.Kind((arrow.aql.ForBox, arrow.aql.box.select.query.A)), arrow.aql.box.select.query.Z)))arrow.aql.box.select/arrow.-kind/query.html
$dokka.location:arrow.aql.box.select$select(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.select.select.A)), kotlin.Function1((arrow.aql.box.select.select.A, arrow.aql.box.select.select.Z)))arrow.aql.box.select/arrow.-kind/select.html
$dokka.location:arrow.aql.box.select$selectAll(arrow.Kind((arrow.aql.ForBox, arrow.aql.box.select.selectAll.A)))arrow.aql.box.select/arrow.-kind/select-all.html
$dokka.location:arrow.effects$startF(arrow.Kind((arrow.effects.ForDeferredK, arrow.effects.startF.A)), kotlin.coroutines.CoroutineContext)arrow.effects/arrow.-kind/start-f.html
$dokka.location:arrow.generic$combineAll(kotlin.collections.List((arrow.generic.Account)))arrow.generic/kotlin.collections.-list/combine-all.html
$dokka.location:arrow.generic$combineAll(kotlin.collections.List((arrow.generic.Car)))arrow.generic/kotlin.collections.-list/combine-all.html
$dokka.location:arrow.generic$combineAll(kotlin.collections.List((arrow.generic.Speed)))arrow.generic/kotlin.collections.-list/combine-all.html
$dokka.location:arrow.generic$mapToAccount(arrow.typeclasses.Applicative((arrow.generic.mapToAccount.F)), arrow.Kind((arrow.generic.mapToAccount.F, kotlin.Int)), arrow.Kind((arrow.generic.mapToAccount.F, kotlin.Int)))arrow.generic/arrow.typeclasses.-applicative/map-to-account.html
$dokka.location:arrow.generic$toAccount(arrow.core.Tuple2((kotlin.Int, )))arrow.generic/arrow.core.-tuple2/to-account.html
$dokka.location:arrow.recursion$as(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.as.A)), arrow.recursion.as.B)arrow.recursion/arrow.-kind/as.html
$dokka.location:arrow.recursion$fix(arrow.Kind((arrow.recursion.ForConsPattern, arrow.recursion.fix.A)))arrow.recursion/arrow.-kind/fix.html
$dokka.location:arrow.recursion$fix(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.fix.A)))arrow.recursion/arrow.-kind/fix.html
$dokka.location:arrow.recursion$fproduct(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.fproduct.A)), kotlin.Function1((arrow.recursion.fproduct.A, arrow.recursion.fproduct.B)))arrow.recursion/arrow.-kind/fproduct.html
$dokka.location:arrow.recursion$imap(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.imap.A)), kotlin.Function1((arrow.recursion.imap.A, arrow.recursion.imap.B)), kotlin.Function1((arrow.recursion.imap.B, arrow.recursion.imap.A)))arrow.recursion/arrow.-kind/imap.html
$dokka.location:arrow.recursion$map(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.map.A)), kotlin.Function1((arrow.recursion.map.A, arrow.recursion.map.B)))arrow.recursion/arrow.-kind/map.html
$dokka.location:arrow.recursion$tupleLeft(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.tupleLeft.A)), arrow.recursion.tupleLeft.B)arrow.recursion/arrow.-kind/tuple-left.html
$dokka.location:arrow.recursion$tupleRight(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.tupleRight.A)), arrow.recursion.tupleRight.B)arrow.recursion/arrow.-kind/tuple-right.html
$dokka.location:arrow.recursion$void(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.void.A)))arrow.recursion/arrow.-kind/void.html
$dokka.location:arrow.recursion$widen(arrow.Kind((arrow.recursion.ForIntListPattern, arrow.recursion.widen.A)))arrow.recursion/arrow.-kind/widen.html
$dokka.location:arrow.reflect$docsMarkdownLink(kotlin.reflect.KClass((arrow.reflect.docsMarkdownLink.A)))arrow.reflect/kotlin.reflect.-k-class/docs-markdown-link.html
$dokka.location:arrow.reflect$mixedHierarchyGraph(kotlin.collections.List((arrow.reflect.TypeClass)))arrow.reflect/kotlin.collections.-list/mixed-hierarchy-graph.html
$dokka.location:arrow.reflect$nomnomlMixedHierarchyGraph(kotlin.collections.List((arrow.reflect.TypeClass)))arrow.reflect/kotlin.collections.-list/nomnoml-mixed-hierarchy-graph.html
arrow.aql
arrow.aql.box.count
arrow.aql.box.foldable
arrow.aql.box.functor
arrow.aql.box.functorFilter
arrow.aql.box.groupBy
arrow.aql.box.orderBy
arrow.aql.box.select
arrow.aql.box.sum
arrow.aql.box.union
arrow.aql.box.where
arrow.effects
arrow.generic
arrow.optics
arrow.recursion
arrow.reflect
com.example.domain
