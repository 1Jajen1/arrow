$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.recursion.instances.fix.birecursive$birecursive(arrow.recursion.data.Fix.Companion)arrow.recursion.instances.fix.birecursive/arrow.recursion.data.-fix/birecursive.html
$dokka.location:arrow.recursion.instances.fix.corecursive$ana(arrow.typeclasses.Functor((arrow.recursion.instances.fix.corecursive.ana.F)), arrow.recursion.instances.fix.corecursive.ana.A, kotlin.Function1((arrow.recursion.instances.fix.corecursive.ana.A, arrow.Kind((arrow.recursion.instances.fix.corecursive.ana.F, )))))arrow.recursion.instances.fix.corecursive/arrow.typeclasses.-functor/ana.html
$dokka.location:arrow.recursion.instances.fix.corecursive$corecursive(arrow.recursion.data.Fix.Companion)arrow.recursion.instances.fix.corecursive/arrow.recursion.data.-fix/corecursive.html
$dokka.location:arrow.recursion.instances.fix.corecursive$embed(arrow.typeclasses.Functor((arrow.recursion.instances.fix.corecursive.embed.F)))arrow.recursion.instances.fix.corecursive/arrow.typeclasses.-functor/embed.html
$dokka.location:arrow.recursion.instances.fix.corecursive$embedT(arrow.typeclasses.Functor((arrow.recursion.instances.fix.corecursive.embedT.F)), arrow.Kind((arrow.recursion.instances.fix.corecursive.embedT.F, arrow.core.Eval((arrow.Kind((arrow.recursion.data.ForFix, )))))))arrow.recursion.instances.fix.corecursive/arrow.typeclasses.-functor/embed-t.html
$dokka.location:arrow.recursion.instances.fix.recursive$cata(arrow.typeclasses.Functor((arrow.recursion.instances.fix.recursive.cata.F)), arrow.Kind((arrow.recursion.data.ForFix, arrow.recursion.instances.fix.recursive.cata.F)), kotlin.Function1((arrow.Kind((arrow.recursion.instances.fix.recursive.cata.F, arrow.core.Eval((arrow.recursion.instances.fix.recursive.cata.A)))), )))arrow.recursion.instances.fix.recursive/arrow.typeclasses.-functor/cata.html
$dokka.location:arrow.recursion.instances.fix.recursive$project(arrow.typeclasses.Functor((arrow.recursion.instances.fix.recursive.project.F)))arrow.recursion.instances.fix.recursive/arrow.typeclasses.-functor/project.html
$dokka.location:arrow.recursion.instances.fix.recursive$projectT(arrow.typeclasses.Functor((arrow.recursion.instances.fix.recursive.projectT.F)), arrow.Kind((arrow.recursion.data.ForFix, arrow.recursion.instances.fix.recursive.projectT.F)))arrow.recursion.instances.fix.recursive/arrow.typeclasses.-functor/project-t.html
$dokka.location:arrow.recursion.instances.fix.recursive$recursive(arrow.recursion.data.Fix.Companion)arrow.recursion.instances.fix.recursive/arrow.recursion.data.-fix/recursive.html
$dokka.location:arrow.recursion.instances.mu.birecursive$birecursive(arrow.recursion.data.Mu.Companion)arrow.recursion.instances.mu.birecursive/arrow.recursion.data.-mu/birecursive.html
$dokka.location:arrow.recursion.instances.mu.corecursive$ana(arrow.typeclasses.Functor((arrow.recursion.instances.mu.corecursive.ana.F)), arrow.recursion.instances.mu.corecursive.ana.A, kotlin.Function1((arrow.recursion.instances.mu.corecursive.ana.A, arrow.Kind((arrow.recursion.instances.mu.corecursive.ana.F, )))))arrow.recursion.instances.mu.corecursive/arrow.typeclasses.-functor/ana.html
$dokka.location:arrow.recursion.instances.mu.corecursive$corecursive(arrow.recursion.data.Mu.Companion)arrow.recursion.instances.mu.corecursive/arrow.recursion.data.-mu/corecursive.html
$dokka.location:arrow.recursion.instances.mu.corecursive$embed(arrow.typeclasses.Functor((arrow.recursion.instances.mu.corecursive.embed.F)))arrow.recursion.instances.mu.corecursive/arrow.typeclasses.-functor/embed.html
$dokka.location:arrow.recursion.instances.mu.corecursive$embedT(arrow.typeclasses.Functor((arrow.recursion.instances.mu.corecursive.embedT.F)), arrow.Kind((arrow.recursion.instances.mu.corecursive.embedT.F, arrow.core.Eval((arrow.Kind((arrow.recursion.data.ForMu, )))))))arrow.recursion.instances.mu.corecursive/arrow.typeclasses.-functor/embed-t.html
$dokka.location:arrow.recursion.instances.mu.recursive$cata(arrow.typeclasses.Functor((arrow.recursion.instances.mu.recursive.cata.F)), arrow.Kind((arrow.recursion.data.ForMu, arrow.recursion.instances.mu.recursive.cata.F)), kotlin.Function1((arrow.Kind((arrow.recursion.instances.mu.recursive.cata.F, arrow.core.Eval((arrow.recursion.instances.mu.recursive.cata.A)))), )))arrow.recursion.instances.mu.recursive/arrow.typeclasses.-functor/cata.html
$dokka.location:arrow.recursion.instances.mu.recursive$project(arrow.typeclasses.Functor((arrow.recursion.instances.mu.recursive.project.F)))arrow.recursion.instances.mu.recursive/arrow.typeclasses.-functor/project.html
$dokka.location:arrow.recursion.instances.mu.recursive$projectT(arrow.typeclasses.Functor((arrow.recursion.instances.mu.recursive.projectT.F)), arrow.Kind((arrow.recursion.data.ForMu, arrow.recursion.instances.mu.recursive.projectT.F)))arrow.recursion.instances.mu.recursive/arrow.typeclasses.-functor/project-t.html
$dokka.location:arrow.recursion.instances.mu.recursive$recursive(arrow.recursion.data.Mu.Companion)arrow.recursion.instances.mu.recursive/arrow.recursion.data.-mu/recursive.html
$dokka.location:arrow.recursion.instances.nu.birecursive$birecursive(arrow.recursion.data.Nu.Companion)arrow.recursion.instances.nu.birecursive/arrow.recursion.data.-nu/birecursive.html
$dokka.location:arrow.recursion.instances.nu.corecursive$corecursive(arrow.recursion.data.Nu.Companion)arrow.recursion.instances.nu.corecursive/arrow.recursion.data.-nu/corecursive.html
$dokka.location:arrow.recursion.instances.nu.corecursive$embed(arrow.typeclasses.Functor((arrow.recursion.instances.nu.corecursive.embed.F)))arrow.recursion.instances.nu.corecursive/arrow.typeclasses.-functor/embed.html
$dokka.location:arrow.recursion.instances.nu.corecursive$embedT(arrow.typeclasses.Functor((arrow.recursion.instances.nu.corecursive.embedT.F)), arrow.Kind((arrow.recursion.instances.nu.corecursive.embedT.F, arrow.core.Eval((arrow.Kind((arrow.recursion.data.ForNu, )))))))arrow.recursion.instances.nu.corecursive/arrow.typeclasses.-functor/embed-t.html
$dokka.location:arrow.recursion.instances.nu.recursive$cata(arrow.typeclasses.Functor((arrow.recursion.instances.nu.recursive.cata.F)), arrow.Kind((arrow.recursion.data.ForNu, arrow.recursion.instances.nu.recursive.cata.F)), kotlin.Function1((arrow.Kind((arrow.recursion.instances.nu.recursive.cata.F, arrow.core.Eval((arrow.recursion.instances.nu.recursive.cata.A)))), )))arrow.recursion.instances.nu.recursive/arrow.typeclasses.-functor/cata.html
$dokka.location:arrow.recursion.instances.nu.recursive$project(arrow.typeclasses.Functor((arrow.recursion.instances.nu.recursive.project.F)))arrow.recursion.instances.nu.recursive/arrow.typeclasses.-functor/project.html
$dokka.location:arrow.recursion.instances.nu.recursive$projectT(arrow.typeclasses.Functor((arrow.recursion.instances.nu.recursive.projectT.F)), arrow.Kind((arrow.recursion.data.ForNu, arrow.recursion.instances.nu.recursive.projectT.F)))arrow.recursion.instances.nu.recursive/arrow.typeclasses.-functor/project-t.html
$dokka.location:arrow.recursion.instances.nu.recursive$recursive(arrow.recursion.data.Nu.Companion)arrow.recursion.instances.nu.recursive/arrow.recursion.data.-nu/recursive.html
arrow.recursion.instances
arrow.recursion.instances.fix.birecursive
arrow.recursion.instances.fix.corecursive
arrow.recursion.instances.fix.recursive
arrow.recursion.instances.mu.birecursive
arrow.recursion.instances.mu.corecursive
arrow.recursion.instances.mu.recursive
arrow.recursion.instances.nu.birecursive
arrow.recursion.instances.nu.corecursive
arrow.recursion.instances.nu.recursive
