$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.data$ap(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.ap.E)), arrow.data.ap.A)), arrow.typeclasses.Semigroup((arrow.data.ap.E)), arrow.data.Validated((arrow.data.ap.E, kotlin.Function1((arrow.data.ap.A, arrow.data.ap.B)))))arrow.data/arrow.-kind/ap.html
$dokka.location:arrow.data$bothIor(arrow.core.Tuple2((arrow.data.bothIor.A, arrow.data.bothIor.B)))arrow.data/arrow.core.-tuple2/both-ior.html
$dokka.location:arrow.data$bothIor(kotlin.Pair((arrow.data.bothIor.A, arrow.data.bothIor.B)))arrow.data/kotlin.-pair/both-ior.html
$dokka.location:arrow.data$combine(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.combine.E)), arrow.data.combine.A)), arrow.typeclasses.Semigroup((arrow.data.combine.E)), arrow.typeclasses.Semigroup((arrow.data.combine.A)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.combine.E)), arrow.data.combine.A)))arrow.data/arrow.-kind/combine.html
$dokka.location:arrow.data$combineK(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.combineK.E)), arrow.data.combineK.A)), arrow.typeclasses.Semigroup((arrow.data.combineK.E)), arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.combineK.E)), arrow.data.combineK.A)))arrow.data/arrow.-kind/combine-k.html
$dokka.location:arrow.data$combineK(arrow.Kind((arrow.data.ForListK, arrow.data.combineK.A)), arrow.Kind((arrow.data.ForListK, arrow.data.combineK.A)))arrow.data/arrow.-kind/combine-k.html
$dokka.location:arrow.data$combineK(arrow.Kind((arrow.data.ForNonEmptyList, arrow.data.combineK.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.data.combineK.A)))arrow.data/arrow.-kind/combine-k.html
$dokka.location:arrow.data$combineK(arrow.Kind((arrow.data.ForSequenceK, arrow.data.combineK.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.data.combineK.A)))arrow.data/arrow.-kind/combine-k.html
$dokka.location:arrow.data$combineK(arrow.Kind((arrow.data.ForSetK, arrow.data.combineK.A)), arrow.Kind((arrow.data.ForSetK, arrow.data.combineK.A)))arrow.data/arrow.-kind/combine-k.html
$dokka.location:arrow.data$coproduct(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.Kind((arrow.data.coproduct.F, arrow.data.coproduct.A)))), arrow.Kind((arrow.data.coproduct.G, )))))arrow.data/arrow.-kind/coproduct.html
$dokka.location:arrow.data$coreader(kotlin.Function1((arrow.data.coreader.A, arrow.data.coreader.B)))arrow.data/kotlin.-function1/coreader.html
$dokka.location:arrow.data$findValid(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.findValid.E)), arrow.data.findValid.A)), arrow.typeclasses.Semigroup((arrow.data.findValid.E)), kotlin.Function0((arrow.data.Validated((arrow.data.findValid.E, arrow.data.findValid.A)))))arrow.data/arrow.-kind/find-valid.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCokleisli, arrow.data.fix.F)), arrow.data.fix.A)), arrow.data.fix.B)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.data.fix.F)), arrow.data.fix.G)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForDay, arrow.data.fix.F)), arrow.data.fix.G)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForEitherT, arrow.data.fix.F)), arrow.data.fix.A)), arrow.data.fix.B)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.data.fix.F)), arrow.data.fix.D)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.data.fix.F)), arrow.data.fix.S)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForSum, arrow.data.fix.F)), arrow.data.fix.G)), arrow.data.fix.V)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.data.fix.F)), arrow.data.fix.W)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.data.fix.A)), arrow.data.fix.B)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.data.fix.K)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForMoore, arrow.data.fix.E)), arrow.data.fix.V)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.data.fix.F)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForSortedMapK, arrow.data.fix.A)), arrow.data.fix.B)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForStore, arrow.data.fix.S)), arrow.data.fix.V)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.fix.E)), arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.data.ForListK, arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.data.ForNonEmptyList, arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.data.ForSequenceK, arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$fix(arrow.Kind((arrow.data.ForSetK, arrow.data.fix.A)))arrow.data/arrow.-kind/fix.html
$dokka.location:arrow.data$flatten(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForKleisli, arrow.data.flatten.F)), arrow.data.flatten.D)), arrow.data.Kleisli((, , arrow.data.flatten.A)))), arrow.typeclasses.Monad((arrow.data.flatten.F)))arrow.data/arrow.-kind/flatten.html
$dokka.location:arrow.data$foldLeft(java.util.SortedMap((arrow.data.foldLeft.A, arrow.data.foldLeft.B)), java.util.SortedMap((arrow.data.foldLeft.A, arrow.data.foldLeft.C)), kotlin.Function2((java.util.SortedMap((arrow.data.foldLeft.A, arrow.data.foldLeft.C)), kotlin.collections.Map.Entry((, arrow.data.foldLeft.B)), )))arrow.data/java.util.-sorted-map/fold-left.html
$dokka.location:arrow.data$foldLeft(kotlin.collections.Map((arrow.data.foldLeft.K, arrow.data.foldLeft.A)), kotlin.collections.Map((arrow.data.foldLeft.K, arrow.data.foldLeft.B)), kotlin.Function2((kotlin.collections.Map((arrow.data.foldLeft.K, arrow.data.foldLeft.B)), kotlin.collections.Map.Entry((, arrow.data.foldLeft.A)), )))arrow.data/kotlin.collections.-map/fold-left.html
$dokka.location:arrow.data$foldRight(java.util.SortedMap((arrow.data.foldRight.A, arrow.data.foldRight.B)), java.util.SortedMap((arrow.data.foldRight.A, arrow.data.foldRight.C)), kotlin.Function2((kotlin.collections.Map.Entry((arrow.data.foldRight.A, arrow.data.foldRight.B)), java.util.SortedMap((, arrow.data.foldRight.C)), )))arrow.data/java.util.-sorted-map/fold-right.html
$dokka.location:arrow.data$foldRight(kotlin.collections.Map((arrow.data.foldRight.K, arrow.data.foldRight.A)), kotlin.collections.Map((arrow.data.foldRight.K, arrow.data.foldRight.B)), kotlin.Function2((kotlin.collections.Map.Entry((arrow.data.foldRight.K, arrow.data.foldRight.A)), kotlin.collections.Map((, arrow.data.foldRight.B)), )))arrow.data/kotlin.collections.-map/fold-right.html
$dokka.location:arrow.data$getOption(java.util.SortedMap((arrow.data.getOption.A, arrow.data.getOption.B)), arrow.data.getOption.A)arrow.data/java.util.-sorted-map/get-option.html
$dokka.location:arrow.data$getOption(kotlin.collections.Map((arrow.data.getOption.K, arrow.data.getOption.A)), arrow.data.getOption.K)arrow.data/kotlin.collections.-map/get-option.html
$dokka.location:arrow.data$getOrElse(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.getOrElse.E)), arrow.data.getOrElse.B)), kotlin.Function0((arrow.data.getOrElse.B)))arrow.data/arrow.-kind/get-or-else.html
$dokka.location:arrow.data$handleLeftWith(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.handleLeftWith.E)), arrow.data.handleLeftWith.A)), kotlin.Function1((arrow.data.handleLeftWith.E, arrow.Kind((arrow.Kind((arrow.data.ForValidated, )), arrow.data.handleLeftWith.A)))))arrow.data/arrow.-kind/handle-left-with.html
$dokka.location:arrow.data$iterateRight(kotlin.collections.Iterator((arrow.data.iterateRight.A)), arrow.core.Eval((arrow.data.iterateRight.B)))arrow.data/kotlin.collections.-iterator/iterate-right.html
$dokka.location:arrow.data$k(arrow.core.Option((arrow.core.Tuple2((arrow.data.k.A, arrow.data.k.B)))))arrow.data/arrow.core.-option/k.html
$dokka.location:arrow.data$k(arrow.core.Option((arrow.core.Tuple2((arrow.data.k.K, arrow.data.k.A)))))arrow.data/arrow.core.-option/k.html
$dokka.location:arrow.data$k(java.util.SortedMap((arrow.data.k.A, arrow.data.k.B)))arrow.data/java.util.-sorted-map/k.html
$dokka.location:arrow.data$k(kotlin.collections.List((arrow.data.k.A)))arrow.data/kotlin.collections.-list/k.html
$dokka.location:arrow.data$k(kotlin.collections.List((kotlin.collections.Map.Entry((arrow.data.k.A, arrow.data.k.B)))))arrow.data/kotlin.collections.-list/k.html
$dokka.location:arrow.data$k(kotlin.collections.List((kotlin.collections.Map.Entry((arrow.data.k.K, arrow.data.k.A)))))arrow.data/kotlin.collections.-list/k.html
$dokka.location:arrow.data$k(kotlin.collections.Map((arrow.data.k.K, arrow.data.k.A)))arrow.data/kotlin.collections.-map/k.html
$dokka.location:arrow.data$k(kotlin.collections.Set((arrow.data.k.A)))arrow.data/kotlin.collections.-set/k.html
$dokka.location:arrow.data$k(kotlin.sequences.Sequence((arrow.data.k.A)))arrow.data/kotlin.sequences.-sequence/k.html
$dokka.location:arrow.data$kleisli(kotlin.Function1((arrow.data.kleisli.D, arrow.Kind((arrow.data.kleisli.F, arrow.data.kleisli.A)))))arrow.data/kotlin.-function1/kleisli.html
$dokka.location:arrow.data$mapFilter(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.data.mapFilter.F)), arrow.data.mapFilter.A)), arrow.typeclasses.Functor((arrow.data.mapFilter.F)), kotlin.Function1((arrow.data.mapFilter.A, arrow.core.Option((arrow.data.mapFilter.B)))))arrow.data/arrow.-kind/map-filter.html
$dokka.location:arrow.data$or(arrow.core.FunctionK((arrow.data.or.F, arrow.data.or.G)), arrow.core.FunctionK((arrow.data.or.H, arrow.data.or.G)))arrow.data/arrow.core.-function-k/or.html
$dokka.location:arrow.data$orElse(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.orElse.E)), arrow.data.orElse.A)), kotlin.Function0((arrow.data.Validated((arrow.data.orElse.E, arrow.data.orElse.A)))))arrow.data/arrow.-kind/or-else.html
$dokka.location:arrow.data$orNull(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.orNull.E)), arrow.data.orNull.B)))arrow.data/arrow.-kind/or-null.html
$dokka.location:arrow.data$reader(kotlin.Function1((arrow.data.reader.D, arrow.data.reader.A)))arrow.data/kotlin.-function1/reader.html
$dokka.location:arrow.data$readerT(kotlin.Function1((arrow.data.readerT.D, arrow.Kind((arrow.data.readerT.F, arrow.data.readerT.A)))))arrow.data/kotlin.-function1/reader-t.html
$dokka.location:arrow.data$runM(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForStateT, arrow.data.runM.F)), arrow.data.runM.S)), arrow.data.runM.A)), arrow.typeclasses.Monad((arrow.data.runM.F)), arrow.data.runM.S)arrow.data/arrow.-kind/run-m.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForCoproduct, arrow.data.sequence.F)), arrow.data.sequence.G)), arrow.Kind((arrow.data.sequence.H, arrow.data.sequence.A)))), arrow.typeclasses.Applicative((arrow.data.sequence.H)), arrow.typeclasses.Traverse((arrow.data.sequence.F)), arrow.typeclasses.Traverse((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.Kind((arrow.data.ForIor, arrow.data.sequence.A)), arrow.Kind((arrow.data.sequence.G, arrow.data.sequence.B)))), arrow.typeclasses.Applicative((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.Kind((arrow.data.ForMapK, arrow.data.sequence.K)), arrow.Kind((arrow.data.sequence.G, arrow.data.sequence.V)))), arrow.typeclasses.Applicative((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.Kind((arrow.data.ForSortedMapK, arrow.data.sequence.K)), arrow.Kind((arrow.data.sequence.G, arrow.data.sequence.V)))), arrow.typeclasses.Applicative((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.sequence.E)), arrow.Kind((arrow.data.sequence.G, arrow.data.sequence.A)))), arrow.typeclasses.Applicative((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.data.ForNonEmptyList, arrow.Kind((arrow.data.sequence.G, arrow.data.sequence.A)))), arrow.typeclasses.Applicative((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$sequence(arrow.Kind((arrow.data.ForSequenceK, arrow.Kind((arrow.data.sequence.G, arrow.data.sequence.A)))), arrow.typeclasses.Applicative((arrow.data.sequence.G)))arrow.data/arrow.-kind/sequence.html
$dokka.location:arrow.data$stateSequential(kotlin.collections.List((arrow.data.StateT((arrow.core.ForId, arrow.data.stateSequential.S, arrow.data.stateSequential.T)))))arrow.data/kotlin.collections.-list/state-sequential.html
$dokka.location:arrow.data$stateT(arrow.Kind((arrow.data.stateT.F, kotlin.Function1((arrow.data.stateT.S, arrow.Kind((, arrow.core.Tuple2((, arrow.data.stateT.A)))))))))arrow.data/arrow.-kind/state-t.html
$dokka.location:arrow.data$stateT(kotlin.Function1((arrow.data.stateT.S, arrow.Kind((arrow.data.stateT.F, arrow.core.Tuple2((, arrow.data.stateT.A)))))), arrow.typeclasses.Monad((arrow.data.stateT.F)))arrow.data/kotlin.-function1/state-t.html
$dokka.location:arrow.data$stateTraverse(kotlin.collections.List((arrow.data.stateTraverse.T)), kotlin.Function1((arrow.data.stateTraverse.T, arrow.data.StateT((arrow.core.ForId, arrow.data.stateTraverse.S, arrow.data.stateTraverse.R)))))arrow.data/kotlin.collections.-list/state-traverse.html
$dokka.location:arrow.data$toIor(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.toIor.E)), arrow.data.toIor.A)))arrow.data/arrow.-kind/to-ior.html
$dokka.location:arrow.data$toList(arrow.Kind((arrow.data.ForSequenceK, arrow.data.toList.A)))arrow.data/arrow.-kind/to-list.html
$dokka.location:arrow.data$toState(arrow.Kind((arrow.core.ForId, kotlin.Function1((arrow.data.toState.S, arrow.Kind((, arrow.core.Tuple2((, arrow.data.toState.A)))))))))arrow.data/arrow.-kind/to-state.html
$dokka.location:arrow.data$toState(kotlin.Function1((arrow.data.toState.S, arrow.Kind((arrow.core.ForId, arrow.core.Tuple2((, arrow.data.toState.A)))))))arrow.data/kotlin.-function1/to-state.html
$dokka.location:arrow.data$traverse(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.traverse.E)), arrow.data.traverse.A)), arrow.typeclasses.Applicative((arrow.data.traverse.G)), kotlin.Function1((arrow.data.traverse.A, arrow.Kind((arrow.data.traverse.G, arrow.data.traverse.B)))))arrow.data/arrow.-kind/traverse.html
$dokka.location:arrow.data$value(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForEitherT, arrow.data.value.F)), arrow.data.value.A)), arrow.data.value.B)))arrow.data/arrow.-kind/value.html
$dokka.location:arrow.data$value(arrow.Kind((arrow.Kind((arrow.Kind((arrow.data.ForWriterT, arrow.data.value.F)), arrow.data.value.W)), arrow.data.value.A)))arrow.data/arrow.-kind/value.html
$dokka.location:arrow.data$value(arrow.Kind((arrow.Kind((arrow.data.ForOptionT, arrow.data.value.F)), arrow.data.value.A)))arrow.data/arrow.-kind/value.html
$dokka.location:arrow.data$valueOr(arrow.Kind((arrow.Kind((arrow.data.ForValidated, arrow.data.valueOr.E)), arrow.data.valueOr.B)), kotlin.Function1((arrow.data.valueOr.E, arrow.data.valueOr.B)))arrow.data/arrow.-kind/value-or.html
arrow.data
