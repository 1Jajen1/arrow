$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.instances$combine(arrow.core.Either((arrow.instances.combine.L, arrow.instances.combine.R)), arrow.typeclasses.Semigroup((arrow.instances.combine.L)), arrow.typeclasses.Semigroup((arrow.instances.combine.R)), arrow.core.Either((arrow.instances.combine.L, arrow.instances.combine.R)))arrow.instances/arrow.core.-either/combine.html
$dokka.location:arrow.instances$combine(arrow.core.Try((arrow.instances.combine.A)), arrow.typeclasses.Semigroup((arrow.instances.combine.A)), arrow.core.Try((arrow.instances.combine.A)))arrow.instances/arrow.core.-try/combine.html
$dokka.location:arrow.instances$eq(kotlin.Byte.Companion)arrow.instances/kotlin.-byte/eq.html
$dokka.location:arrow.instances$eq(kotlin.Char.Companion)arrow.instances/kotlin.-char/eq.html
$dokka.location:arrow.instances$eq(kotlin.Double.Companion)arrow.instances/kotlin.-double/eq.html
$dokka.location:arrow.instances$eq(kotlin.Float.Companion)arrow.instances/kotlin.-float/eq.html
$dokka.location:arrow.instances$eq(kotlin.Int.Companion)arrow.instances/kotlin.-int/eq.html
$dokka.location:arrow.instances$eq(kotlin.Long.Companion)arrow.instances/kotlin.-long/eq.html
$dokka.location:arrow.instances$eq(kotlin.Short.Companion)arrow.instances/kotlin.-short/eq.html
$dokka.location:arrow.instances$eq(kotlin.String.Companion)arrow.instances/kotlin.-string/eq.html
$dokka.location:arrow.instances$extensions(arrow.core.ForEval.Companion, kotlin.Function1((arrow.instances.EvalContext, arrow.instances.extensions.L)))arrow.instances/arrow.core.-for-eval/extensions.html
$dokka.location:arrow.instances$extensions(arrow.core.ForFunction0.Companion, kotlin.Function1((arrow.instances.Function0Context, arrow.instances.extensions.L)))arrow.instances/arrow.core.-for-function0/extensions.html
$dokka.location:arrow.instances$extensions(arrow.core.ForId.Companion, kotlin.Function1((arrow.instances.IdContext, arrow.instances.extensions.L)))arrow.instances/arrow.core.-for-id/extensions.html
$dokka.location:arrow.instances$extensions(arrow.core.ForOption.Companion, kotlin.Function1((arrow.instances.OptionContext, arrow.instances.extensions.A)))arrow.instances/arrow.core.-for-option/extensions.html
$dokka.location:arrow.instances$extensions(arrow.core.ForTry.Companion, kotlin.Function1((arrow.instances.TryContext, arrow.instances.extensions.A)))arrow.instances/arrow.core.-for-try/extensions.html
$dokka.location:arrow.instances$hash(kotlin.Byte.Companion)arrow.instances/kotlin.-byte/hash.html
$dokka.location:arrow.instances$hash(kotlin.Char.Companion)arrow.instances/kotlin.-char/hash.html
$dokka.location:arrow.instances$hash(kotlin.Double.Companion)arrow.instances/kotlin.-double/hash.html
$dokka.location:arrow.instances$hash(kotlin.Float.Companion)arrow.instances/kotlin.-float/hash.html
$dokka.location:arrow.instances$hash(kotlin.Int.Companion)arrow.instances/kotlin.-int/hash.html
$dokka.location:arrow.instances$hash(kotlin.Long.Companion)arrow.instances/kotlin.-long/hash.html
$dokka.location:arrow.instances$hash(kotlin.Short.Companion)arrow.instances/kotlin.-short/hash.html
$dokka.location:arrow.instances$hash(kotlin.String.Companion)arrow.instances/kotlin.-string/hash.html
$dokka.location:arrow.instances$monoid(kotlin.Byte.Companion)arrow.instances/kotlin.-byte/monoid.html
$dokka.location:arrow.instances$monoid(kotlin.Double.Companion)arrow.instances/kotlin.-double/monoid.html
$dokka.location:arrow.instances$monoid(kotlin.Float.Companion)arrow.instances/kotlin.-float/monoid.html
$dokka.location:arrow.instances$monoid(kotlin.Int.Companion)arrow.instances/kotlin.-int/monoid.html
$dokka.location:arrow.instances$monoid(kotlin.Long.Companion)arrow.instances/kotlin.-long/monoid.html
$dokka.location:arrow.instances$monoid(kotlin.Short.Companion)arrow.instances/kotlin.-short/monoid.html
$dokka.location:arrow.instances$monoid(kotlin.String.Companion)arrow.instances/kotlin.-string/monoid.html
$dokka.location:arrow.instances$order(kotlin.Byte.Companion)arrow.instances/kotlin.-byte/order.html
$dokka.location:arrow.instances$order(kotlin.Char.Companion)arrow.instances/kotlin.-char/order.html
$dokka.location:arrow.instances$order(kotlin.Double.Companion)arrow.instances/kotlin.-double/order.html
$dokka.location:arrow.instances$order(kotlin.Float.Companion)arrow.instances/kotlin.-float/order.html
$dokka.location:arrow.instances$order(kotlin.Int.Companion)arrow.instances/kotlin.-int/order.html
$dokka.location:arrow.instances$order(kotlin.Long.Companion)arrow.instances/kotlin.-long/order.html
$dokka.location:arrow.instances$order(kotlin.Short.Companion)arrow.instances/kotlin.-short/order.html
$dokka.location:arrow.instances$order(kotlin.String.Companion)arrow.instances/kotlin.-string/order.html
$dokka.location:arrow.instances$semigroup(kotlin.Byte.Companion)arrow.instances/kotlin.-byte/semigroup.html
$dokka.location:arrow.instances$semigroup(kotlin.Double.Companion)arrow.instances/kotlin.-double/semigroup.html
$dokka.location:arrow.instances$semigroup(kotlin.Float.Companion)arrow.instances/kotlin.-float/semigroup.html
$dokka.location:arrow.instances$semigroup(kotlin.Int.Companion)arrow.instances/kotlin.-int/semigroup.html
$dokka.location:arrow.instances$semigroup(kotlin.Long.Companion)arrow.instances/kotlin.-long/semigroup.html
$dokka.location:arrow.instances$semigroup(kotlin.Short.Companion)arrow.instances/kotlin.-short/semigroup.html
$dokka.location:arrow.instances$semigroup(kotlin.String.Companion)arrow.instances/kotlin.-string/semigroup.html
$dokka.location:arrow.instances$sequence(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.sequence.F)), arrow.Kind((arrow.instances.sequence.G, arrow.instances.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.sequence.G)))arrow.instances/arrow.-kind/sequence.html
$dokka.location:arrow.instances$sequence(arrow.Kind((arrow.core.ForId, arrow.Kind((arrow.instances.sequence.G, arrow.instances.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.sequence.G)))arrow.instances/arrow.-kind/sequence.html
$dokka.location:arrow.instances$sequence(arrow.Kind((arrow.core.ForOption, arrow.Kind((arrow.instances.sequence.G, arrow.instances.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.sequence.G)))arrow.instances/arrow.-kind/sequence.html
$dokka.location:arrow.instances$sequence(arrow.Kind((arrow.core.ForTry, arrow.Kind((arrow.instances.sequence.G, arrow.instances.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.sequence.G)))arrow.instances/arrow.-kind/sequence.html
$dokka.location:arrow.instances$show(kotlin.Byte.Companion)arrow.instances/kotlin.-byte/show.html
$dokka.location:arrow.instances$show(kotlin.Char.Companion)arrow.instances/kotlin.-char/show.html
$dokka.location:arrow.instances$show(kotlin.Double.Companion)arrow.instances/kotlin.-double/show.html
$dokka.location:arrow.instances$show(kotlin.Float.Companion)arrow.instances/kotlin.-float/show.html
$dokka.location:arrow.instances$show(kotlin.Int.Companion)arrow.instances/kotlin.-int/show.html
$dokka.location:arrow.instances$show(kotlin.Long.Companion)arrow.instances/kotlin.-long/show.html
$dokka.location:arrow.instances$show(kotlin.Short.Companion)arrow.instances/kotlin.-short/show.html
$dokka.location:arrow.instances$show(kotlin.String.Companion)arrow.instances/kotlin.-string/show.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.traverse.A)), arrow.instances.traverse.B)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.B, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.C)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.traverse.F)), arrow.instances.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.A, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.B)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.core.ForId, arrow.instances.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.A, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.B)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.core.ForOption, arrow.instances.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.A, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.B)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverse(arrow.Kind((arrow.core.ForTry, arrow.instances.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.traverse.G)), kotlin.Function1((arrow.instances.traverse.A, arrow.Kind((arrow.instances.traverse.G, arrow.instances.traverse.B)))))arrow.instances/arrow.-kind/traverse.html
$dokka.location:arrow.instances$traverseFilter(arrow.Kind((arrow.core.ForOption, arrow.instances.traverseFilter.A)), arrow.typeclasses.Applicative((arrow.instances.traverseFilter.G)), kotlin.Function1((arrow.instances.traverseFilter.A, arrow.Kind((arrow.instances.traverseFilter.G, arrow.core.Option((arrow.instances.traverseFilter.B)))))))arrow.instances/arrow.-kind/traverse-filter.html
$dokka.location:arrow.instances.const.applicative$ap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.ap.A)), )), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.ap.A)), kotlin.Function1((, arrow.instances.const.applicative.ap.B)))), arrow.typeclasses.Monoid((arrow.instances.const.applicative.ap.A)))arrow.instances.const.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.const.applicative$applicative(arrow.typeclasses.Const.Companion, arrow.typeclasses.Monoid((arrow.instances.const.applicative.applicative.A)))arrow.instances.const.applicative/arrow.typeclasses.-const/applicative.html
$dokka.location:arrow.instances.const.applicative$map(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.map.A)), )), kotlin.Function1((arrow.instances.const.applicative.map.A, arrow.instances.const.applicative.map.B)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.map.A)))arrow.instances.const.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.const.applicative$map2(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.map2.A)), )), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.map2.A)), arrow.instances.const.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.const.applicative.map2.A, arrow.instances.const.applicative.map2.B)), arrow.instances.const.applicative.map2.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.map2.A)))arrow.instances.const.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.const.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.map2Eval.A)), )), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.map2Eval.A)), arrow.instances.const.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.const.applicative.map2Eval.A, arrow.instances.const.applicative.map2Eval.B)), arrow.instances.const.applicative.map2Eval.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.map2Eval.A)))arrow.instances.const.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.const.applicative$plus(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.plus.A)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.plus.A)), java.math.BigDecimal)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.plus.A)))arrow.instances.const.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), )), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.B)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple2((, arrow.instances.const.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple3((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple4((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C, arrow.instances.const.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple5((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C, arrow.instances.const.applicative.product.D, arrow.instances.const.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple6((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C, arrow.instances.const.applicative.product.D, arrow.instances.const.applicative.product.E, arrow.instances.const.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple7((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C, arrow.instances.const.applicative.product.D, arrow.instances.const.applicative.product.E, arrow.instances.const.applicative.product.FF, arrow.instances.const.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple8((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C, arrow.instances.const.applicative.product.D, arrow.instances.const.applicative.product.E, arrow.instances.const.applicative.product.FF, arrow.instances.const.applicative.product.G, arrow.instances.const.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.applicative$product(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.core.Tuple9((, arrow.instances.const.applicative.product.B, arrow.instances.const.applicative.product.C, arrow.instances.const.applicative.product.D, arrow.instances.const.applicative.product.E, arrow.instances.const.applicative.product.FF, arrow.instances.const.applicative.product.G, arrow.instances.const.applicative.product.H, arrow.instances.const.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.applicative.product.A)), arrow.instances.const.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.const.applicative.product.A)))arrow.instances.const.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.const.contravariant$contramap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.contravariant.contramap.A)), )), kotlin.Function1((arrow.instances.const.contravariant.contramap.B, arrow.instances.const.contravariant.contramap.A)))arrow.instances.const.contravariant/arrow.-kind/contramap.html
$dokka.location:arrow.instances.const.contravariant$contravariant(arrow.typeclasses.Const.Companion)arrow.instances.const.contravariant/arrow.typeclasses.-const/contravariant.html
$dokka.location:arrow.instances.const.contravariant$imap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.contravariant.imap.A)), )), kotlin.Function1((arrow.instances.const.contravariant.imap.A, arrow.instances.const.contravariant.imap.B)), kotlin.Function1((arrow.instances.const.contravariant.imap.B, arrow.instances.const.contravariant.imap.A)))arrow.instances.const.contravariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.const.contravariant$narrow(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.contravariant.narrow.A)), )))arrow.instances.const.contravariant/arrow.-kind/narrow.html
$dokka.location:arrow.instances.const.eq$eq(arrow.typeclasses.Const.Companion, arrow.typeclasses.Eq((arrow.instances.const.eq.eq.A)))arrow.instances.const.eq/arrow.typeclasses.-const/eq.html
$dokka.location:arrow.instances.const.eq$neqv(arrow.typeclasses.Const((arrow.instances.const.eq.neqv.A, arrow.instances.const.eq.neqv.T)), arrow.typeclasses.Const((arrow.instances.const.eq.neqv.A, arrow.instances.const.eq.neqv.T)), arrow.typeclasses.Eq((arrow.instances.const.eq.neqv.A)))arrow.instances.const.eq/arrow.typeclasses.-const/neqv.html
$dokka.location:arrow.instances.const.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.combineAll.A)), )), arrow.typeclasses.Monoid((arrow.instances.const.foldable.combineAll.A)))arrow.instances.const.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.const.foldable$exists(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.exists.A)), )), kotlin.Function1((arrow.instances.const.foldable.exists.A, kotlin.Boolean)))arrow.instances.const.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.const.foldable$find(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.find.A)), )), kotlin.Function1((arrow.instances.const.foldable.find.A, kotlin.Boolean)))arrow.instances.const.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.const.foldable$fold(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.fold.A)), )), arrow.typeclasses.Monoid((arrow.instances.const.foldable.fold.A)))arrow.instances.const.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.const.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.foldLeft.A)), )), arrow.instances.const.foldable.foldLeft.B, kotlin.Function2((arrow.instances.const.foldable.foldLeft.B, arrow.instances.const.foldable.foldLeft.A, )))arrow.instances.const.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.const.foldable$foldM(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.foldM.A)), )), arrow.typeclasses.Monad((arrow.instances.const.foldable.foldM.G)), arrow.instances.const.foldable.foldM.B, kotlin.Function2((arrow.instances.const.foldable.foldM.B, arrow.instances.const.foldable.foldM.A, arrow.Kind((arrow.instances.const.foldable.foldM.G, )))))arrow.instances.const.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.const.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.foldMap.A)), )), arrow.typeclasses.Monoid((arrow.instances.const.foldable.foldMap.B)), kotlin.Function1((arrow.instances.const.foldable.foldMap.A, arrow.instances.const.foldable.foldMap.B)))arrow.instances.const.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.const.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.foldMapM.A)), )), arrow.instances.const.foldable.foldMapM.MA, arrow.instances.const.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.const.foldable.foldMapM.A, arrow.Kind((arrow.instances.const.foldable.foldMapM.G, arrow.instances.const.foldable.foldMapM.B)))))arrow.instances.const.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.const.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.foldRight.A)), )), arrow.core.Eval((arrow.instances.const.foldable.foldRight.B)), kotlin.Function2((arrow.instances.const.foldable.foldRight.A, arrow.core.Eval((arrow.instances.const.foldable.foldRight.B)), )))arrow.instances.const.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.const.foldable$foldable(arrow.typeclasses.Const.Companion)arrow.instances.const.foldable/arrow.typeclasses.-const/foldable.html
$dokka.location:arrow.instances.const.foldable$forAll(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.forAll.A)), )), kotlin.Function1((arrow.instances.const.foldable.forAll.A, kotlin.Boolean)))arrow.instances.const.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.const.foldable$get(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.get.A)), )), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.const.foldable.get.A)))), kotlin.Long)arrow.instances.const.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.const.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.isEmpty.A)), )))arrow.instances.const.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.const.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.nonEmpty.A)), )))arrow.instances.const.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.const.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.reduceLeftOption.A)), )), kotlin.Function2((arrow.instances.const.foldable.reduceLeftOption.A, , )))arrow.instances.const.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.const.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.reduceLeftToOption.A)), )), kotlin.Function1((arrow.instances.const.foldable.reduceLeftToOption.A, arrow.instances.const.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.const.foldable.reduceLeftToOption.B, arrow.instances.const.foldable.reduceLeftToOption.A, )))arrow.instances.const.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.const.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.reduceRightOption.A)), )), kotlin.Function2((arrow.instances.const.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.const.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.const.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.reduceRightToOption.A)), )), kotlin.Function1((arrow.instances.const.foldable.reduceRightToOption.A, arrow.instances.const.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.const.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.const.foldable.reduceRightToOption.B)), )))arrow.instances.const.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.const.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.sequence_.A)), arrow.Kind((arrow.instances.const.foldable.sequence_.G, )))), arrow.typeclasses.Applicative((arrow.instances.const.foldable.sequence_.G)))arrow.instances.const.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.const.foldable$size(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.size.A)), )), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.const.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.const.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.foldable.traverse_.A)), )), arrow.typeclasses.Applicative((arrow.instances.const.foldable.traverse_.G)), kotlin.Function1((arrow.instances.const.foldable.traverse_.A, arrow.Kind((arrow.instances.const.foldable.traverse_.G, arrow.instances.const.foldable.traverse_.B)))))arrow.instances.const.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.const.functor$as(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.as.A)), )), arrow.instances.const.functor.as.B)arrow.instances.const.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.const.functor$fproduct(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.fproduct.A)), )), kotlin.Function1((arrow.instances.const.functor.fproduct.A, arrow.instances.const.functor.fproduct.B)))arrow.instances.const.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.const.functor$functor(arrow.typeclasses.Const.Companion)arrow.instances.const.functor/arrow.typeclasses.-const/functor.html
$dokka.location:arrow.instances.const.functor$imap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.imap.A)), )), kotlin.Function1((arrow.instances.const.functor.imap.A, arrow.instances.const.functor.imap.B)), kotlin.Function1((arrow.instances.const.functor.imap.B, arrow.instances.const.functor.imap.A)))arrow.instances.const.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.const.functor$map(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.map.A)), )), kotlin.Function1((arrow.instances.const.functor.map.A, arrow.instances.const.functor.map.B)))arrow.instances.const.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.const.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.tupleLeft.A)), )), arrow.instances.const.functor.tupleLeft.B)arrow.instances.const.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.const.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.tupleRight.A)), )), arrow.instances.const.functor.tupleRight.B)arrow.instances.const.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.const.functor$void(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.void.A)), )))arrow.instances.const.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.const.functor$widen(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.functor.widen.A)), )))arrow.instances.const.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.const.hash$hash(arrow.typeclasses.Const.Companion, arrow.typeclasses.Hash((arrow.instances.const.hash.hash.A)))arrow.instances.const.hash/arrow.typeclasses.-const/hash.html
$dokka.location:arrow.instances.const.invariant$imap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.invariant.imap.A)), )), kotlin.Function1((arrow.instances.const.invariant.imap.A, arrow.instances.const.invariant.imap.B)), kotlin.Function1((arrow.instances.const.invariant.imap.B, arrow.instances.const.invariant.imap.A)))arrow.instances.const.invariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.const.invariant$invariant(arrow.typeclasses.Const.Companion)arrow.instances.const.invariant/arrow.typeclasses.-const/invariant.html
$dokka.location:arrow.instances.const.monoid$combineAll(kotlin.collections.Collection((arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.monoid.combineAll.A)), arrow.instances.const.monoid.combineAll.T)))), arrow.typeclasses.Monoid((arrow.instances.const.monoid.combineAll.A)))arrow.instances.const.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.const.monoid$monoid(arrow.typeclasses.Const.Companion, arrow.typeclasses.Monoid((arrow.instances.const.monoid.monoid.A)))arrow.instances.const.monoid/arrow.typeclasses.-const/monoid.html
$dokka.location:arrow.instances.const.semigroup$combine(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.semigroup.combine.A)), arrow.instances.const.semigroup.combine.T)), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.semigroup.combine.A)), arrow.instances.const.semigroup.combine.T)), arrow.typeclasses.Semigroup((arrow.instances.const.semigroup.combine.A)))arrow.instances.const.semigroup/arrow.-kind/combine.html
$dokka.location:arrow.instances.const.semigroup$maybeCombine(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.semigroup.maybeCombine.A)), arrow.instances.const.semigroup.maybeCombine.T)), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.semigroup.maybeCombine.A)), arrow.instances.const.semigroup.maybeCombine.T)), arrow.typeclasses.Semigroup((arrow.instances.const.semigroup.maybeCombine.A)))arrow.instances.const.semigroup/arrow.-kind/maybe-combine.html
$dokka.location:arrow.instances.const.semigroup$plus(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.semigroup.plus.A)), arrow.instances.const.semigroup.plus.T)), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.semigroup.plus.A)), arrow.instances.const.semigroup.plus.T)), arrow.typeclasses.Semigroup((arrow.instances.const.semigroup.plus.A)))arrow.instances.const.semigroup/arrow.-kind/plus.html
$dokka.location:arrow.instances.const.semigroup$semigroup(arrow.typeclasses.Const.Companion, arrow.typeclasses.Semigroup((arrow.instances.const.semigroup.semigroup.A)))arrow.instances.const.semigroup/arrow.typeclasses.-const/semigroup.html
$dokka.location:arrow.instances.const.show$show(arrow.typeclasses.Const.Companion)arrow.instances.const.show/arrow.typeclasses.-const/show.html
$dokka.location:arrow.instances.const.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.traverse.flatTraverse.X)), arrow.instances.const.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.traverse.flatTraverse.X)))), arrow.typeclasses.Applicative((arrow.instances.const.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.const.traverse.flatTraverse.A, arrow.Kind((arrow.instances.const.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.traverse.flatTraverse.X)), arrow.instances.const.traverse.flatTraverse.B)))))))arrow.instances.const.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.const.traverse$map(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.traverse.map.X)), arrow.instances.const.traverse.map.A)), kotlin.Function1((arrow.instances.const.traverse.map.A, arrow.instances.const.traverse.map.B)))arrow.instances.const.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.const.traverse$sequence(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.traverse.sequence.X)), arrow.Kind((arrow.instances.const.traverse.sequence.G, arrow.instances.const.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.const.traverse.sequence.G)))arrow.instances.const.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.const.traverse$traverse(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.instances.const.traverse.traverse.X)), arrow.instances.const.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.const.traverse.traverse.G)), kotlin.Function1((arrow.instances.const.traverse.traverse.A, arrow.Kind((arrow.instances.const.traverse.traverse.G, arrow.instances.const.traverse.traverse.B)))))arrow.instances.const.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.const.traverse$traverse(arrow.typeclasses.Const.Companion)arrow.instances.const.traverse/arrow.typeclasses.-const/traverse.html
$dokka.location:arrow.instances.either.applicative$ap(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.ap.L)), arrow.instances.either.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.ap.L)), kotlin.Function1((arrow.instances.either.applicative.ap.A, arrow.instances.either.applicative.ap.B)))))arrow.instances.either.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.either.applicative$applicative(arrow.core.Either.Companion)arrow.instances.either.applicative/arrow.core.-either/applicative.html
$dokka.location:arrow.instances.either.applicative$map(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.map.L)), arrow.instances.either.applicative.map.A)), kotlin.Function1((arrow.instances.either.applicative.map.A, arrow.instances.either.applicative.map.B)))arrow.instances.either.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.either.applicative$map2(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.map2.L)), arrow.instances.either.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.map2.L)), arrow.instances.either.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.either.applicative.map2.A, arrow.instances.either.applicative.map2.B)), arrow.instances.either.applicative.map2.Z)))arrow.instances.either.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.either.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.map2Eval.L)), arrow.instances.either.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.map2Eval.L)), arrow.instances.either.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.either.applicative.map2Eval.A, arrow.instances.either.applicative.map2Eval.B)), arrow.instances.either.applicative.map2Eval.Z)))arrow.instances.either.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.either.applicative$plus(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.plus.L)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.plus.L)), java.math.BigDecimal)))arrow.instances.either.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple2((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple3((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple4((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C, arrow.instances.either.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple5((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C, arrow.instances.either.applicative.product.D, arrow.instances.either.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple6((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C, arrow.instances.either.applicative.product.D, arrow.instances.either.applicative.product.E, arrow.instances.either.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple7((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C, arrow.instances.either.applicative.product.D, arrow.instances.either.applicative.product.E, arrow.instances.either.applicative.product.FF, arrow.instances.either.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple8((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C, arrow.instances.either.applicative.product.D, arrow.instances.either.applicative.product.E, arrow.instances.either.applicative.product.FF, arrow.instances.either.applicative.product.G, arrow.instances.either.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.core.Tuple9((arrow.instances.either.applicative.product.A, arrow.instances.either.applicative.product.B, arrow.instances.either.applicative.product.C, arrow.instances.either.applicative.product.D, arrow.instances.either.applicative.product.E, arrow.instances.either.applicative.product.FF, arrow.instances.either.applicative.product.G, arrow.instances.either.applicative.product.H, arrow.instances.either.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.Z)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicative.product.L)), arrow.instances.either.applicative.product.B)))arrow.instances.either.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.either.applicativeError$applicativeError(arrow.core.Either.Companion)arrow.instances.either.applicative-error/arrow.core.-either/applicative-error.html
$dokka.location:arrow.instances.either.applicativeError$attempt(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicativeError.attempt.L)), arrow.instances.either.applicativeError.attempt.A)))arrow.instances.either.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.instances.either.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicativeError.catch.L)), kotlin.Throwable)), kotlin.Function0((arrow.instances.either.applicativeError.catch.A)))arrow.instances.either.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.instances.either.applicativeError$fromEither(arrow.core.Either((arrow.instances.either.applicativeError.fromEither.EE, arrow.instances.either.applicativeError.fromEither.A)), kotlin.Function1((arrow.instances.either.applicativeError.fromEither.EE, arrow.instances.either.applicativeError.fromEither.L)))arrow.instances.either.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.instances.either.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.instances.either.applicativeError.fromOption.A)), kotlin.Function0((arrow.instances.either.applicativeError.fromOption.L)))arrow.instances.either.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.instances.either.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.instances.either.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, arrow.instances.either.applicativeError.fromTry.L)))arrow.instances.either.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.instances.either.applicativeError$handleError(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicativeError.handleError.L)), arrow.instances.either.applicativeError.handleError.A)), kotlin.Function1((arrow.instances.either.applicativeError.handleError.L, arrow.instances.either.applicativeError.handleError.A)))arrow.instances.either.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.instances.either.applicativeError$handleErrorWith(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.applicativeError.handleErrorWith.L)), arrow.instances.either.applicativeError.handleErrorWith.A)), kotlin.Function1((arrow.instances.either.applicativeError.handleErrorWith.L, arrow.Kind((arrow.Kind((arrow.core.ForEither, )), arrow.instances.either.applicativeError.handleErrorWith.A)))))arrow.instances.either.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.instances.either.bifunctor$bifunctor(arrow.core.Either.Companion)arrow.instances.either.bifunctor/arrow.core.-either/bifunctor.html
$dokka.location:arrow.instances.either.bifunctor$bimap(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.bifunctor.bimap.A)), arrow.instances.either.bifunctor.bimap.B)), kotlin.Function1((arrow.instances.either.bifunctor.bimap.A, arrow.instances.either.bifunctor.bimap.C)), kotlin.Function1((arrow.instances.either.bifunctor.bimap.B, arrow.instances.either.bifunctor.bimap.D)))arrow.instances.either.bifunctor/arrow.-kind/bimap.html
$dokka.location:arrow.instances.either.bifunctor$leftWiden(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.bifunctor.leftWiden.A)), arrow.instances.either.bifunctor.leftWiden.B)))arrow.instances.either.bifunctor/arrow.-kind/left-widen.html
$dokka.location:arrow.instances.either.bifunctor$mapLeft(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.bifunctor.mapLeft.A)), arrow.instances.either.bifunctor.mapLeft.B)), kotlin.Function1((arrow.instances.either.bifunctor.mapLeft.A, arrow.instances.either.bifunctor.mapLeft.C)))arrow.instances.either.bifunctor/arrow.-kind/map-left.html
$dokka.location:arrow.instances.either.eq$eq(arrow.core.Either.Companion, arrow.typeclasses.Eq((arrow.instances.either.eq.eq.L)), arrow.typeclasses.Eq((arrow.instances.either.eq.eq.R)))arrow.instances.either.eq/arrow.core.-either/eq.html
$dokka.location:arrow.instances.either.eq$neqv(arrow.core.Either((arrow.instances.either.eq.neqv.L, arrow.instances.either.eq.neqv.R)), arrow.core.Either((arrow.instances.either.eq.neqv.L, arrow.instances.either.eq.neqv.R)), arrow.typeclasses.Eq((arrow.instances.either.eq.neqv.L)), arrow.typeclasses.Eq((arrow.instances.either.eq.neqv.R)))arrow.instances.either.eq/arrow.core.-either/neqv.html
$dokka.location:arrow.instances.either.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.combineAll.L)), arrow.instances.either.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.either.foldable.combineAll.A)))arrow.instances.either.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.either.foldable$exists(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.exists.L)), arrow.instances.either.foldable.exists.A)), kotlin.Function1((arrow.instances.either.foldable.exists.A, kotlin.Boolean)))arrow.instances.either.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.either.foldable$find(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.find.L)), arrow.instances.either.foldable.find.A)), kotlin.Function1((arrow.instances.either.foldable.find.A, kotlin.Boolean)))arrow.instances.either.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.either.foldable$fold(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.fold.L)), arrow.instances.either.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.either.foldable.fold.A)))arrow.instances.either.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.either.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.foldLeft.L)), arrow.instances.either.foldable.foldLeft.A)), arrow.instances.either.foldable.foldLeft.B, kotlin.Function2((arrow.instances.either.foldable.foldLeft.B, arrow.instances.either.foldable.foldLeft.A, )))arrow.instances.either.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.either.foldable$foldM(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.foldM.L)), arrow.instances.either.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.either.foldable.foldM.G)), arrow.instances.either.foldable.foldM.B, kotlin.Function2((arrow.instances.either.foldable.foldM.B, arrow.instances.either.foldable.foldM.A, arrow.Kind((arrow.instances.either.foldable.foldM.G, )))))arrow.instances.either.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.either.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.foldMap.L)), arrow.instances.either.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.either.foldable.foldMap.B)), kotlin.Function1((arrow.instances.either.foldable.foldMap.A, arrow.instances.either.foldable.foldMap.B)))arrow.instances.either.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.either.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.foldMapM.L)), arrow.instances.either.foldable.foldMapM.A)), arrow.instances.either.foldable.foldMapM.MA, arrow.instances.either.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.either.foldable.foldMapM.A, arrow.Kind((arrow.instances.either.foldable.foldMapM.G, arrow.instances.either.foldable.foldMapM.B)))))arrow.instances.either.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.either.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.foldRight.L)), arrow.instances.either.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.either.foldable.foldRight.B)), kotlin.Function2((arrow.instances.either.foldable.foldRight.A, arrow.core.Eval((arrow.instances.either.foldable.foldRight.B)), )))arrow.instances.either.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.either.foldable$foldable(arrow.core.Either.Companion)arrow.instances.either.foldable/arrow.core.-either/foldable.html
$dokka.location:arrow.instances.either.foldable$forAll(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.forAll.L)), arrow.instances.either.foldable.forAll.A)), kotlin.Function1((arrow.instances.either.foldable.forAll.A, kotlin.Boolean)))arrow.instances.either.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.either.foldable$get(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.get.L)), arrow.instances.either.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.get.A)))), kotlin.Long)arrow.instances.either.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.either.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.isEmpty.L)), arrow.instances.either.foldable.isEmpty.A)))arrow.instances.either.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.either.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.nonEmpty.L)), arrow.instances.either.foldable.nonEmpty.A)))arrow.instances.either.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.either.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.reduceLeftOption.L)), arrow.instances.either.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.either.foldable.reduceLeftOption.A, , )))arrow.instances.either.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.either.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.reduceLeftToOption.L)), arrow.instances.either.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.either.foldable.reduceLeftToOption.A, arrow.instances.either.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.either.foldable.reduceLeftToOption.B, arrow.instances.either.foldable.reduceLeftToOption.A, )))arrow.instances.either.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.either.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.reduceRightOption.L)), arrow.instances.either.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.either.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.either.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.either.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.reduceRightToOption.L)), arrow.instances.either.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.either.foldable.reduceRightToOption.A, arrow.instances.either.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.either.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.either.foldable.reduceRightToOption.B)), )))arrow.instances.either.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.either.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.sequence_.L)), arrow.Kind((arrow.instances.either.foldable.sequence_.G, arrow.instances.either.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.either.foldable.sequence_.G)))arrow.instances.either.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.either.foldable$size(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.size.L)), arrow.instances.either.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.either.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.either.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.foldable.traverse_.L)), arrow.instances.either.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.either.foldable.traverse_.G)), kotlin.Function1((arrow.instances.either.foldable.traverse_.A, arrow.Kind((arrow.instances.either.foldable.traverse_.G, arrow.instances.either.foldable.traverse_.B)))))arrow.instances.either.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.either.functor$as(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.as.L)), arrow.instances.either.functor.as.A)), arrow.instances.either.functor.as.B)arrow.instances.either.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.either.functor$fproduct(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.fproduct.L)), arrow.instances.either.functor.fproduct.A)), kotlin.Function1((arrow.instances.either.functor.fproduct.A, arrow.instances.either.functor.fproduct.B)))arrow.instances.either.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.either.functor$functor(arrow.core.Either.Companion)arrow.instances.either.functor/arrow.core.-either/functor.html
$dokka.location:arrow.instances.either.functor$imap(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.imap.L)), arrow.instances.either.functor.imap.A)), kotlin.Function1((arrow.instances.either.functor.imap.A, arrow.instances.either.functor.imap.B)), kotlin.Function1((arrow.instances.either.functor.imap.B, arrow.instances.either.functor.imap.A)))arrow.instances.either.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.either.functor$map(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.map.L)), arrow.instances.either.functor.map.A)), kotlin.Function1((arrow.instances.either.functor.map.A, arrow.instances.either.functor.map.B)))arrow.instances.either.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.either.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.tupleLeft.L)), arrow.instances.either.functor.tupleLeft.A)), arrow.instances.either.functor.tupleLeft.B)arrow.instances.either.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.either.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.tupleRight.L)), arrow.instances.either.functor.tupleRight.A)), arrow.instances.either.functor.tupleRight.B)arrow.instances.either.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.either.functor$void(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.void.L)), arrow.instances.either.functor.void.A)))arrow.instances.either.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.either.functor$widen(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.functor.widen.L)), arrow.instances.either.functor.widen.A)))arrow.instances.either.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.either.hash$hash(arrow.core.Either.Companion, arrow.typeclasses.Hash((arrow.instances.either.hash.hash.L)), arrow.typeclasses.Hash((arrow.instances.either.hash.hash.R)))arrow.instances.either.hash/arrow.core.-either/hash.html
$dokka.location:arrow.instances.either.monad$ap(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.ap.L)), arrow.instances.either.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.ap.L)), kotlin.Function1((arrow.instances.either.monad.ap.A, arrow.instances.either.monad.ap.B)))))arrow.instances.either.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.either.monad$effectM(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.effectM.L)), arrow.instances.either.monad.effectM.A)), kotlin.Function1((arrow.instances.either.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.effectM.L)), arrow.instances.either.monad.effectM.B)))))arrow.instances.either.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.either.monad$flatMap(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.flatMap.L)), arrow.instances.either.monad.flatMap.A)), kotlin.Function1((arrow.instances.either.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.flatMap.L)), arrow.instances.either.monad.flatMap.B)))))arrow.instances.either.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.either.monad$flatten(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.flatten.L)), arrow.Kind((, arrow.instances.either.monad.flatten.A)))))arrow.instances.either.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.either.monad$followedBy(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.followedBy.L)), arrow.instances.either.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.followedBy.L)), arrow.instances.either.monad.followedBy.B)))arrow.instances.either.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.either.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.followedByEval.L)), arrow.instances.either.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.followedByEval.L)), arrow.instances.either.monad.followedByEval.B)))))arrow.instances.either.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.either.monad$forEffect(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.forEffect.L)), arrow.instances.either.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.forEffect.L)), arrow.instances.either.monad.forEffect.B)))arrow.instances.either.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.either.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.forEffectEval.L)), arrow.instances.either.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.forEffectEval.L)), arrow.instances.either.monad.forEffectEval.B)))))arrow.instances.either.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.either.monad$ifM(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.ifM.L)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.ifM.L)), arrow.instances.either.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.ifM.L)), arrow.instances.either.monad.ifM.B)))))arrow.instances.either.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.either.monad$map(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.map.L)), arrow.instances.either.monad.map.A)), kotlin.Function1((arrow.instances.either.monad.map.A, arrow.instances.either.monad.map.B)))arrow.instances.either.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.either.monad$monad(arrow.core.Either.Companion)arrow.instances.either.monad/arrow.core.-either/monad.html
$dokka.location:arrow.instances.either.monad$mproduct(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.mproduct.L)), arrow.instances.either.monad.mproduct.A)), kotlin.Function1((arrow.instances.either.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monad.mproduct.L)), arrow.instances.either.monad.mproduct.B)))))arrow.instances.either.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.either.monadError$ensure(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.monadError.ensure.L)), arrow.instances.either.monadError.ensure.A)), kotlin.Function0((arrow.instances.either.monadError.ensure.L)), kotlin.Function1((arrow.instances.either.monadError.ensure.A, kotlin.Boolean)))arrow.instances.either.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.instances.either.monadError$monadError(arrow.core.Either.Companion)arrow.instances.either.monad-error/arrow.core.-either/monad-error.html
$dokka.location:arrow.instances.either.monoid$combineAll(kotlin.collections.Collection((arrow.core.Either((arrow.instances.either.monoid.combineAll.L, arrow.instances.either.monoid.combineAll.R)))), arrow.typeclasses.Monoid((arrow.instances.either.monoid.combineAll.L)), arrow.typeclasses.Monoid((arrow.instances.either.monoid.combineAll.R)))arrow.instances.either.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.either.monoid$monoid(arrow.core.Either.Companion, arrow.typeclasses.Monoid((arrow.instances.either.monoid.monoid.L)), arrow.typeclasses.Monoid((arrow.instances.either.monoid.monoid.R)))arrow.instances.either.monoid/arrow.core.-either/monoid.html
$dokka.location:arrow.instances.either.semigroup$maybeCombine(arrow.core.Either((arrow.instances.either.semigroup.maybeCombine.L, arrow.instances.either.semigroup.maybeCombine.R)), arrow.core.Either((arrow.instances.either.semigroup.maybeCombine.L, arrow.instances.either.semigroup.maybeCombine.R)), arrow.typeclasses.Semigroup((arrow.instances.either.semigroup.maybeCombine.L)), arrow.typeclasses.Semigroup((arrow.instances.either.semigroup.maybeCombine.R)))arrow.instances.either.semigroup/arrow.core.-either/maybe-combine.html
$dokka.location:arrow.instances.either.semigroup$plus(arrow.core.Either((arrow.instances.either.semigroup.plus.L, arrow.instances.either.semigroup.plus.R)), arrow.core.Either((arrow.instances.either.semigroup.plus.L, arrow.instances.either.semigroup.plus.R)), arrow.typeclasses.Semigroup((arrow.instances.either.semigroup.plus.L)), arrow.typeclasses.Semigroup((arrow.instances.either.semigroup.plus.R)))arrow.instances.either.semigroup/arrow.core.-either/plus.html
$dokka.location:arrow.instances.either.semigroup$semigroup(arrow.core.Either.Companion, arrow.typeclasses.Semigroup((arrow.instances.either.semigroup.semigroup.L)), arrow.typeclasses.Semigroup((arrow.instances.either.semigroup.semigroup.R)))arrow.instances.either.semigroup/arrow.core.-either/semigroup.html
$dokka.location:arrow.instances.either.semigroupK$combineK(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.semigroupK.combineK.L)), arrow.instances.either.semigroupK.combineK.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.semigroupK.combineK.L)), arrow.instances.either.semigroupK.combineK.A)))arrow.instances.either.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.either.semigroupK$semigroupK(arrow.core.Either.Companion)arrow.instances.either.semigroup-k/arrow.core.-either/semigroup-k.html
$dokka.location:arrow.instances.either.show$show(arrow.core.Either.Companion)arrow.instances.either.show/arrow.core.-either/show.html
$dokka.location:arrow.instances.either.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.traverse.flatTraverse.L)), arrow.instances.either.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.either.traverse.flatTraverse.L)))), arrow.typeclasses.Applicative((arrow.instances.either.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.either.traverse.flatTraverse.A, arrow.Kind((arrow.instances.either.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.traverse.flatTraverse.L)), arrow.instances.either.traverse.flatTraverse.B)))))))arrow.instances.either.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.either.traverse$map(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.traverse.map.L)), arrow.instances.either.traverse.map.A)), kotlin.Function1((arrow.instances.either.traverse.map.A, arrow.instances.either.traverse.map.B)))arrow.instances.either.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.either.traverse$sequence(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.traverse.sequence.L)), arrow.Kind((arrow.instances.either.traverse.sequence.G, arrow.instances.either.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.either.traverse.sequence.G)))arrow.instances.either.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.either.traverse$traverse(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.instances.either.traverse.traverse.L)), arrow.instances.either.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.either.traverse.traverse.G)), kotlin.Function1((arrow.instances.either.traverse.traverse.A, arrow.Kind((arrow.instances.either.traverse.traverse.G, arrow.instances.either.traverse.traverse.B)))))arrow.instances.either.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.either.traverse$traverse(arrow.core.Either.Companion)arrow.instances.either.traverse/arrow.core.-either/traverse.html
$dokka.location:arrow.instances.eval.applicative$ap(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.ap.A)), arrow.Kind((arrow.core.ForEval, kotlin.Function1((arrow.instances.eval.applicative.ap.A, arrow.instances.eval.applicative.ap.B)))))arrow.instances.eval.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.eval.applicative$applicative(arrow.core.Eval.Companion)arrow.instances.eval.applicative/arrow.core.-eval/applicative.html
$dokka.location:arrow.instances.eval.applicative$map(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.map.A)), kotlin.Function1((arrow.instances.eval.applicative.map.A, arrow.instances.eval.applicative.map.B)))arrow.instances.eval.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.eval.applicative$map2(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.map2.A)), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.eval.applicative.map2.A, arrow.instances.eval.applicative.map2.B)), arrow.instances.eval.applicative.map2.Z)))arrow.instances.eval.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.eval.applicative$map2Eval(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.eval.applicative.map2Eval.A, arrow.instances.eval.applicative.map2Eval.B)), arrow.instances.eval.applicative.map2Eval.Z)))arrow.instances.eval.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.eval.applicative$plus(arrow.Kind((arrow.core.ForEval, java.math.BigDecimal)), arrow.Kind((arrow.core.ForEval, java.math.BigDecimal)))arrow.instances.eval.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple2((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple3((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple4((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C, arrow.instances.eval.applicative.product.D)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple5((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C, arrow.instances.eval.applicative.product.D, arrow.instances.eval.applicative.product.E)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple6((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C, arrow.instances.eval.applicative.product.D, arrow.instances.eval.applicative.product.E, arrow.instances.eval.applicative.product.FF)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple7((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C, arrow.instances.eval.applicative.product.D, arrow.instances.eval.applicative.product.E, arrow.instances.eval.applicative.product.FF, arrow.instances.eval.applicative.product.G)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple8((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C, arrow.instances.eval.applicative.product.D, arrow.instances.eval.applicative.product.E, arrow.instances.eval.applicative.product.FF, arrow.instances.eval.applicative.product.G, arrow.instances.eval.applicative.product.H)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple9((arrow.instances.eval.applicative.product.A, arrow.instances.eval.applicative.product.B, arrow.instances.eval.applicative.product.C, arrow.instances.eval.applicative.product.D, arrow.instances.eval.applicative.product.E, arrow.instances.eval.applicative.product.FF, arrow.instances.eval.applicative.product.G, arrow.instances.eval.applicative.product.H, arrow.instances.eval.applicative.product.I)))), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.Z)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.applicative$product(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.A)), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.applicative.product.B)))arrow.instances.eval.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.eval.bimonad$bimonad(arrow.core.Eval.Companion)arrow.instances.eval.bimonad/arrow.core.-eval/bimonad.html
$dokka.location:arrow.instances.eval.comonad$coflatMap(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.core.ForEval, arrow.instances.eval.comonad.coflatMap.A)), arrow.instances.eval.comonad.coflatMap.B)))arrow.instances.eval.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.eval.comonad$comonad(arrow.core.Eval.Companion)arrow.instances.eval.comonad/arrow.core.-eval/comonad.html
$dokka.location:arrow.instances.eval.comonad$duplicate(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.comonad.duplicate.A)))arrow.instances.eval.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.eval.comonad$extract(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.comonad.extract.A)))arrow.instances.eval.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.eval.functor$as(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.as.A)), arrow.instances.eval.functor.as.B)arrow.instances.eval.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.eval.functor$fproduct(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.fproduct.A)), kotlin.Function1((arrow.instances.eval.functor.fproduct.A, arrow.instances.eval.functor.fproduct.B)))arrow.instances.eval.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.eval.functor$functor(arrow.core.Eval.Companion)arrow.instances.eval.functor/arrow.core.-eval/functor.html
$dokka.location:arrow.instances.eval.functor$imap(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.imap.A)), kotlin.Function1((arrow.instances.eval.functor.imap.A, arrow.instances.eval.functor.imap.B)), kotlin.Function1((arrow.instances.eval.functor.imap.B, arrow.instances.eval.functor.imap.A)))arrow.instances.eval.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.eval.functor$map(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.map.A)), kotlin.Function1((arrow.instances.eval.functor.map.A, arrow.instances.eval.functor.map.B)))arrow.instances.eval.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.eval.functor$tupleLeft(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.tupleLeft.A)), arrow.instances.eval.functor.tupleLeft.B)arrow.instances.eval.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.eval.functor$tupleRight(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.tupleRight.A)), arrow.instances.eval.functor.tupleRight.B)arrow.instances.eval.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.eval.functor$void(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.void.A)))arrow.instances.eval.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.eval.functor$widen(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.functor.widen.A)))arrow.instances.eval.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.eval.monad$ap(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.ap.A)), arrow.Kind((arrow.core.ForEval, kotlin.Function1((arrow.instances.eval.monad.ap.A, arrow.instances.eval.monad.ap.B)))))arrow.instances.eval.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.eval.monad$effectM(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.effectM.A)), kotlin.Function1((arrow.instances.eval.monad.effectM.A, arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.effectM.B)))))arrow.instances.eval.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.eval.monad$flatMap(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.flatMap.A)), kotlin.Function1((arrow.instances.eval.monad.flatMap.A, arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.flatMap.B)))))arrow.instances.eval.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.eval.monad$flatten(arrow.Kind((arrow.core.ForEval, arrow.Kind((, arrow.instances.eval.monad.flatten.A)))))arrow.instances.eval.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.eval.monad$followedBy(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.followedBy.A)), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.followedBy.B)))arrow.instances.eval.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.eval.monad$followedByEval(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.followedByEval.B)))))arrow.instances.eval.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.eval.monad$forEffect(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.forEffect.A)), arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.forEffect.B)))arrow.instances.eval.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.eval.monad$forEffectEval(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.forEffectEval.B)))))arrow.instances.eval.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.eval.monad$ifM(arrow.Kind((arrow.core.ForEval, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.ifM.B)))))arrow.instances.eval.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.eval.monad$map(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.map.A)), kotlin.Function1((arrow.instances.eval.monad.map.A, arrow.instances.eval.monad.map.B)))arrow.instances.eval.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.eval.monad$monad(arrow.core.Eval.Companion)arrow.instances.eval.monad/arrow.core.-eval/monad.html
$dokka.location:arrow.instances.eval.monad$mproduct(arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.mproduct.A)), kotlin.Function1((arrow.instances.eval.monad.mproduct.A, arrow.Kind((arrow.core.ForEval, arrow.instances.eval.monad.mproduct.B)))))arrow.instances.eval.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.function0.applicative$ap(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.ap.A)), arrow.Kind((arrow.core.ForFunction0, kotlin.Function1((arrow.instances.function0.applicative.ap.A, arrow.instances.function0.applicative.ap.B)))))arrow.instances.function0.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.function0.applicative$applicative(arrow.core.Function0.Companion)arrow.instances.function0.applicative/arrow.core.-function0/applicative.html
$dokka.location:arrow.instances.function0.applicative$map(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.map.A)), kotlin.Function1((arrow.instances.function0.applicative.map.A, arrow.instances.function0.applicative.map.B)))arrow.instances.function0.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.function0.applicative$map2(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.map2.A)), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.function0.applicative.map2.A, arrow.instances.function0.applicative.map2.B)), arrow.instances.function0.applicative.map2.Z)))arrow.instances.function0.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.function0.applicative$map2Eval(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.function0.applicative.map2Eval.A, arrow.instances.function0.applicative.map2Eval.B)), arrow.instances.function0.applicative.map2Eval.Z)))arrow.instances.function0.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.function0.applicative$plus(arrow.Kind((arrow.core.ForFunction0, java.math.BigDecimal)), arrow.Kind((arrow.core.ForFunction0, java.math.BigDecimal)))arrow.instances.function0.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple2((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple3((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple4((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C, arrow.instances.function0.applicative.product.D)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple5((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C, arrow.instances.function0.applicative.product.D, arrow.instances.function0.applicative.product.E)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple6((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C, arrow.instances.function0.applicative.product.D, arrow.instances.function0.applicative.product.E, arrow.instances.function0.applicative.product.FF)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple7((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C, arrow.instances.function0.applicative.product.D, arrow.instances.function0.applicative.product.E, arrow.instances.function0.applicative.product.FF, arrow.instances.function0.applicative.product.G)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple8((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C, arrow.instances.function0.applicative.product.D, arrow.instances.function0.applicative.product.E, arrow.instances.function0.applicative.product.FF, arrow.instances.function0.applicative.product.G, arrow.instances.function0.applicative.product.H)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple9((arrow.instances.function0.applicative.product.A, arrow.instances.function0.applicative.product.B, arrow.instances.function0.applicative.product.C, arrow.instances.function0.applicative.product.D, arrow.instances.function0.applicative.product.E, arrow.instances.function0.applicative.product.FF, arrow.instances.function0.applicative.product.G, arrow.instances.function0.applicative.product.H, arrow.instances.function0.applicative.product.I)))), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.Z)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.applicative$product(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.A)), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.applicative.product.B)))arrow.instances.function0.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function0.bimonad$bimonad(arrow.core.Function0.Companion)arrow.instances.function0.bimonad/arrow.core.-function0/bimonad.html
$dokka.location:arrow.instances.function0.comonad$coflatMap(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.comonad.coflatMap.A)), arrow.instances.function0.comonad.coflatMap.B)))arrow.instances.function0.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.function0.comonad$comonad(arrow.core.Function0.Companion)arrow.instances.function0.comonad/arrow.core.-function0/comonad.html
$dokka.location:arrow.instances.function0.comonad$duplicate(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.comonad.duplicate.A)))arrow.instances.function0.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.function0.comonad$extract(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.comonad.extract.A)))arrow.instances.function0.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.function0.functor$as(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.as.A)), arrow.instances.function0.functor.as.B)arrow.instances.function0.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.function0.functor$fproduct(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.fproduct.A)), kotlin.Function1((arrow.instances.function0.functor.fproduct.A, arrow.instances.function0.functor.fproduct.B)))arrow.instances.function0.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.function0.functor$functor(arrow.core.Function0.Companion)arrow.instances.function0.functor/arrow.core.-function0/functor.html
$dokka.location:arrow.instances.function0.functor$imap(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.imap.A)), kotlin.Function1((arrow.instances.function0.functor.imap.A, arrow.instances.function0.functor.imap.B)), kotlin.Function1((arrow.instances.function0.functor.imap.B, arrow.instances.function0.functor.imap.A)))arrow.instances.function0.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.function0.functor$map(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.map.A)), kotlin.Function1((arrow.instances.function0.functor.map.A, arrow.instances.function0.functor.map.B)))arrow.instances.function0.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.function0.functor$tupleLeft(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.tupleLeft.A)), arrow.instances.function0.functor.tupleLeft.B)arrow.instances.function0.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.function0.functor$tupleRight(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.tupleRight.A)), arrow.instances.function0.functor.tupleRight.B)arrow.instances.function0.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.function0.functor$void(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.void.A)))arrow.instances.function0.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.function0.functor$widen(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.functor.widen.A)))arrow.instances.function0.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.function0.monad$ap(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.ap.A)), arrow.Kind((arrow.core.ForFunction0, kotlin.Function1((arrow.instances.function0.monad.ap.A, arrow.instances.function0.monad.ap.B)))))arrow.instances.function0.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.function0.monad$effectM(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.effectM.A)), kotlin.Function1((arrow.instances.function0.monad.effectM.A, arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.effectM.B)))))arrow.instances.function0.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.function0.monad$flatMap(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.flatMap.A)), kotlin.Function1((arrow.instances.function0.monad.flatMap.A, arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.flatMap.B)))))arrow.instances.function0.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.function0.monad$flatten(arrow.Kind((arrow.core.ForFunction0, arrow.Kind((, arrow.instances.function0.monad.flatten.A)))))arrow.instances.function0.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.function0.monad$followedBy(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.followedBy.A)), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.followedBy.B)))arrow.instances.function0.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.function0.monad$followedByEval(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.followedByEval.B)))))arrow.instances.function0.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.function0.monad$forEffect(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.forEffect.A)), arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.forEffect.B)))arrow.instances.function0.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.function0.monad$forEffectEval(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.forEffectEval.B)))))arrow.instances.function0.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.function0.monad$ifM(arrow.Kind((arrow.core.ForFunction0, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.ifM.B)))))arrow.instances.function0.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.function0.monad$map(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.map.A)), kotlin.Function1((arrow.instances.function0.monad.map.A, arrow.instances.function0.monad.map.B)))arrow.instances.function0.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.function0.monad$monad(arrow.core.Function0.Companion)arrow.instances.function0.monad/arrow.core.-function0/monad.html
$dokka.location:arrow.instances.function0.monad$mproduct(arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.mproduct.A)), kotlin.Function1((arrow.instances.function0.monad.mproduct.A, arrow.Kind((arrow.core.ForFunction0, arrow.instances.function0.monad.mproduct.B)))))arrow.instances.function0.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.function1.applicative$ap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.ap.I)), arrow.instances.function1.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.ap.I)), kotlin.Function1((arrow.instances.function1.applicative.ap.A, arrow.instances.function1.applicative.ap.B)))))arrow.instances.function1.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.function1.applicative$applicative(arrow.core.Function1.Companion)arrow.instances.function1.applicative/arrow.core.-function1/applicative.html
$dokka.location:arrow.instances.function1.applicative$map(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.map.I)), arrow.instances.function1.applicative.map.A)), kotlin.Function1((arrow.instances.function1.applicative.map.A, arrow.instances.function1.applicative.map.B)))arrow.instances.function1.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.function1.applicative$map2(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.map2.I)), arrow.instances.function1.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.map2.I)), arrow.instances.function1.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.function1.applicative.map2.A, arrow.instances.function1.applicative.map2.B)), arrow.instances.function1.applicative.map2.Z)))arrow.instances.function1.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.function1.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.map2Eval.I)), arrow.instances.function1.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.map2Eval.I)), arrow.instances.function1.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.function1.applicative.map2Eval.A, arrow.instances.function1.applicative.map2Eval.B)), arrow.instances.function1.applicative.map2Eval.Z)))arrow.instances.function1.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.function1.applicative$plus(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.plus.I)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.plus.I)), java.math.BigDecimal)))arrow.instances.function1.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple2((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple3((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple4((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C, arrow.instances.function1.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple5((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C, arrow.instances.function1.applicative.product.D, arrow.instances.function1.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple6((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C, arrow.instances.function1.applicative.product.D, arrow.instances.function1.applicative.product.E, arrow.instances.function1.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple7((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C, arrow.instances.function1.applicative.product.D, arrow.instances.function1.applicative.product.E, arrow.instances.function1.applicative.product.FF, arrow.instances.function1.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple8((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C, arrow.instances.function1.applicative.product.D, arrow.instances.function1.applicative.product.E, arrow.instances.function1.applicative.product.FF, arrow.instances.function1.applicative.product.G, arrow.instances.function1.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.core.Tuple9((arrow.instances.function1.applicative.product.A, arrow.instances.function1.applicative.product.B, arrow.instances.function1.applicative.product.C, arrow.instances.function1.applicative.product.D, arrow.instances.function1.applicative.product.E, arrow.instances.function1.applicative.product.FF, arrow.instances.function1.applicative.product.G, arrow.instances.function1.applicative.product.H, )))), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.Z)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.applicative.product.I)), arrow.instances.function1.applicative.product.B)))arrow.instances.function1.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.function1.category$andThen(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.category.andThen.A)), arrow.instances.function1.category.andThen.B)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.category.andThen.B)), arrow.instances.function1.category.andThen.C)))arrow.instances.function1.category/arrow.-kind/and-then.html
$dokka.location:arrow.instances.function1.category$category(arrow.core.Function1.Companion)arrow.instances.function1.category/arrow.core.-function1/category.html
$dokka.location:arrow.instances.function1.category$compose(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.category.compose.B)), arrow.instances.function1.category.compose.C)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.category.compose.A)), arrow.instances.function1.category.compose.B)))arrow.instances.function1.category/arrow.-kind/compose.html
$dokka.location:arrow.instances.function1.contravariant$contramap(arrow.Kind((arrow.typeclasses.Conested((arrow.core.ForFunction1, arrow.instances.function1.contravariant.contramap.O)), arrow.instances.function1.contravariant.contramap.A)), kotlin.Function1((arrow.instances.function1.contravariant.contramap.B, arrow.instances.function1.contravariant.contramap.A)))arrow.instances.function1.contravariant/arrow.-kind/contramap.html
$dokka.location:arrow.instances.function1.contravariant$contravariant(arrow.core.Function1.Companion)arrow.instances.function1.contravariant/arrow.core.-function1/contravariant.html
$dokka.location:arrow.instances.function1.contravariant$imap(arrow.Kind((arrow.typeclasses.Conested((arrow.core.ForFunction1, arrow.instances.function1.contravariant.imap.O)), arrow.instances.function1.contravariant.imap.A)), kotlin.Function1((arrow.instances.function1.contravariant.imap.A, arrow.instances.function1.contravariant.imap.B)), kotlin.Function1((arrow.instances.function1.contravariant.imap.B, arrow.instances.function1.contravariant.imap.A)))arrow.instances.function1.contravariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.function1.contravariant$narrow(arrow.Kind((arrow.typeclasses.Conested((arrow.core.ForFunction1, arrow.instances.function1.contravariant.narrow.O)), arrow.instances.function1.contravariant.narrow.A)))arrow.instances.function1.contravariant/arrow.-kind/narrow.html
$dokka.location:arrow.instances.function1.functor$as(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.as.I)), arrow.instances.function1.functor.as.A)), arrow.instances.function1.functor.as.B)arrow.instances.function1.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.function1.functor$fproduct(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.fproduct.I)), arrow.instances.function1.functor.fproduct.A)), kotlin.Function1((arrow.instances.function1.functor.fproduct.A, arrow.instances.function1.functor.fproduct.B)))arrow.instances.function1.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.function1.functor$functor(arrow.core.Function1.Companion)arrow.instances.function1.functor/arrow.core.-function1/functor.html
$dokka.location:arrow.instances.function1.functor$imap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.imap.I)), arrow.instances.function1.functor.imap.A)), kotlin.Function1((arrow.instances.function1.functor.imap.A, arrow.instances.function1.functor.imap.B)), kotlin.Function1((arrow.instances.function1.functor.imap.B, arrow.instances.function1.functor.imap.A)))arrow.instances.function1.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.function1.functor$map(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.map.I)), arrow.instances.function1.functor.map.A)), kotlin.Function1((arrow.instances.function1.functor.map.A, arrow.instances.function1.functor.map.B)))arrow.instances.function1.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.function1.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.tupleLeft.I)), arrow.instances.function1.functor.tupleLeft.A)), arrow.instances.function1.functor.tupleLeft.B)arrow.instances.function1.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.function1.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.tupleRight.I)), arrow.instances.function1.functor.tupleRight.A)), arrow.instances.function1.functor.tupleRight.B)arrow.instances.function1.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.function1.functor$void(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.void.I)), arrow.instances.function1.functor.void.A)))arrow.instances.function1.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.function1.functor$widen(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.functor.widen.I)), arrow.instances.function1.functor.widen.A)))arrow.instances.function1.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.function1.monad$ap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.ap.I)), arrow.instances.function1.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.ap.I)), kotlin.Function1((arrow.instances.function1.monad.ap.A, arrow.instances.function1.monad.ap.B)))))arrow.instances.function1.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.function1.monad$effectM(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.effectM.I)), arrow.instances.function1.monad.effectM.A)), kotlin.Function1((arrow.instances.function1.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.effectM.I)), arrow.instances.function1.monad.effectM.B)))))arrow.instances.function1.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.function1.monad$flatMap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.flatMap.I)), arrow.instances.function1.monad.flatMap.A)), kotlin.Function1((arrow.instances.function1.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.flatMap.I)), arrow.instances.function1.monad.flatMap.B)))))arrow.instances.function1.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.function1.monad$flatten(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.flatten.I)), arrow.Kind((, arrow.instances.function1.monad.flatten.A)))))arrow.instances.function1.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.function1.monad$followedBy(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.followedBy.I)), arrow.instances.function1.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.followedBy.I)), arrow.instances.function1.monad.followedBy.B)))arrow.instances.function1.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.function1.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.followedByEval.I)), arrow.instances.function1.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.followedByEval.I)), arrow.instances.function1.monad.followedByEval.B)))))arrow.instances.function1.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.function1.monad$forEffect(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.forEffect.I)), arrow.instances.function1.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.forEffect.I)), arrow.instances.function1.monad.forEffect.B)))arrow.instances.function1.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.function1.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.forEffectEval.I)), arrow.instances.function1.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.forEffectEval.I)), arrow.instances.function1.monad.forEffectEval.B)))))arrow.instances.function1.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.function1.monad$ifM(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.ifM.I)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.ifM.I)), arrow.instances.function1.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.ifM.I)), arrow.instances.function1.monad.ifM.B)))))arrow.instances.function1.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.function1.monad$map(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.map.I)), arrow.instances.function1.monad.map.A)), kotlin.Function1((arrow.instances.function1.monad.map.A, arrow.instances.function1.monad.map.B)))arrow.instances.function1.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.function1.monad$monad(arrow.core.Function1.Companion)arrow.instances.function1.monad/arrow.core.-function1/monad.html
$dokka.location:arrow.instances.function1.monad$mproduct(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.mproduct.I)), arrow.instances.function1.monad.mproduct.A)), kotlin.Function1((arrow.instances.function1.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.monad.mproduct.I)), arrow.instances.function1.monad.mproduct.B)))))arrow.instances.function1.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.function1.profunctor$dimap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.profunctor.dimap.A)), arrow.instances.function1.profunctor.dimap.B)), kotlin.Function1((arrow.instances.function1.profunctor.dimap.C, arrow.instances.function1.profunctor.dimap.A)), kotlin.Function1((arrow.instances.function1.profunctor.dimap.B, arrow.instances.function1.profunctor.dimap.D)))arrow.instances.function1.profunctor/arrow.-kind/dimap.html
$dokka.location:arrow.instances.function1.profunctor$lmap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.profunctor.lmap.A)), arrow.instances.function1.profunctor.lmap.B)), kotlin.Function1((arrow.instances.function1.profunctor.lmap.C, arrow.instances.function1.profunctor.lmap.A)))arrow.instances.function1.profunctor/arrow.-kind/lmap.html
$dokka.location:arrow.instances.function1.profunctor$profunctor(arrow.core.Function1.Companion)arrow.instances.function1.profunctor/arrow.core.-function1/profunctor.html
$dokka.location:arrow.instances.function1.profunctor$rmap(arrow.Kind((arrow.Kind((arrow.core.ForFunction1, arrow.instances.function1.profunctor.rmap.A)), arrow.instances.function1.profunctor.rmap.B)), kotlin.Function1((arrow.instances.function1.profunctor.rmap.B, arrow.instances.function1.profunctor.rmap.D)))arrow.instances.function1.profunctor/arrow.-kind/rmap.html
$dokka.location:arrow.instances.id.applicative$ap(arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.ap.A)), arrow.Kind((arrow.core.ForId, kotlin.Function1((arrow.instances.id.applicative.ap.A, arrow.instances.id.applicative.ap.B)))))arrow.instances.id.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.id.applicative$applicative(arrow.core.Id.Companion)arrow.instances.id.applicative/arrow.core.-id/applicative.html
$dokka.location:arrow.instances.id.applicative$map(arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.map.A)), kotlin.Function1((arrow.instances.id.applicative.map.A, arrow.instances.id.applicative.map.B)))arrow.instances.id.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.id.applicative$map2(arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.map2.A)), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.id.applicative.map2.A, arrow.instances.id.applicative.map2.B)), arrow.instances.id.applicative.map2.Z)))arrow.instances.id.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.id.applicative$map2Eval(arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.id.applicative.map2Eval.A, arrow.instances.id.applicative.map2Eval.B)), arrow.instances.id.applicative.map2Eval.Z)))arrow.instances.id.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.id.applicative$plus(arrow.Kind((arrow.core.ForId, java.math.BigDecimal)), arrow.Kind((arrow.core.ForId, java.math.BigDecimal)))arrow.instances.id.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple2((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple3((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple4((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C, arrow.instances.id.applicative.product.D)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple5((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C, arrow.instances.id.applicative.product.D, arrow.instances.id.applicative.product.E)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple6((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C, arrow.instances.id.applicative.product.D, arrow.instances.id.applicative.product.E, arrow.instances.id.applicative.product.FF)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple7((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C, arrow.instances.id.applicative.product.D, arrow.instances.id.applicative.product.E, arrow.instances.id.applicative.product.FF, arrow.instances.id.applicative.product.G)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple8((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C, arrow.instances.id.applicative.product.D, arrow.instances.id.applicative.product.E, arrow.instances.id.applicative.product.FF, arrow.instances.id.applicative.product.G, arrow.instances.id.applicative.product.H)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.core.Tuple9((arrow.instances.id.applicative.product.A, arrow.instances.id.applicative.product.B, arrow.instances.id.applicative.product.C, arrow.instances.id.applicative.product.D, arrow.instances.id.applicative.product.E, arrow.instances.id.applicative.product.FF, arrow.instances.id.applicative.product.G, arrow.instances.id.applicative.product.H, arrow.instances.id.applicative.product.I)))), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.Z)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.applicative$product(arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.A)), arrow.Kind((arrow.core.ForId, arrow.instances.id.applicative.product.B)))arrow.instances.id.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.id.bimonad$bimonad(arrow.core.Id.Companion)arrow.instances.id.bimonad/arrow.core.-id/bimonad.html
$dokka.location:arrow.instances.id.comonad$coflatMap(arrow.Kind((arrow.core.ForId, arrow.instances.id.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.core.ForId, arrow.instances.id.comonad.coflatMap.A)), arrow.instances.id.comonad.coflatMap.B)))arrow.instances.id.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.id.comonad$comonad(arrow.core.Id.Companion)arrow.instances.id.comonad/arrow.core.-id/comonad.html
$dokka.location:arrow.instances.id.comonad$duplicate(arrow.Kind((arrow.core.ForId, arrow.instances.id.comonad.duplicate.A)))arrow.instances.id.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.id.comonad$extract(arrow.Kind((arrow.core.ForId, arrow.instances.id.comonad.extract.A)))arrow.instances.id.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.id.eq$eq(arrow.core.Id.Companion, arrow.typeclasses.Eq((arrow.instances.id.eq.eq.A)))arrow.instances.id.eq/arrow.core.-id/eq.html
$dokka.location:arrow.instances.id.eq$neqv(arrow.core.Id((arrow.instances.id.eq.neqv.A)), arrow.core.Id((arrow.instances.id.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.id.eq.neqv.A)))arrow.instances.id.eq/arrow.core.-id/neqv.html
$dokka.location:arrow.instances.id.foldable$combineAll(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.id.foldable.combineAll.A)))arrow.instances.id.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.id.foldable$exists(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.exists.A)), kotlin.Function1((arrow.instances.id.foldable.exists.A, kotlin.Boolean)))arrow.instances.id.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.id.foldable$find(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.find.A)), kotlin.Function1((arrow.instances.id.foldable.find.A, kotlin.Boolean)))arrow.instances.id.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.id.foldable$fold(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.id.foldable.fold.A)))arrow.instances.id.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.id.foldable$foldLeft(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.foldLeft.A)), arrow.instances.id.foldable.foldLeft.B, kotlin.Function2((arrow.instances.id.foldable.foldLeft.B, arrow.instances.id.foldable.foldLeft.A, )))arrow.instances.id.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.id.foldable$foldM(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.id.foldable.foldM.G)), arrow.instances.id.foldable.foldM.B, kotlin.Function2((arrow.instances.id.foldable.foldM.B, arrow.instances.id.foldable.foldM.A, arrow.Kind((arrow.instances.id.foldable.foldM.G, )))))arrow.instances.id.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.id.foldable$foldMap(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.id.foldable.foldMap.B)), kotlin.Function1((arrow.instances.id.foldable.foldMap.A, arrow.instances.id.foldable.foldMap.B)))arrow.instances.id.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.id.foldable$foldMapM(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.foldMapM.A)), arrow.instances.id.foldable.foldMapM.MA, arrow.instances.id.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.id.foldable.foldMapM.A, arrow.Kind((arrow.instances.id.foldable.foldMapM.G, arrow.instances.id.foldable.foldMapM.B)))))arrow.instances.id.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.id.foldable$foldRight(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.id.foldable.foldRight.B)), kotlin.Function2((arrow.instances.id.foldable.foldRight.A, arrow.core.Eval((arrow.instances.id.foldable.foldRight.B)), )))arrow.instances.id.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.id.foldable$foldable(arrow.core.Id.Companion)arrow.instances.id.foldable/arrow.core.-id/foldable.html
$dokka.location:arrow.instances.id.foldable$forAll(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.forAll.A)), kotlin.Function1((arrow.instances.id.foldable.forAll.A, kotlin.Boolean)))arrow.instances.id.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.id.foldable$get(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.id.foldable.get.A)))), kotlin.Long)arrow.instances.id.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.id.foldable$isEmpty(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.isEmpty.A)))arrow.instances.id.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.id.foldable$nonEmpty(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.nonEmpty.A)))arrow.instances.id.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.id.foldable$reduceLeftOption(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.id.foldable.reduceLeftOption.A, , )))arrow.instances.id.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.id.foldable$reduceLeftToOption(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.id.foldable.reduceLeftToOption.A, arrow.instances.id.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.id.foldable.reduceLeftToOption.B, arrow.instances.id.foldable.reduceLeftToOption.A, )))arrow.instances.id.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.id.foldable$reduceRightOption(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.id.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.id.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.id.foldable$reduceRightToOption(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.id.foldable.reduceRightToOption.A, arrow.instances.id.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.id.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.id.foldable.reduceRightToOption.B)), )))arrow.instances.id.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.id.foldable$sequence_(arrow.Kind((arrow.core.ForId, arrow.Kind((arrow.instances.id.foldable.sequence_.G, arrow.instances.id.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.id.foldable.sequence_.G)))arrow.instances.id.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.id.foldable$size(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.id.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.id.foldable$traverse_(arrow.Kind((arrow.core.ForId, arrow.instances.id.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.id.foldable.traverse_.G)), kotlin.Function1((arrow.instances.id.foldable.traverse_.A, arrow.Kind((arrow.instances.id.foldable.traverse_.G, arrow.instances.id.foldable.traverse_.B)))))arrow.instances.id.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.id.functor$as(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.as.A)), arrow.instances.id.functor.as.B)arrow.instances.id.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.id.functor$fproduct(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.fproduct.A)), kotlin.Function1((arrow.instances.id.functor.fproduct.A, arrow.instances.id.functor.fproduct.B)))arrow.instances.id.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.id.functor$functor(arrow.core.Id.Companion)arrow.instances.id.functor/arrow.core.-id/functor.html
$dokka.location:arrow.instances.id.functor$imap(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.imap.A)), kotlin.Function1((arrow.instances.id.functor.imap.A, arrow.instances.id.functor.imap.B)), kotlin.Function1((arrow.instances.id.functor.imap.B, arrow.instances.id.functor.imap.A)))arrow.instances.id.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.id.functor$map(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.map.A)), kotlin.Function1((arrow.instances.id.functor.map.A, arrow.instances.id.functor.map.B)))arrow.instances.id.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.id.functor$tupleLeft(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.tupleLeft.A)), arrow.instances.id.functor.tupleLeft.B)arrow.instances.id.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.id.functor$tupleRight(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.tupleRight.A)), arrow.instances.id.functor.tupleRight.B)arrow.instances.id.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.id.functor$void(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.void.A)))arrow.instances.id.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.id.functor$widen(arrow.Kind((arrow.core.ForId, arrow.instances.id.functor.widen.A)))arrow.instances.id.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.id.hash$hash(arrow.core.Id.Companion, arrow.typeclasses.Hash((arrow.instances.id.hash.hash.A)))arrow.instances.id.hash/arrow.core.-id/hash.html
$dokka.location:arrow.instances.id.monad$ap(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.ap.A)), arrow.Kind((arrow.core.ForId, kotlin.Function1((arrow.instances.id.monad.ap.A, arrow.instances.id.monad.ap.B)))))arrow.instances.id.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.id.monad$effectM(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.effectM.A)), kotlin.Function1((arrow.instances.id.monad.effectM.A, arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.effectM.B)))))arrow.instances.id.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.id.monad$flatMap(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.flatMap.A)), kotlin.Function1((arrow.instances.id.monad.flatMap.A, arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.flatMap.B)))))arrow.instances.id.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.id.monad$flatten(arrow.Kind((arrow.core.ForId, arrow.Kind((, arrow.instances.id.monad.flatten.A)))))arrow.instances.id.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.id.monad$followedBy(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.followedBy.A)), arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.followedBy.B)))arrow.instances.id.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.id.monad$followedByEval(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.followedByEval.B)))))arrow.instances.id.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.id.monad$forEffect(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.forEffect.A)), arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.forEffect.B)))arrow.instances.id.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.id.monad$forEffectEval(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.forEffectEval.B)))))arrow.instances.id.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.id.monad$ifM(arrow.Kind((arrow.core.ForId, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.ifM.B)))))arrow.instances.id.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.id.monad$map(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.map.A)), kotlin.Function1((arrow.instances.id.monad.map.A, arrow.instances.id.monad.map.B)))arrow.instances.id.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.id.monad$monad(arrow.core.Id.Companion)arrow.instances.id.monad/arrow.core.-id/monad.html
$dokka.location:arrow.instances.id.monad$mproduct(arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.mproduct.A)), kotlin.Function1((arrow.instances.id.monad.mproduct.A, arrow.Kind((arrow.core.ForId, arrow.instances.id.monad.mproduct.B)))))arrow.instances.id.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.id.show$show(arrow.core.Id.Companion)arrow.instances.id.show/arrow.core.-id/show.html
$dokka.location:arrow.instances.id.traverse$flatTraverse(arrow.Kind((arrow.core.ForId, arrow.instances.id.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.core.ForId)), arrow.typeclasses.Applicative((arrow.instances.id.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.id.traverse.flatTraverse.A, arrow.Kind((arrow.instances.id.traverse.flatTraverse.G, arrow.Kind((arrow.core.ForId, arrow.instances.id.traverse.flatTraverse.B)))))))arrow.instances.id.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.id.traverse$map(arrow.Kind((arrow.core.ForId, arrow.instances.id.traverse.map.A)), kotlin.Function1((arrow.instances.id.traverse.map.A, arrow.instances.id.traverse.map.B)))arrow.instances.id.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.id.traverse$sequence(arrow.Kind((arrow.core.ForId, arrow.Kind((arrow.instances.id.traverse.sequence.G, arrow.instances.id.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.id.traverse.sequence.G)))arrow.instances.id.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.id.traverse$traverse(arrow.Kind((arrow.core.ForId, arrow.instances.id.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.id.traverse.traverse.G)), kotlin.Function1((arrow.instances.id.traverse.traverse.A, arrow.Kind((arrow.instances.id.traverse.traverse.G, arrow.instances.id.traverse.traverse.B)))))arrow.instances.id.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.id.traverse$traverse(arrow.core.Id.Companion)arrow.instances.id.traverse/arrow.core.-id/traverse.html
$dokka.location:arrow.instances.monoid.invariant$imap(arrow.Kind((arrow.typeclasses.ForMonoid, arrow.instances.monoid.invariant.imap.A)), kotlin.Function1((arrow.instances.monoid.invariant.imap.A, arrow.instances.monoid.invariant.imap.B)), kotlin.Function1((arrow.instances.monoid.invariant.imap.B, arrow.instances.monoid.invariant.imap.A)))arrow.instances.monoid.invariant/arrow.-kind/imap.html
$dokka.location:arrow.instances.monoid.invariant$invariant(arrow.typeclasses.Monoid.Companion)arrow.instances.monoid.invariant/arrow.typeclasses.-monoid/invariant.html
$dokka.location:arrow.instances.option.applicative$ap(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.ap.A)), arrow.Kind((arrow.core.ForOption, kotlin.Function1((arrow.instances.option.applicative.ap.A, arrow.instances.option.applicative.ap.B)))))arrow.instances.option.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.option.applicative$applicative(arrow.core.Option.Companion)arrow.instances.option.applicative/arrow.core.-option/applicative.html
$dokka.location:arrow.instances.option.applicative$map(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.map.A)), kotlin.Function1((arrow.instances.option.applicative.map.A, arrow.instances.option.applicative.map.B)))arrow.instances.option.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.option.applicative$map2(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.map2.A)), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.option.applicative.map2.A, arrow.instances.option.applicative.map2.B)), arrow.instances.option.applicative.map2.Z)))arrow.instances.option.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.option.applicative$map2Eval(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.option.applicative.map2Eval.A, arrow.instances.option.applicative.map2Eval.B)), arrow.instances.option.applicative.map2Eval.Z)))arrow.instances.option.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.option.applicative$plus(arrow.Kind((arrow.core.ForOption, java.math.BigDecimal)), arrow.Kind((arrow.core.ForOption, java.math.BigDecimal)))arrow.instances.option.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple2((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple3((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple4((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C, arrow.instances.option.applicative.product.D)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple5((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C, arrow.instances.option.applicative.product.D, arrow.instances.option.applicative.product.E)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple6((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C, arrow.instances.option.applicative.product.D, arrow.instances.option.applicative.product.E, arrow.instances.option.applicative.product.FF)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple7((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C, arrow.instances.option.applicative.product.D, arrow.instances.option.applicative.product.E, arrow.instances.option.applicative.product.FF, arrow.instances.option.applicative.product.G)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple8((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C, arrow.instances.option.applicative.product.D, arrow.instances.option.applicative.product.E, arrow.instances.option.applicative.product.FF, arrow.instances.option.applicative.product.G, arrow.instances.option.applicative.product.H)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple9((arrow.instances.option.applicative.product.A, arrow.instances.option.applicative.product.B, arrow.instances.option.applicative.product.C, arrow.instances.option.applicative.product.D, arrow.instances.option.applicative.product.E, arrow.instances.option.applicative.product.FF, arrow.instances.option.applicative.product.G, arrow.instances.option.applicative.product.H, arrow.instances.option.applicative.product.I)))), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.Z)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicative$product(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.A)), arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicative.product.B)))arrow.instances.option.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.option.applicativeError$applicativeError(arrow.core.Option.Companion)arrow.instances.option.applicative-error/arrow.core.-option/applicative-error.html
$dokka.location:arrow.instances.option.applicativeError$attempt(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicativeError.attempt.A)))arrow.instances.option.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.instances.option.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.core.ForOption, kotlin.Throwable)), kotlin.Function0((arrow.instances.option.applicativeError.catch.A)))arrow.instances.option.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.instances.option.applicativeError$fromEither(arrow.core.Either((arrow.instances.option.applicativeError.fromEither.EE, arrow.instances.option.applicativeError.fromEither.A)), kotlin.Function1((arrow.instances.option.applicativeError.fromEither.EE, kotlin.Unit)))arrow.instances.option.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.instances.option.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Unit)))arrow.instances.option.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.instances.option.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.instances.option.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, kotlin.Unit)))arrow.instances.option.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.instances.option.applicativeError$handleError(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicativeError.handleError.A)), kotlin.Function1((kotlin.Unit, arrow.instances.option.applicativeError.handleError.A)))arrow.instances.option.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.instances.option.applicativeError$handleErrorWith(arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Unit, arrow.Kind((arrow.core.ForOption, arrow.instances.option.applicativeError.handleErrorWith.A)))))arrow.instances.option.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.instances.option.applicativeError$raiseError(kotlin.Unit)arrow.instances.option.applicative-error/kotlin.-unit/raise-error.html
$dokka.location:arrow.instances.option.eq$eq(arrow.core.Option.Companion, arrow.typeclasses.Eq((arrow.instances.option.eq.eq.A)))arrow.instances.option.eq/arrow.core.-option/eq.html
$dokka.location:arrow.instances.option.eq$neqv(arrow.core.Option((arrow.instances.option.eq.neqv.A)), arrow.core.Option((arrow.instances.option.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.option.eq.neqv.A)))arrow.instances.option.eq/arrow.core.-option/neqv.html
$dokka.location:arrow.instances.option.foldable$combineAll(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.option.foldable.combineAll.A)))arrow.instances.option.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.option.foldable$exists(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.exists.A)), kotlin.Function1((arrow.instances.option.foldable.exists.A, kotlin.Boolean)))arrow.instances.option.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.option.foldable$find(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.find.A)), kotlin.Function1((arrow.instances.option.foldable.find.A, kotlin.Boolean)))arrow.instances.option.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.option.foldable$fold(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.option.foldable.fold.A)))arrow.instances.option.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.option.foldable$foldLeft(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.foldLeft.A)), arrow.instances.option.foldable.foldLeft.B, kotlin.Function2((arrow.instances.option.foldable.foldLeft.B, arrow.instances.option.foldable.foldLeft.A, )))arrow.instances.option.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.option.foldable$foldM(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.option.foldable.foldM.G)), arrow.instances.option.foldable.foldM.B, kotlin.Function2((arrow.instances.option.foldable.foldM.B, arrow.instances.option.foldable.foldM.A, arrow.Kind((arrow.instances.option.foldable.foldM.G, )))))arrow.instances.option.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.option.foldable$foldMap(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.option.foldable.foldMap.B)), kotlin.Function1((arrow.instances.option.foldable.foldMap.A, arrow.instances.option.foldable.foldMap.B)))arrow.instances.option.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.option.foldable$foldMapM(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.foldMapM.A)), arrow.instances.option.foldable.foldMapM.MA, arrow.instances.option.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.option.foldable.foldMapM.A, arrow.Kind((arrow.instances.option.foldable.foldMapM.G, arrow.instances.option.foldable.foldMapM.B)))))arrow.instances.option.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.option.foldable$foldRight(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.option.foldable.foldRight.B)), kotlin.Function2((arrow.instances.option.foldable.foldRight.A, arrow.core.Eval((arrow.instances.option.foldable.foldRight.B)), )))arrow.instances.option.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.option.foldable$foldable(arrow.core.Option.Companion)arrow.instances.option.foldable/arrow.core.-option/foldable.html
$dokka.location:arrow.instances.option.foldable$forAll(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.forAll.A)), kotlin.Function1((arrow.instances.option.foldable.forAll.A, kotlin.Boolean)))arrow.instances.option.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.option.foldable$get(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.option.foldable.get.A)))), kotlin.Long)arrow.instances.option.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.option.foldable$isEmpty(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.isEmpty.A)))arrow.instances.option.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.option.foldable$nonEmpty(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.nonEmpty.A)))arrow.instances.option.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.option.foldable$reduceLeftOption(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.option.foldable.reduceLeftOption.A, , )))arrow.instances.option.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.option.foldable$reduceLeftToOption(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.option.foldable.reduceLeftToOption.A, arrow.instances.option.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.option.foldable.reduceLeftToOption.B, arrow.instances.option.foldable.reduceLeftToOption.A, )))arrow.instances.option.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.option.foldable$reduceRightOption(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.option.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.option.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.option.foldable$reduceRightToOption(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.option.foldable.reduceRightToOption.A, arrow.instances.option.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.option.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.option.foldable.reduceRightToOption.B)), )))arrow.instances.option.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.option.foldable$sequence_(arrow.Kind((arrow.core.ForOption, arrow.Kind((arrow.instances.option.foldable.sequence_.G, arrow.instances.option.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.option.foldable.sequence_.G)))arrow.instances.option.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.option.foldable$size(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.option.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.option.foldable$traverse_(arrow.Kind((arrow.core.ForOption, arrow.instances.option.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.option.foldable.traverse_.G)), kotlin.Function1((arrow.instances.option.foldable.traverse_.A, arrow.Kind((arrow.instances.option.foldable.traverse_.G, arrow.instances.option.foldable.traverse_.B)))))arrow.instances.option.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.option.functor$as(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.as.A)), arrow.instances.option.functor.as.B)arrow.instances.option.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.option.functor$fproduct(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.fproduct.A)), kotlin.Function1((arrow.instances.option.functor.fproduct.A, arrow.instances.option.functor.fproduct.B)))arrow.instances.option.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.option.functor$functor(arrow.core.Option.Companion)arrow.instances.option.functor/arrow.core.-option/functor.html
$dokka.location:arrow.instances.option.functor$imap(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.imap.A)), kotlin.Function1((arrow.instances.option.functor.imap.A, arrow.instances.option.functor.imap.B)), kotlin.Function1((arrow.instances.option.functor.imap.B, arrow.instances.option.functor.imap.A)))arrow.instances.option.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.option.functor$map(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.map.A)), kotlin.Function1((arrow.instances.option.functor.map.A, arrow.instances.option.functor.map.B)))arrow.instances.option.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.option.functor$tupleLeft(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.tupleLeft.A)), arrow.instances.option.functor.tupleLeft.B)arrow.instances.option.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.option.functor$tupleRight(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.tupleRight.A)), arrow.instances.option.functor.tupleRight.B)arrow.instances.option.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.option.functor$void(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.void.A)))arrow.instances.option.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.option.functor$widen(arrow.Kind((arrow.core.ForOption, arrow.instances.option.functor.widen.A)))arrow.instances.option.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.option.hash$hash(arrow.core.Option.Companion, arrow.typeclasses.Hash((arrow.instances.option.hash.hash.A)))arrow.instances.option.hash/arrow.core.-option/hash.html
$dokka.location:arrow.instances.option.monad$ap(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.ap.A)), arrow.Kind((arrow.core.ForOption, kotlin.Function1((arrow.instances.option.monad.ap.A, arrow.instances.option.monad.ap.B)))))arrow.instances.option.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.option.monad$effectM(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.effectM.A)), kotlin.Function1((arrow.instances.option.monad.effectM.A, arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.effectM.B)))))arrow.instances.option.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.option.monad$flatMap(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.flatMap.A)), kotlin.Function1((arrow.instances.option.monad.flatMap.A, arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.flatMap.B)))))arrow.instances.option.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.option.monad$flatten(arrow.Kind((arrow.core.ForOption, arrow.Kind((, arrow.instances.option.monad.flatten.A)))))arrow.instances.option.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.option.monad$followedBy(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.followedBy.A)), arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.followedBy.B)))arrow.instances.option.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.option.monad$followedByEval(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.followedByEval.B)))))arrow.instances.option.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.option.monad$forEffect(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.forEffect.A)), arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.forEffect.B)))arrow.instances.option.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.option.monad$forEffectEval(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.forEffectEval.B)))))arrow.instances.option.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.option.monad$ifM(arrow.Kind((arrow.core.ForOption, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.ifM.B)))))arrow.instances.option.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.option.monad$map(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.map.A)), kotlin.Function1((arrow.instances.option.monad.map.A, arrow.instances.option.monad.map.B)))arrow.instances.option.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.option.monad$monad(arrow.core.Option.Companion)arrow.instances.option.monad/arrow.core.-option/monad.html
$dokka.location:arrow.instances.option.monad$mproduct(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.mproduct.A)), kotlin.Function1((arrow.instances.option.monad.mproduct.A, arrow.Kind((arrow.core.ForOption, arrow.instances.option.monad.mproduct.B)))))arrow.instances.option.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.option.monadError$ensure(arrow.Kind((arrow.core.ForOption, arrow.instances.option.monadError.ensure.A)), kotlin.Function0((kotlin.Unit)), kotlin.Function1((arrow.instances.option.monadError.ensure.A, kotlin.Boolean)))arrow.instances.option.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.instances.option.monadError$monadError(arrow.core.Option.Companion)arrow.instances.option.monad-error/arrow.core.-option/monad-error.html
$dokka.location:arrow.instances.option.monoid$combineAll(kotlin.collections.Collection((arrow.core.Option((arrow.instances.option.monoid.combineAll.A)))), arrow.typeclasses.Semigroup((arrow.instances.option.monoid.combineAll.A)))arrow.instances.option.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.option.monoid$monoid(arrow.core.Option.Companion, arrow.typeclasses.Semigroup((arrow.instances.option.monoid.monoid.A)))arrow.instances.option.monoid/arrow.core.-option/monoid.html
$dokka.location:arrow.instances.option.monoidK$monoidK(arrow.core.Option.Companion)arrow.instances.option.monoid-k/arrow.core.-option/monoid-k.html
$dokka.location:arrow.instances.option.semigroup$maybeCombine(arrow.core.Option((arrow.instances.option.semigroup.maybeCombine.A)), arrow.core.Option((arrow.instances.option.semigroup.maybeCombine.A)), arrow.typeclasses.Semigroup((arrow.instances.option.semigroup.maybeCombine.A)))arrow.instances.option.semigroup/arrow.core.-option/maybe-combine.html
$dokka.location:arrow.instances.option.semigroup$plus(arrow.core.Option((arrow.instances.option.semigroup.plus.A)), arrow.core.Option((arrow.instances.option.semigroup.plus.A)), arrow.typeclasses.Semigroup((arrow.instances.option.semigroup.plus.A)))arrow.instances.option.semigroup/arrow.core.-option/plus.html
$dokka.location:arrow.instances.option.semigroup$semigroup(arrow.core.Option.Companion, arrow.typeclasses.Semigroup((arrow.instances.option.semigroup.semigroup.A)))arrow.instances.option.semigroup/arrow.core.-option/semigroup.html
$dokka.location:arrow.instances.option.semigroupK$combineK(arrow.Kind((arrow.core.ForOption, arrow.instances.option.semigroupK.combineK.A)), arrow.Kind((arrow.core.ForOption, arrow.instances.option.semigroupK.combineK.A)))arrow.instances.option.semigroup-k/arrow.-kind/combine-k.html
$dokka.location:arrow.instances.option.semigroupK$semigroupK(arrow.core.Option.Companion)arrow.instances.option.semigroup-k/arrow.core.-option/semigroup-k.html
$dokka.location:arrow.instances.option.show$show(arrow.core.Option.Companion)arrow.instances.option.show/arrow.core.-option/show.html
$dokka.location:arrow.instances.option.traverse$flatTraverse(arrow.Kind((arrow.core.ForOption, arrow.instances.option.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.core.ForOption)), arrow.typeclasses.Applicative((arrow.instances.option.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.option.traverse.flatTraverse.A, arrow.Kind((arrow.instances.option.traverse.flatTraverse.G, arrow.Kind((arrow.core.ForOption, arrow.instances.option.traverse.flatTraverse.B)))))))arrow.instances.option.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.option.traverse$map(arrow.Kind((arrow.core.ForOption, arrow.instances.option.traverse.map.A)), kotlin.Function1((arrow.instances.option.traverse.map.A, arrow.instances.option.traverse.map.B)))arrow.instances.option.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.option.traverse$sequence(arrow.Kind((arrow.core.ForOption, arrow.Kind((arrow.instances.option.traverse.sequence.G, arrow.instances.option.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.option.traverse.sequence.G)))arrow.instances.option.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.option.traverse$traverse(arrow.Kind((arrow.core.ForOption, arrow.instances.option.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.option.traverse.traverse.G)), kotlin.Function1((arrow.instances.option.traverse.traverse.A, arrow.Kind((arrow.instances.option.traverse.traverse.G, arrow.instances.option.traverse.traverse.B)))))arrow.instances.option.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.option.traverse$traverse(arrow.core.Option.Companion)arrow.instances.option.traverse/arrow.core.-option/traverse.html
$dokka.location:arrow.instances.try.applicative$ap(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.ap.A)), arrow.Kind((arrow.core.ForTry, kotlin.Function1((arrow.instances.try.applicative.ap.A, arrow.instances.try.applicative.ap.B)))))arrow.instances.try.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.try.applicative$applicative(arrow.core.Try.Companion)arrow.instances.try.applicative/arrow.core.-try/applicative.html
$dokka.location:arrow.instances.try.applicative$map(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.map.A)), kotlin.Function1((arrow.instances.try.applicative.map.A, arrow.instances.try.applicative.map.B)))arrow.instances.try.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.try.applicative$map2(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.map2.A)), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.try.applicative.map2.A, arrow.instances.try.applicative.map2.B)), arrow.instances.try.applicative.map2.Z)))arrow.instances.try.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.try.applicative$map2Eval(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.try.applicative.map2Eval.A, arrow.instances.try.applicative.map2Eval.B)), arrow.instances.try.applicative.map2Eval.Z)))arrow.instances.try.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.try.applicative$plus(arrow.Kind((arrow.core.ForTry, java.math.BigDecimal)), arrow.Kind((arrow.core.ForTry, java.math.BigDecimal)))arrow.instances.try.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple2((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple3((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple4((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C, arrow.instances.try.applicative.product.D)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple5((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C, arrow.instances.try.applicative.product.D, arrow.instances.try.applicative.product.E)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple6((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C, arrow.instances.try.applicative.product.D, arrow.instances.try.applicative.product.E, arrow.instances.try.applicative.product.FF)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple7((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C, arrow.instances.try.applicative.product.D, arrow.instances.try.applicative.product.E, arrow.instances.try.applicative.product.FF, arrow.instances.try.applicative.product.G)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple8((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C, arrow.instances.try.applicative.product.D, arrow.instances.try.applicative.product.E, arrow.instances.try.applicative.product.FF, arrow.instances.try.applicative.product.G, arrow.instances.try.applicative.product.H)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple9((arrow.instances.try.applicative.product.A, arrow.instances.try.applicative.product.B, arrow.instances.try.applicative.product.C, arrow.instances.try.applicative.product.D, arrow.instances.try.applicative.product.E, arrow.instances.try.applicative.product.FF, arrow.instances.try.applicative.product.G, arrow.instances.try.applicative.product.H, arrow.instances.try.applicative.product.I)))), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.Z)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicative$product(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.A)), arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicative.product.B)))arrow.instances.try.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.try.applicativeError$applicativeError(arrow.core.Try.Companion)arrow.instances.try.applicative-error/arrow.core.-try/applicative-error.html
$dokka.location:arrow.instances.try.applicativeError$attempt(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicativeError.attempt.A)))arrow.instances.try.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.instances.try.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.core.ForTry, kotlin.Throwable)), kotlin.Function0((arrow.instances.try.applicativeError.catch.A)))arrow.instances.try.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.instances.try.applicativeError$fromEither(arrow.core.Either((arrow.instances.try.applicativeError.fromEither.EE, arrow.instances.try.applicativeError.fromEither.A)), kotlin.Function1((arrow.instances.try.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.instances.try.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.instances.try.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.instances.try.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.instances.try.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.instances.try.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.instances.try.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.instances.try.applicativeError$handleError(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.instances.try.applicativeError.handleError.A)))arrow.instances.try.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.instances.try.applicativeError$handleErrorWith(arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.core.ForTry, arrow.instances.try.applicativeError.handleErrorWith.A)))))arrow.instances.try.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.instances.try.applicativeError$raiseError(kotlin.Throwable)arrow.instances.try.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.instances.try.eq$eq(arrow.core.Try.Companion, arrow.typeclasses.Eq((arrow.instances.try.eq.eq.A)), arrow.typeclasses.Eq((kotlin.Throwable)))arrow.instances.try.eq/arrow.core.-try/eq.html
$dokka.location:arrow.instances.try.eq$neqv(arrow.core.Try((arrow.instances.try.eq.neqv.A)), arrow.core.Try((arrow.instances.try.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.try.eq.neqv.A)), arrow.typeclasses.Eq((kotlin.Throwable)))arrow.instances.try.eq/arrow.core.-try/neqv.html
$dokka.location:arrow.instances.try.foldable$combineAll(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.try.foldable.combineAll.A)))arrow.instances.try.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.try.foldable$exists(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.exists.A)), kotlin.Function1((arrow.instances.try.foldable.exists.A, kotlin.Boolean)))arrow.instances.try.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.try.foldable$find(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.find.A)), kotlin.Function1((arrow.instances.try.foldable.find.A, kotlin.Boolean)))arrow.instances.try.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.try.foldable$fold(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.try.foldable.fold.A)))arrow.instances.try.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.try.foldable$foldLeft(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.foldLeft.A)), arrow.instances.try.foldable.foldLeft.B, kotlin.Function2((arrow.instances.try.foldable.foldLeft.B, arrow.instances.try.foldable.foldLeft.A, )))arrow.instances.try.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.try.foldable$foldM(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.try.foldable.foldM.G)), arrow.instances.try.foldable.foldM.B, kotlin.Function2((arrow.instances.try.foldable.foldM.B, arrow.instances.try.foldable.foldM.A, arrow.Kind((arrow.instances.try.foldable.foldM.G, )))))arrow.instances.try.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.try.foldable$foldMap(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.try.foldable.foldMap.B)), kotlin.Function1((arrow.instances.try.foldable.foldMap.A, arrow.instances.try.foldable.foldMap.B)))arrow.instances.try.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.try.foldable$foldMapM(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.foldMapM.A)), arrow.instances.try.foldable.foldMapM.MA, arrow.instances.try.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.try.foldable.foldMapM.A, arrow.Kind((arrow.instances.try.foldable.foldMapM.G, arrow.instances.try.foldable.foldMapM.B)))))arrow.instances.try.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.try.foldable$foldRight(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.try.foldable.foldRight.B)), kotlin.Function2((arrow.instances.try.foldable.foldRight.A, arrow.core.Eval((arrow.instances.try.foldable.foldRight.B)), )))arrow.instances.try.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.try.foldable$foldable(arrow.core.Try.Companion)arrow.instances.try.foldable/arrow.core.-try/foldable.html
$dokka.location:arrow.instances.try.foldable$forAll(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.forAll.A)), kotlin.Function1((arrow.instances.try.foldable.forAll.A, kotlin.Boolean)))arrow.instances.try.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.try.foldable$get(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.try.foldable.get.A)))), kotlin.Long)arrow.instances.try.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.try.foldable$isEmpty(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.isEmpty.A)))arrow.instances.try.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.try.foldable$nonEmpty(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.nonEmpty.A)))arrow.instances.try.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.try.foldable$reduceLeftOption(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.try.foldable.reduceLeftOption.A, , )))arrow.instances.try.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.try.foldable$reduceLeftToOption(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.try.foldable.reduceLeftToOption.A, arrow.instances.try.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.try.foldable.reduceLeftToOption.B, arrow.instances.try.foldable.reduceLeftToOption.A, )))arrow.instances.try.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.try.foldable$reduceRightOption(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.try.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.try.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.try.foldable$reduceRightToOption(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.try.foldable.reduceRightToOption.A, arrow.instances.try.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.try.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.try.foldable.reduceRightToOption.B)), )))arrow.instances.try.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.try.foldable$sequence_(arrow.Kind((arrow.core.ForTry, arrow.Kind((arrow.instances.try.foldable.sequence_.G, arrow.instances.try.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.try.foldable.sequence_.G)))arrow.instances.try.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.try.foldable$size(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.try.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.try.foldable$traverse_(arrow.Kind((arrow.core.ForTry, arrow.instances.try.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.try.foldable.traverse_.G)), kotlin.Function1((arrow.instances.try.foldable.traverse_.A, arrow.Kind((arrow.instances.try.foldable.traverse_.G, arrow.instances.try.foldable.traverse_.B)))))arrow.instances.try.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.try.functor$as(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.as.A)), arrow.instances.try.functor.as.B)arrow.instances.try.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.try.functor$fproduct(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.fproduct.A)), kotlin.Function1((arrow.instances.try.functor.fproduct.A, arrow.instances.try.functor.fproduct.B)))arrow.instances.try.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.try.functor$functor(arrow.core.Try.Companion)arrow.instances.try.functor/arrow.core.-try/functor.html
$dokka.location:arrow.instances.try.functor$imap(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.imap.A)), kotlin.Function1((arrow.instances.try.functor.imap.A, arrow.instances.try.functor.imap.B)), kotlin.Function1((arrow.instances.try.functor.imap.B, arrow.instances.try.functor.imap.A)))arrow.instances.try.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.try.functor$map(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.map.A)), kotlin.Function1((arrow.instances.try.functor.map.A, arrow.instances.try.functor.map.B)))arrow.instances.try.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.try.functor$tupleLeft(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.tupleLeft.A)), arrow.instances.try.functor.tupleLeft.B)arrow.instances.try.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.try.functor$tupleRight(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.tupleRight.A)), arrow.instances.try.functor.tupleRight.B)arrow.instances.try.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.try.functor$void(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.void.A)))arrow.instances.try.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.try.functor$widen(arrow.Kind((arrow.core.ForTry, arrow.instances.try.functor.widen.A)))arrow.instances.try.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.try.hash$hash(arrow.core.Try.Companion, arrow.typeclasses.Hash((arrow.instances.try.hash.hash.A)), arrow.typeclasses.Hash((kotlin.Throwable)))arrow.instances.try.hash/arrow.core.-try/hash.html
$dokka.location:arrow.instances.try.monad$ap(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.ap.A)), arrow.Kind((arrow.core.ForTry, kotlin.Function1((arrow.instances.try.monad.ap.A, arrow.instances.try.monad.ap.B)))))arrow.instances.try.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.try.monad$effectM(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.effectM.A)), kotlin.Function1((arrow.instances.try.monad.effectM.A, arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.effectM.B)))))arrow.instances.try.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.try.monad$flatMap(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.flatMap.A)), kotlin.Function1((arrow.instances.try.monad.flatMap.A, arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.flatMap.B)))))arrow.instances.try.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.try.monad$flatten(arrow.Kind((arrow.core.ForTry, arrow.Kind((, arrow.instances.try.monad.flatten.A)))))arrow.instances.try.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.try.monad$followedBy(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.followedBy.A)), arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.followedBy.B)))arrow.instances.try.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.try.monad$followedByEval(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.followedByEval.B)))))arrow.instances.try.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.try.monad$forEffect(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.forEffect.A)), arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.forEffect.B)))arrow.instances.try.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.try.monad$forEffectEval(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.forEffectEval.B)))))arrow.instances.try.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.try.monad$ifM(arrow.Kind((arrow.core.ForTry, kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.ifM.B)))))arrow.instances.try.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.try.monad$map(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.map.A)), kotlin.Function1((arrow.instances.try.monad.map.A, arrow.instances.try.monad.map.B)))arrow.instances.try.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.try.monad$monad(arrow.core.Try.Companion)arrow.instances.try.monad/arrow.core.-try/monad.html
$dokka.location:arrow.instances.try.monad$mproduct(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.mproduct.A)), kotlin.Function1((arrow.instances.try.monad.mproduct.A, arrow.Kind((arrow.core.ForTry, arrow.instances.try.monad.mproduct.B)))))arrow.instances.try.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.try.monadError$ensure(arrow.Kind((arrow.core.ForTry, arrow.instances.try.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.instances.try.monadError.ensure.A, kotlin.Boolean)))arrow.instances.try.monad-error/arrow.-kind/ensure.html
$dokka.location:arrow.instances.try.monadError$monadError(arrow.core.Try.Companion)arrow.instances.try.monad-error/arrow.core.-try/monad-error.html
$dokka.location:arrow.instances.try.monadThrow$monadThrow(arrow.core.Try.Companion)arrow.instances.try.monad-throw/arrow.core.-try/monad-throw.html
$dokka.location:arrow.instances.try.monoid$combineAll(kotlin.collections.Collection((arrow.core.Try((arrow.instances.try.monoid.combineAll.A)))), arrow.typeclasses.Monoid((arrow.instances.try.monoid.combineAll.A)))arrow.instances.try.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.try.monoid$monoid(arrow.core.Try.Companion, arrow.typeclasses.Monoid((arrow.instances.try.monoid.monoid.A)))arrow.instances.try.monoid/arrow.core.-try/monoid.html
$dokka.location:arrow.instances.try.semigroup$maybeCombine(arrow.core.Try((arrow.instances.try.semigroup.maybeCombine.A)), arrow.core.Try((arrow.instances.try.semigroup.maybeCombine.A)), arrow.typeclasses.Semigroup((arrow.instances.try.semigroup.maybeCombine.A)))arrow.instances.try.semigroup/arrow.core.-try/maybe-combine.html
$dokka.location:arrow.instances.try.semigroup$plus(arrow.core.Try((arrow.instances.try.semigroup.plus.A)), arrow.core.Try((arrow.instances.try.semigroup.plus.A)), arrow.typeclasses.Semigroup((arrow.instances.try.semigroup.plus.A)))arrow.instances.try.semigroup/arrow.core.-try/plus.html
$dokka.location:arrow.instances.try.semigroup$semigroup(arrow.core.Try.Companion, arrow.typeclasses.Semigroup((arrow.instances.try.semigroup.semigroup.A)))arrow.instances.try.semigroup/arrow.core.-try/semigroup.html
$dokka.location:arrow.instances.try.show$show(arrow.core.Try.Companion)arrow.instances.try.show/arrow.core.-try/show.html
$dokka.location:arrow.instances.try.traverse$flatTraverse(arrow.Kind((arrow.core.ForTry, arrow.instances.try.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.core.ForTry)), arrow.typeclasses.Applicative((arrow.instances.try.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.try.traverse.flatTraverse.A, arrow.Kind((arrow.instances.try.traverse.flatTraverse.G, arrow.Kind((arrow.core.ForTry, arrow.instances.try.traverse.flatTraverse.B)))))))arrow.instances.try.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.try.traverse$map(arrow.Kind((arrow.core.ForTry, arrow.instances.try.traverse.map.A)), kotlin.Function1((arrow.instances.try.traverse.map.A, arrow.instances.try.traverse.map.B)))arrow.instances.try.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.try.traverse$sequence(arrow.Kind((arrow.core.ForTry, arrow.Kind((arrow.instances.try.traverse.sequence.G, arrow.instances.try.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.try.traverse.sequence.G)))arrow.instances.try.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.try.traverse$traverse(arrow.Kind((arrow.core.ForTry, arrow.instances.try.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.try.traverse.traverse.G)), kotlin.Function1((arrow.instances.try.traverse.traverse.A, arrow.Kind((arrow.instances.try.traverse.traverse.G, arrow.instances.try.traverse.traverse.B)))))arrow.instances.try.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.try.traverse$traverse(arrow.core.Try.Companion)arrow.instances.try.traverse/arrow.core.-try/traverse.html
$dokka.location:arrow.instances.tuple10.eq$eq(arrow.core.Tuple10.Companion, arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.D)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.E)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.F)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.G)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.H)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.I)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.eq.J)))arrow.instances.tuple10.eq/arrow.core.-tuple10/eq.html
$dokka.location:arrow.instances.tuple10.eq$neqv(arrow.core.Tuple10((arrow.instances.tuple10.eq.neqv.A, arrow.instances.tuple10.eq.neqv.B, arrow.instances.tuple10.eq.neqv.C, arrow.instances.tuple10.eq.neqv.D, arrow.instances.tuple10.eq.neqv.E, arrow.instances.tuple10.eq.neqv.F, arrow.instances.tuple10.eq.neqv.G, arrow.instances.tuple10.eq.neqv.H, arrow.instances.tuple10.eq.neqv.I, arrow.instances.tuple10.eq.neqv.J)), arrow.core.Tuple10((arrow.instances.tuple10.eq.neqv.A, arrow.instances.tuple10.eq.neqv.B, arrow.instances.tuple10.eq.neqv.C, arrow.instances.tuple10.eq.neqv.D, arrow.instances.tuple10.eq.neqv.E, arrow.instances.tuple10.eq.neqv.F, arrow.instances.tuple10.eq.neqv.G, arrow.instances.tuple10.eq.neqv.H, arrow.instances.tuple10.eq.neqv.I, arrow.instances.tuple10.eq.neqv.J)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.E)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.F)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.G)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.H)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.I)), arrow.typeclasses.Eq((arrow.instances.tuple10.eq.neqv.J)))arrow.instances.tuple10.eq/arrow.core.-tuple10/neqv.html
$dokka.location:arrow.instances.tuple10.hash$hash(arrow.core.Tuple10.Companion, arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.D)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.E)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.F)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.G)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.H)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.I)), arrow.typeclasses.Hash((arrow.instances.tuple10.hash.hash.J)))arrow.instances.tuple10.hash/arrow.core.-tuple10/hash.html
$dokka.location:arrow.instances.tuple10.show$show(arrow.core.Tuple10.Companion)arrow.instances.tuple10.show/arrow.core.-tuple10/show.html
$dokka.location:arrow.instances.tuple2.applicative$ap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.ap.F)), arrow.instances.tuple2.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.ap.F)), kotlin.Function1((arrow.instances.tuple2.applicative.ap.A, arrow.instances.tuple2.applicative.ap.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.ap.F)))arrow.instances.tuple2.applicative/arrow.-kind/ap.html
$dokka.location:arrow.instances.tuple2.applicative$applicative(arrow.core.Tuple2.Companion, arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.applicative.F)))arrow.instances.tuple2.applicative/arrow.core.-tuple2/applicative.html
$dokka.location:arrow.instances.tuple2.applicative$map(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.map.F)), arrow.instances.tuple2.applicative.map.A)), kotlin.Function1((arrow.instances.tuple2.applicative.map.A, arrow.instances.tuple2.applicative.map.B)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.map.F)))arrow.instances.tuple2.applicative/arrow.-kind/map.html
$dokka.location:arrow.instances.tuple2.applicative$map2(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.map2.F)), arrow.instances.tuple2.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.map2.F)), arrow.instances.tuple2.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.instances.tuple2.applicative.map2.A, arrow.instances.tuple2.applicative.map2.B)), arrow.instances.tuple2.applicative.map2.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.map2.F)))arrow.instances.tuple2.applicative/arrow.-kind/map2.html
$dokka.location:arrow.instances.tuple2.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.map2Eval.F)), arrow.instances.tuple2.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.map2Eval.F)), arrow.instances.tuple2.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.instances.tuple2.applicative.map2Eval.A, arrow.instances.tuple2.applicative.map2Eval.B)), arrow.instances.tuple2.applicative.map2Eval.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.map2Eval.F)))arrow.instances.tuple2.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.instances.tuple2.applicative$plus(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.plus.F)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.plus.F)), java.math.BigDecimal)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.plus.F)))arrow.instances.tuple2.applicative/arrow.-kind/plus.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple2((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple3((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple4((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C, arrow.instances.tuple2.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple5((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C, arrow.instances.tuple2.applicative.product.D, arrow.instances.tuple2.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple6((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C, arrow.instances.tuple2.applicative.product.D, arrow.instances.tuple2.applicative.product.E, arrow.instances.tuple2.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple7((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C, arrow.instances.tuple2.applicative.product.D, arrow.instances.tuple2.applicative.product.E, arrow.instances.tuple2.applicative.product.FF, arrow.instances.tuple2.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple8((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C, arrow.instances.tuple2.applicative.product.D, arrow.instances.tuple2.applicative.product.E, arrow.instances.tuple2.applicative.product.FF, arrow.instances.tuple2.applicative.product.G, arrow.instances.tuple2.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.core.Tuple9((arrow.instances.tuple2.applicative.product.A, arrow.instances.tuple2.applicative.product.B, arrow.instances.tuple2.applicative.product.C, arrow.instances.tuple2.applicative.product.D, arrow.instances.tuple2.applicative.product.E, arrow.instances.tuple2.applicative.product.FF, arrow.instances.tuple2.applicative.product.G, arrow.instances.tuple2.applicative.product.H, arrow.instances.tuple2.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.Z)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.applicative$product(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.applicative.product.F)), arrow.instances.tuple2.applicative.product.B)), arrow.typeclasses.Monoid((arrow.instances.tuple2.applicative.product.F)))arrow.instances.tuple2.applicative/arrow.-kind/product.html
$dokka.location:arrow.instances.tuple2.bifunctor$bifunctor(arrow.core.Tuple2.Companion)arrow.instances.tuple2.bifunctor/arrow.core.-tuple2/bifunctor.html
$dokka.location:arrow.instances.tuple2.bifunctor$bimap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.bifunctor.bimap.A)), arrow.instances.tuple2.bifunctor.bimap.B)), kotlin.Function1((arrow.instances.tuple2.bifunctor.bimap.A, arrow.instances.tuple2.bifunctor.bimap.C)), kotlin.Function1((arrow.instances.tuple2.bifunctor.bimap.B, arrow.instances.tuple2.bifunctor.bimap.D)))arrow.instances.tuple2.bifunctor/arrow.-kind/bimap.html
$dokka.location:arrow.instances.tuple2.bifunctor$leftWiden(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.bifunctor.leftWiden.A)), arrow.instances.tuple2.bifunctor.leftWiden.B)))arrow.instances.tuple2.bifunctor/arrow.-kind/left-widen.html
$dokka.location:arrow.instances.tuple2.bifunctor$mapLeft(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.bifunctor.mapLeft.A)), arrow.instances.tuple2.bifunctor.mapLeft.B)), kotlin.Function1((arrow.instances.tuple2.bifunctor.mapLeft.A, arrow.instances.tuple2.bifunctor.mapLeft.C)))arrow.instances.tuple2.bifunctor/arrow.-kind/map-left.html
$dokka.location:arrow.instances.tuple2.comonad$coflatMap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.comonad.coflatMap.F)), arrow.instances.tuple2.comonad.coflatMap.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.comonad.coflatMap.F)), arrow.instances.tuple2.comonad.coflatMap.A)), arrow.instances.tuple2.comonad.coflatMap.B)))arrow.instances.tuple2.comonad/arrow.-kind/coflat-map.html
$dokka.location:arrow.instances.tuple2.comonad$comonad(arrow.core.Tuple2.Companion)arrow.instances.tuple2.comonad/arrow.core.-tuple2/comonad.html
$dokka.location:arrow.instances.tuple2.comonad$duplicate(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.comonad.duplicate.F)), arrow.instances.tuple2.comonad.duplicate.A)))arrow.instances.tuple2.comonad/arrow.-kind/duplicate.html
$dokka.location:arrow.instances.tuple2.comonad$extract(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.comonad.extract.F)), arrow.instances.tuple2.comonad.extract.A)))arrow.instances.tuple2.comonad/arrow.-kind/extract.html
$dokka.location:arrow.instances.tuple2.eq$eq(arrow.core.Tuple2.Companion, arrow.typeclasses.Eq((arrow.instances.tuple2.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple2.eq.eq.B)))arrow.instances.tuple2.eq/arrow.core.-tuple2/eq.html
$dokka.location:arrow.instances.tuple2.eq$neqv(arrow.core.Tuple2((arrow.instances.tuple2.eq.neqv.A, arrow.instances.tuple2.eq.neqv.B)), arrow.core.Tuple2((arrow.instances.tuple2.eq.neqv.A, arrow.instances.tuple2.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple2.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple2.eq.neqv.B)))arrow.instances.tuple2.eq/arrow.core.-tuple2/neqv.html
$dokka.location:arrow.instances.tuple2.foldable$combineAll(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.combineAll.F)), arrow.instances.tuple2.foldable.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.tuple2.foldable.combineAll.A)))arrow.instances.tuple2.foldable/arrow.-kind/combine-all.html
$dokka.location:arrow.instances.tuple2.foldable$exists(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.exists.F)), arrow.instances.tuple2.foldable.exists.A)), kotlin.Function1((arrow.instances.tuple2.foldable.exists.A, kotlin.Boolean)))arrow.instances.tuple2.foldable/arrow.-kind/exists.html
$dokka.location:arrow.instances.tuple2.foldable$find(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.find.F)), arrow.instances.tuple2.foldable.find.A)), kotlin.Function1((arrow.instances.tuple2.foldable.find.A, kotlin.Boolean)))arrow.instances.tuple2.foldable/arrow.-kind/find.html
$dokka.location:arrow.instances.tuple2.foldable$fold(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.fold.F)), arrow.instances.tuple2.foldable.fold.A)), arrow.typeclasses.Monoid((arrow.instances.tuple2.foldable.fold.A)))arrow.instances.tuple2.foldable/arrow.-kind/fold.html
$dokka.location:arrow.instances.tuple2.foldable$foldLeft(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.foldLeft.F)), arrow.instances.tuple2.foldable.foldLeft.A)), arrow.instances.tuple2.foldable.foldLeft.B, kotlin.Function2((arrow.instances.tuple2.foldable.foldLeft.B, arrow.instances.tuple2.foldable.foldLeft.A, )))arrow.instances.tuple2.foldable/arrow.-kind/fold-left.html
$dokka.location:arrow.instances.tuple2.foldable$foldM(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.foldM.F)), arrow.instances.tuple2.foldable.foldM.A)), arrow.typeclasses.Monad((arrow.instances.tuple2.foldable.foldM.G)), arrow.instances.tuple2.foldable.foldM.B, kotlin.Function2((arrow.instances.tuple2.foldable.foldM.B, arrow.instances.tuple2.foldable.foldM.A, arrow.Kind((arrow.instances.tuple2.foldable.foldM.G, )))))arrow.instances.tuple2.foldable/arrow.-kind/fold-m.html
$dokka.location:arrow.instances.tuple2.foldable$foldMap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.foldMap.F)), arrow.instances.tuple2.foldable.foldMap.A)), arrow.typeclasses.Monoid((arrow.instances.tuple2.foldable.foldMap.B)), kotlin.Function1((arrow.instances.tuple2.foldable.foldMap.A, arrow.instances.tuple2.foldable.foldMap.B)))arrow.instances.tuple2.foldable/arrow.-kind/fold-map.html
$dokka.location:arrow.instances.tuple2.foldable$foldMapM(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.foldMapM.F)), arrow.instances.tuple2.foldable.foldMapM.A)), arrow.instances.tuple2.foldable.foldMapM.MA, arrow.instances.tuple2.foldable.foldMapM.MO, kotlin.Function1((arrow.instances.tuple2.foldable.foldMapM.A, arrow.Kind((arrow.instances.tuple2.foldable.foldMapM.G, arrow.instances.tuple2.foldable.foldMapM.B)))))arrow.instances.tuple2.foldable/arrow.-kind/fold-map-m.html
$dokka.location:arrow.instances.tuple2.foldable$foldRight(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.foldRight.F)), arrow.instances.tuple2.foldable.foldRight.A)), arrow.core.Eval((arrow.instances.tuple2.foldable.foldRight.B)), kotlin.Function2((arrow.instances.tuple2.foldable.foldRight.A, arrow.core.Eval((arrow.instances.tuple2.foldable.foldRight.B)), )))arrow.instances.tuple2.foldable/arrow.-kind/fold-right.html
$dokka.location:arrow.instances.tuple2.foldable$foldable(arrow.core.Tuple2.Companion)arrow.instances.tuple2.foldable/arrow.core.-tuple2/foldable.html
$dokka.location:arrow.instances.tuple2.foldable$forAll(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.forAll.F)), arrow.instances.tuple2.foldable.forAll.A)), kotlin.Function1((arrow.instances.tuple2.foldable.forAll.A, kotlin.Boolean)))arrow.instances.tuple2.foldable/arrow.-kind/for-all.html
$dokka.location:arrow.instances.tuple2.foldable$get(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.get.F)), arrow.instances.tuple2.foldable.get.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForEither, arrow.instances.tuple2.foldable.get.A)))), kotlin.Long)arrow.instances.tuple2.foldable/arrow.-kind/get.html
$dokka.location:arrow.instances.tuple2.foldable$isEmpty(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.isEmpty.F)), arrow.instances.tuple2.foldable.isEmpty.A)))arrow.instances.tuple2.foldable/arrow.-kind/is-empty.html
$dokka.location:arrow.instances.tuple2.foldable$nonEmpty(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.nonEmpty.F)), arrow.instances.tuple2.foldable.nonEmpty.A)))arrow.instances.tuple2.foldable/arrow.-kind/non-empty.html
$dokka.location:arrow.instances.tuple2.foldable$reduceLeftOption(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.reduceLeftOption.F)), arrow.instances.tuple2.foldable.reduceLeftOption.A)), kotlin.Function2((arrow.instances.tuple2.foldable.reduceLeftOption.A, , )))arrow.instances.tuple2.foldable/arrow.-kind/reduce-left-option.html
$dokka.location:arrow.instances.tuple2.foldable$reduceLeftToOption(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.reduceLeftToOption.F)), arrow.instances.tuple2.foldable.reduceLeftToOption.A)), kotlin.Function1((arrow.instances.tuple2.foldable.reduceLeftToOption.A, arrow.instances.tuple2.foldable.reduceLeftToOption.B)), kotlin.Function2((arrow.instances.tuple2.foldable.reduceLeftToOption.B, arrow.instances.tuple2.foldable.reduceLeftToOption.A, )))arrow.instances.tuple2.foldable/arrow.-kind/reduce-left-to-option.html
$dokka.location:arrow.instances.tuple2.foldable$reduceRightOption(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.reduceRightOption.F)), arrow.instances.tuple2.foldable.reduceRightOption.A)), kotlin.Function2((arrow.instances.tuple2.foldable.reduceRightOption.A, arrow.core.Eval(()), )))arrow.instances.tuple2.foldable/arrow.-kind/reduce-right-option.html
$dokka.location:arrow.instances.tuple2.foldable$reduceRightToOption(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.reduceRightToOption.F)), arrow.instances.tuple2.foldable.reduceRightToOption.A)), kotlin.Function1((arrow.instances.tuple2.foldable.reduceRightToOption.A, arrow.instances.tuple2.foldable.reduceRightToOption.B)), kotlin.Function2((arrow.instances.tuple2.foldable.reduceRightToOption.A, arrow.core.Eval((arrow.instances.tuple2.foldable.reduceRightToOption.B)), )))arrow.instances.tuple2.foldable/arrow.-kind/reduce-right-to-option.html
$dokka.location:arrow.instances.tuple2.foldable$sequence_(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.sequence_.F)), arrow.Kind((arrow.instances.tuple2.foldable.sequence_.G, arrow.instances.tuple2.foldable.sequence_.A)))), arrow.typeclasses.Applicative((arrow.instances.tuple2.foldable.sequence_.G)))arrow.instances.tuple2.foldable/arrow.-kind/sequence_.html
$dokka.location:arrow.instances.tuple2.foldable$size(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.size.F)), arrow.instances.tuple2.foldable.size.A)), arrow.typeclasses.Monoid((kotlin.Long)))arrow.instances.tuple2.foldable/arrow.-kind/size.html
$dokka.location:arrow.instances.tuple2.foldable$traverse_(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.foldable.traverse_.F)), arrow.instances.tuple2.foldable.traverse_.A)), arrow.typeclasses.Applicative((arrow.instances.tuple2.foldable.traverse_.G)), kotlin.Function1((arrow.instances.tuple2.foldable.traverse_.A, arrow.Kind((arrow.instances.tuple2.foldable.traverse_.G, arrow.instances.tuple2.foldable.traverse_.B)))))arrow.instances.tuple2.foldable/arrow.-kind/traverse_.html
$dokka.location:arrow.instances.tuple2.functor$as(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.as.F)), arrow.instances.tuple2.functor.as.A)), arrow.instances.tuple2.functor.as.B)arrow.instances.tuple2.functor/arrow.-kind/as.html
$dokka.location:arrow.instances.tuple2.functor$fproduct(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.fproduct.F)), arrow.instances.tuple2.functor.fproduct.A)), kotlin.Function1((arrow.instances.tuple2.functor.fproduct.A, arrow.instances.tuple2.functor.fproduct.B)))arrow.instances.tuple2.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.instances.tuple2.functor$functor(arrow.core.Tuple2.Companion)arrow.instances.tuple2.functor/arrow.core.-tuple2/functor.html
$dokka.location:arrow.instances.tuple2.functor$imap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.imap.F)), arrow.instances.tuple2.functor.imap.A)), kotlin.Function1((arrow.instances.tuple2.functor.imap.A, arrow.instances.tuple2.functor.imap.B)), kotlin.Function1((arrow.instances.tuple2.functor.imap.B, arrow.instances.tuple2.functor.imap.A)))arrow.instances.tuple2.functor/arrow.-kind/imap.html
$dokka.location:arrow.instances.tuple2.functor$map(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.map.F)), arrow.instances.tuple2.functor.map.A)), kotlin.Function1((arrow.instances.tuple2.functor.map.A, arrow.instances.tuple2.functor.map.B)))arrow.instances.tuple2.functor/arrow.-kind/map.html
$dokka.location:arrow.instances.tuple2.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.tupleLeft.F)), arrow.instances.tuple2.functor.tupleLeft.A)), arrow.instances.tuple2.functor.tupleLeft.B)arrow.instances.tuple2.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.instances.tuple2.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.tupleRight.F)), arrow.instances.tuple2.functor.tupleRight.A)), arrow.instances.tuple2.functor.tupleRight.B)arrow.instances.tuple2.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.instances.tuple2.functor$void(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.void.F)), arrow.instances.tuple2.functor.void.A)))arrow.instances.tuple2.functor/arrow.-kind/void.html
$dokka.location:arrow.instances.tuple2.functor$widen(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.functor.widen.F)), arrow.instances.tuple2.functor.widen.A)))arrow.instances.tuple2.functor/arrow.-kind/widen.html
$dokka.location:arrow.instances.tuple2.hash$hash(arrow.core.Tuple2.Companion, arrow.typeclasses.Hash((arrow.instances.tuple2.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple2.hash.hash.B)))arrow.instances.tuple2.hash/arrow.core.-tuple2/hash.html
$dokka.location:arrow.instances.tuple2.monad$ap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.ap.F)), arrow.instances.tuple2.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.ap.F)), kotlin.Function1((arrow.instances.tuple2.monad.ap.A, arrow.instances.tuple2.monad.ap.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.ap.F)))arrow.instances.tuple2.monad/arrow.-kind/ap.html
$dokka.location:arrow.instances.tuple2.monad$effectM(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.effectM.F)), arrow.instances.tuple2.monad.effectM.A)), kotlin.Function1((arrow.instances.tuple2.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.effectM.F)), arrow.instances.tuple2.monad.effectM.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.effectM.F)))arrow.instances.tuple2.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.instances.tuple2.monad$flatMap(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.flatMap.F)), arrow.instances.tuple2.monad.flatMap.A)), kotlin.Function1((arrow.instances.tuple2.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.flatMap.F)), arrow.instances.tuple2.monad.flatMap.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.flatMap.F)))arrow.instances.tuple2.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.instances.tuple2.monad$flatten(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.flatten.F)), arrow.Kind((, arrow.instances.tuple2.monad.flatten.A)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.flatten.F)))arrow.instances.tuple2.monad/arrow.-kind/flatten.html
$dokka.location:arrow.instances.tuple2.monad$followedBy(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.followedBy.F)), arrow.instances.tuple2.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.followedBy.F)), arrow.instances.tuple2.monad.followedBy.B)), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.followedBy.F)))arrow.instances.tuple2.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.instances.tuple2.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.followedByEval.F)), arrow.instances.tuple2.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.followedByEval.F)), arrow.instances.tuple2.monad.followedByEval.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.followedByEval.F)))arrow.instances.tuple2.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.instances.tuple2.monad$forEffect(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.forEffect.F)), arrow.instances.tuple2.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.forEffect.F)), arrow.instances.tuple2.monad.forEffect.B)), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.forEffect.F)))arrow.instances.tuple2.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.instances.tuple2.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.forEffectEval.F)), arrow.instances.tuple2.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.forEffectEval.F)), arrow.instances.tuple2.monad.forEffectEval.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.forEffectEval.F)))arrow.instances.tuple2.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.instances.tuple2.monad$ifM(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.ifM.F)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.ifM.F)), arrow.instances.tuple2.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.ifM.F)), arrow.instances.tuple2.monad.ifM.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.ifM.F)))arrow.instances.tuple2.monad/arrow.-kind/if-m.html
$dokka.location:arrow.instances.tuple2.monad$map(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.map.F)), arrow.instances.tuple2.monad.map.A)), kotlin.Function1((arrow.instances.tuple2.monad.map.A, arrow.instances.tuple2.monad.map.B)), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.map.F)))arrow.instances.tuple2.monad/arrow.-kind/map.html
$dokka.location:arrow.instances.tuple2.monad$monad(arrow.core.Tuple2.Companion, arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.monad.F)))arrow.instances.tuple2.monad/arrow.core.-tuple2/monad.html
$dokka.location:arrow.instances.tuple2.monad$mproduct(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.mproduct.F)), arrow.instances.tuple2.monad.mproduct.A)), kotlin.Function1((arrow.instances.tuple2.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.monad.mproduct.F)), arrow.instances.tuple2.monad.mproduct.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monad.mproduct.F)))arrow.instances.tuple2.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.instances.tuple2.monoid$combineAll(kotlin.collections.Collection((arrow.core.Tuple2((arrow.instances.tuple2.monoid.combineAll.A, arrow.instances.tuple2.monoid.combineAll.B)))), arrow.typeclasses.Monoid((arrow.instances.tuple2.monoid.combineAll.A)), arrow.typeclasses.Monoid((arrow.instances.tuple2.monoid.combineAll.B)))arrow.instances.tuple2.monoid/kotlin.collections.-collection/combine-all.html
$dokka.location:arrow.instances.tuple2.monoid$monoid(arrow.core.Tuple2.Companion, arrow.typeclasses.Monoid((arrow.instances.tuple2.monoid.monoid.A)), arrow.typeclasses.Monoid((arrow.instances.tuple2.monoid.monoid.B)))arrow.instances.tuple2.monoid/arrow.core.-tuple2/monoid.html
$dokka.location:arrow.instances.tuple2.show$show(arrow.core.Tuple2.Companion)arrow.instances.tuple2.show/arrow.core.-tuple2/show.html
$dokka.location:arrow.instances.tuple2.traverse$flatTraverse(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.traverse.flatTraverse.F)), arrow.instances.tuple2.traverse.flatTraverse.A)), arrow.typeclasses.Monad((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.traverse.flatTraverse.F)))), arrow.typeclasses.Applicative((arrow.instances.tuple2.traverse.flatTraverse.G)), kotlin.Function1((arrow.instances.tuple2.traverse.flatTraverse.A, arrow.Kind((arrow.instances.tuple2.traverse.flatTraverse.G, arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.traverse.flatTraverse.F)), arrow.instances.tuple2.traverse.flatTraverse.B)))))))arrow.instances.tuple2.traverse/arrow.-kind/flat-traverse.html
$dokka.location:arrow.instances.tuple2.traverse$map(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.traverse.map.F)), arrow.instances.tuple2.traverse.map.A)), kotlin.Function1((arrow.instances.tuple2.traverse.map.A, arrow.instances.tuple2.traverse.map.B)))arrow.instances.tuple2.traverse/arrow.-kind/map.html
$dokka.location:arrow.instances.tuple2.traverse$sequence(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.traverse.sequence.F)), arrow.Kind((arrow.instances.tuple2.traverse.sequence.G, arrow.instances.tuple2.traverse.sequence.A)))), arrow.typeclasses.Applicative((arrow.instances.tuple2.traverse.sequence.G)))arrow.instances.tuple2.traverse/arrow.-kind/sequence.html
$dokka.location:arrow.instances.tuple2.traverse$traverse(arrow.Kind((arrow.Kind((arrow.core.ForTuple2, arrow.instances.tuple2.traverse.traverse.F)), arrow.instances.tuple2.traverse.traverse.A)), arrow.typeclasses.Applicative((arrow.instances.tuple2.traverse.traverse.G)), kotlin.Function1((arrow.instances.tuple2.traverse.traverse.A, arrow.Kind((arrow.instances.tuple2.traverse.traverse.G, arrow.instances.tuple2.traverse.traverse.B)))))arrow.instances.tuple2.traverse/arrow.-kind/traverse.html
$dokka.location:arrow.instances.tuple2.traverse$traverse(arrow.core.Tuple2.Companion)arrow.instances.tuple2.traverse/arrow.core.-tuple2/traverse.html
$dokka.location:arrow.instances.tuple3.eq$eq(arrow.core.Tuple3.Companion, arrow.typeclasses.Eq((arrow.instances.tuple3.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple3.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple3.eq.eq.C)))arrow.instances.tuple3.eq/arrow.core.-tuple3/eq.html
$dokka.location:arrow.instances.tuple3.eq$neqv(arrow.core.Tuple3((arrow.instances.tuple3.eq.neqv.A, arrow.instances.tuple3.eq.neqv.B, arrow.instances.tuple3.eq.neqv.C)), arrow.core.Tuple3((arrow.instances.tuple3.eq.neqv.A, arrow.instances.tuple3.eq.neqv.B, arrow.instances.tuple3.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple3.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple3.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple3.eq.neqv.C)))arrow.instances.tuple3.eq/arrow.core.-tuple3/neqv.html
$dokka.location:arrow.instances.tuple3.hash$hash(arrow.core.Tuple3.Companion, arrow.typeclasses.Hash((arrow.instances.tuple3.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple3.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple3.hash.hash.C)))arrow.instances.tuple3.hash/arrow.core.-tuple3/hash.html
$dokka.location:arrow.instances.tuple3.show$show(arrow.core.Tuple3.Companion)arrow.instances.tuple3.show/arrow.core.-tuple3/show.html
$dokka.location:arrow.instances.tuple4.eq$eq(arrow.core.Tuple4.Companion, arrow.typeclasses.Eq((arrow.instances.tuple4.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.eq.D)))arrow.instances.tuple4.eq/arrow.core.-tuple4/eq.html
$dokka.location:arrow.instances.tuple4.eq$neqv(arrow.core.Tuple4((arrow.instances.tuple4.eq.neqv.A, arrow.instances.tuple4.eq.neqv.B, arrow.instances.tuple4.eq.neqv.C, arrow.instances.tuple4.eq.neqv.D)), arrow.core.Tuple4((arrow.instances.tuple4.eq.neqv.A, arrow.instances.tuple4.eq.neqv.B, arrow.instances.tuple4.eq.neqv.C, arrow.instances.tuple4.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple4.eq.neqv.D)))arrow.instances.tuple4.eq/arrow.core.-tuple4/neqv.html
$dokka.location:arrow.instances.tuple4.hash$hash(arrow.core.Tuple4.Companion, arrow.typeclasses.Hash((arrow.instances.tuple4.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple4.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple4.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple4.hash.hash.D)))arrow.instances.tuple4.hash/arrow.core.-tuple4/hash.html
$dokka.location:arrow.instances.tuple4.show$show(arrow.core.Tuple4.Companion)arrow.instances.tuple4.show/arrow.core.-tuple4/show.html
$dokka.location:arrow.instances.tuple5.eq$eq(arrow.core.Tuple5.Companion, arrow.typeclasses.Eq((arrow.instances.tuple5.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.eq.D)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.eq.E)))arrow.instances.tuple5.eq/arrow.core.-tuple5/eq.html
$dokka.location:arrow.instances.tuple5.eq$neqv(arrow.core.Tuple5((arrow.instances.tuple5.eq.neqv.A, arrow.instances.tuple5.eq.neqv.B, arrow.instances.tuple5.eq.neqv.C, arrow.instances.tuple5.eq.neqv.D, arrow.instances.tuple5.eq.neqv.E)), arrow.core.Tuple5((arrow.instances.tuple5.eq.neqv.A, arrow.instances.tuple5.eq.neqv.B, arrow.instances.tuple5.eq.neqv.C, arrow.instances.tuple5.eq.neqv.D, arrow.instances.tuple5.eq.neqv.E)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple5.eq.neqv.E)))arrow.instances.tuple5.eq/arrow.core.-tuple5/neqv.html
$dokka.location:arrow.instances.tuple5.hash$hash(arrow.core.Tuple5.Companion, arrow.typeclasses.Hash((arrow.instances.tuple5.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple5.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple5.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple5.hash.hash.D)), arrow.typeclasses.Hash((arrow.instances.tuple5.hash.hash.E)))arrow.instances.tuple5.hash/arrow.core.-tuple5/hash.html
$dokka.location:arrow.instances.tuple5.show$show(arrow.core.Tuple5.Companion)arrow.instances.tuple5.show/arrow.core.-tuple5/show.html
$dokka.location:arrow.instances.tuple6.eq$eq(arrow.core.Tuple6.Companion, arrow.typeclasses.Eq((arrow.instances.tuple6.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.eq.D)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.eq.E)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.eq.F)))arrow.instances.tuple6.eq/arrow.core.-tuple6/eq.html
$dokka.location:arrow.instances.tuple6.eq$neqv(arrow.core.Tuple6((arrow.instances.tuple6.eq.neqv.A, arrow.instances.tuple6.eq.neqv.B, arrow.instances.tuple6.eq.neqv.C, arrow.instances.tuple6.eq.neqv.D, arrow.instances.tuple6.eq.neqv.E, arrow.instances.tuple6.eq.neqv.F)), arrow.core.Tuple6((arrow.instances.tuple6.eq.neqv.A, arrow.instances.tuple6.eq.neqv.B, arrow.instances.tuple6.eq.neqv.C, arrow.instances.tuple6.eq.neqv.D, arrow.instances.tuple6.eq.neqv.E, arrow.instances.tuple6.eq.neqv.F)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.neqv.E)), arrow.typeclasses.Eq((arrow.instances.tuple6.eq.neqv.F)))arrow.instances.tuple6.eq/arrow.core.-tuple6/neqv.html
$dokka.location:arrow.instances.tuple6.hash$hash(arrow.core.Tuple6.Companion, arrow.typeclasses.Hash((arrow.instances.tuple6.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple6.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple6.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple6.hash.hash.D)), arrow.typeclasses.Hash((arrow.instances.tuple6.hash.hash.E)), arrow.typeclasses.Hash((arrow.instances.tuple6.hash.hash.F)))arrow.instances.tuple6.hash/arrow.core.-tuple6/hash.html
$dokka.location:arrow.instances.tuple6.show$show(arrow.core.Tuple6.Companion)arrow.instances.tuple6.show/arrow.core.-tuple6/show.html
$dokka.location:arrow.instances.tuple7.eq$eq(arrow.core.Tuple7.Companion, arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.D)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.E)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.F)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.eq.G)))arrow.instances.tuple7.eq/arrow.core.-tuple7/eq.html
$dokka.location:arrow.instances.tuple7.eq$neqv(arrow.core.Tuple7((arrow.instances.tuple7.eq.neqv.A, arrow.instances.tuple7.eq.neqv.B, arrow.instances.tuple7.eq.neqv.C, arrow.instances.tuple7.eq.neqv.D, arrow.instances.tuple7.eq.neqv.E, arrow.instances.tuple7.eq.neqv.F, arrow.instances.tuple7.eq.neqv.G)), arrow.core.Tuple7((arrow.instances.tuple7.eq.neqv.A, arrow.instances.tuple7.eq.neqv.B, arrow.instances.tuple7.eq.neqv.C, arrow.instances.tuple7.eq.neqv.D, arrow.instances.tuple7.eq.neqv.E, arrow.instances.tuple7.eq.neqv.F, arrow.instances.tuple7.eq.neqv.G)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.E)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.F)), arrow.typeclasses.Eq((arrow.instances.tuple7.eq.neqv.G)))arrow.instances.tuple7.eq/arrow.core.-tuple7/neqv.html
$dokka.location:arrow.instances.tuple7.hash$hash(arrow.core.Tuple7.Companion, arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.D)), arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.E)), arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.F)), arrow.typeclasses.Hash((arrow.instances.tuple7.hash.hash.G)))arrow.instances.tuple7.hash/arrow.core.-tuple7/hash.html
$dokka.location:arrow.instances.tuple7.show$show(arrow.core.Tuple7.Companion)arrow.instances.tuple7.show/arrow.core.-tuple7/show.html
$dokka.location:arrow.instances.tuple8.eq$eq(arrow.core.Tuple8.Companion, arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.D)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.E)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.F)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.G)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.eq.H)))arrow.instances.tuple8.eq/arrow.core.-tuple8/eq.html
$dokka.location:arrow.instances.tuple8.eq$neqv(arrow.core.Tuple8((arrow.instances.tuple8.eq.neqv.A, arrow.instances.tuple8.eq.neqv.B, arrow.instances.tuple8.eq.neqv.C, arrow.instances.tuple8.eq.neqv.D, arrow.instances.tuple8.eq.neqv.E, arrow.instances.tuple8.eq.neqv.F, arrow.instances.tuple8.eq.neqv.G, arrow.instances.tuple8.eq.neqv.H)), arrow.core.Tuple8((arrow.instances.tuple8.eq.neqv.A, arrow.instances.tuple8.eq.neqv.B, arrow.instances.tuple8.eq.neqv.C, arrow.instances.tuple8.eq.neqv.D, arrow.instances.tuple8.eq.neqv.E, arrow.instances.tuple8.eq.neqv.F, arrow.instances.tuple8.eq.neqv.G, arrow.instances.tuple8.eq.neqv.H)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.E)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.F)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.G)), arrow.typeclasses.Eq((arrow.instances.tuple8.eq.neqv.H)))arrow.instances.tuple8.eq/arrow.core.-tuple8/neqv.html
$dokka.location:arrow.instances.tuple8.hash$hash(arrow.core.Tuple8.Companion, arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.D)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.E)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.F)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.G)), arrow.typeclasses.Hash((arrow.instances.tuple8.hash.hash.H)))arrow.instances.tuple8.hash/arrow.core.-tuple8/hash.html
$dokka.location:arrow.instances.tuple8.show$show(arrow.core.Tuple8.Companion)arrow.instances.tuple8.show/arrow.core.-tuple8/show.html
$dokka.location:arrow.instances.tuple9.eq$eq(arrow.core.Tuple9.Companion, arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.A)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.B)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.C)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.D)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.E)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.F)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.G)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.H)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.eq.I)))arrow.instances.tuple9.eq/arrow.core.-tuple9/eq.html
$dokka.location:arrow.instances.tuple9.eq$neqv(arrow.core.Tuple9((arrow.instances.tuple9.eq.neqv.A, arrow.instances.tuple9.eq.neqv.B, arrow.instances.tuple9.eq.neqv.C, arrow.instances.tuple9.eq.neqv.D, arrow.instances.tuple9.eq.neqv.E, arrow.instances.tuple9.eq.neqv.F, arrow.instances.tuple9.eq.neqv.G, arrow.instances.tuple9.eq.neqv.H, arrow.instances.tuple9.eq.neqv.I)), arrow.core.Tuple9((arrow.instances.tuple9.eq.neqv.A, arrow.instances.tuple9.eq.neqv.B, arrow.instances.tuple9.eq.neqv.C, arrow.instances.tuple9.eq.neqv.D, arrow.instances.tuple9.eq.neqv.E, arrow.instances.tuple9.eq.neqv.F, arrow.instances.tuple9.eq.neqv.G, arrow.instances.tuple9.eq.neqv.H, arrow.instances.tuple9.eq.neqv.I)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.A)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.B)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.C)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.D)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.E)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.F)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.G)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.H)), arrow.typeclasses.Eq((arrow.instances.tuple9.eq.neqv.I)))arrow.instances.tuple9.eq/arrow.core.-tuple9/neqv.html
$dokka.location:arrow.instances.tuple9.hash$hash(arrow.core.Tuple9.Companion, arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.A)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.B)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.C)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.D)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.E)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.F)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.G)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.H)), arrow.typeclasses.Hash((arrow.instances.tuple9.hash.hash.I)))arrow.instances.tuple9.hash/arrow.core.-tuple9/hash.html
$dokka.location:arrow.instances.tuple9.show$show(arrow.core.Tuple9.Companion)arrow.instances.tuple9.show/arrow.core.-tuple9/show.html
arrow.instances
arrow.instances.const.applicative
arrow.instances.const.contravariant
arrow.instances.const.eq
arrow.instances.const.foldable
arrow.instances.const.functor
arrow.instances.const.hash
arrow.instances.const.invariant
arrow.instances.const.monoid
arrow.instances.const.semigroup
arrow.instances.const.show
arrow.instances.const.traverse
arrow.instances.either.applicative
arrow.instances.either.applicativeError
arrow.instances.either.bifunctor
arrow.instances.either.eq
arrow.instances.either.foldable
arrow.instances.either.functor
arrow.instances.either.hash
arrow.instances.either.monad
arrow.instances.either.monadError
arrow.instances.either.monoid
arrow.instances.either.semigroup
arrow.instances.either.semigroupK
arrow.instances.either.show
arrow.instances.either.traverse
arrow.instances.eval.applicative
arrow.instances.eval.bimonad
arrow.instances.eval.comonad
arrow.instances.eval.functor
arrow.instances.eval.monad
arrow.instances.function0.applicative
arrow.instances.function0.bimonad
arrow.instances.function0.comonad
arrow.instances.function0.functor
arrow.instances.function0.monad
arrow.instances.function1.applicative
arrow.instances.function1.category
arrow.instances.function1.contravariant
arrow.instances.function1.functor
arrow.instances.function1.monad
arrow.instances.function1.profunctor
arrow.instances.id.applicative
arrow.instances.id.bimonad
arrow.instances.id.comonad
arrow.instances.id.eq
arrow.instances.id.foldable
arrow.instances.id.functor
arrow.instances.id.hash
arrow.instances.id.monad
arrow.instances.id.show
arrow.instances.id.traverse
arrow.instances.monoid.invariant
arrow.instances.option.applicative
arrow.instances.option.applicativeError
arrow.instances.option.eq
arrow.instances.option.foldable
arrow.instances.option.functor
arrow.instances.option.hash
arrow.instances.option.monad
arrow.instances.option.monadError
arrow.instances.option.monoid
arrow.instances.option.monoidK
arrow.instances.option.semigroup
arrow.instances.option.semigroupK
arrow.instances.option.show
arrow.instances.option.traverse
arrow.instances.try.applicative
arrow.instances.try.applicativeError
arrow.instances.try.eq
arrow.instances.try.foldable
arrow.instances.try.functor
arrow.instances.try.hash
arrow.instances.try.monad
arrow.instances.try.monadError
arrow.instances.try.monadThrow
arrow.instances.try.monoid
arrow.instances.try.semigroup
arrow.instances.try.show
arrow.instances.try.traverse
arrow.instances.tuple10.eq
arrow.instances.tuple10.hash
arrow.instances.tuple10.show
arrow.instances.tuple2.applicative
arrow.instances.tuple2.bifunctor
arrow.instances.tuple2.comonad
arrow.instances.tuple2.eq
arrow.instances.tuple2.foldable
arrow.instances.tuple2.functor
arrow.instances.tuple2.hash
arrow.instances.tuple2.monad
arrow.instances.tuple2.monoid
arrow.instances.tuple2.show
arrow.instances.tuple2.traverse
arrow.instances.tuple3.eq
arrow.instances.tuple3.hash
arrow.instances.tuple3.show
arrow.instances.tuple4.eq
arrow.instances.tuple4.hash
arrow.instances.tuple4.show
arrow.instances.tuple5.eq
arrow.instances.tuple5.hash
arrow.instances.tuple5.show
arrow.instances.tuple6.eq
arrow.instances.tuple6.hash
arrow.instances.tuple6.show
arrow.instances.tuple7.eq
arrow.instances.tuple7.hash
arrow.instances.tuple7.show
arrow.instances.tuple8.eq
arrow.instances.tuple8.hash
arrow.instances.tuple8.show
arrow.instances.tuple9.eq
arrow.instances.tuple9.hash
arrow.instances.tuple9.show
