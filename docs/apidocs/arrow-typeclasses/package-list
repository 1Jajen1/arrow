$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.typeclasses$ap(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.ap.A)), arrow.typeclasses.ap.T)), arrow.typeclasses.Semigroup((arrow.typeclasses.ap.A)), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.ap.A)), kotlin.Function1((arrow.typeclasses.ap.T, arrow.typeclasses.ap.U)))))arrow.typeclasses/arrow.-kind/ap.html
$dokka.location:arrow.typeclasses$binest(arrow.Kind((arrow.Kind((arrow.typeclasses.binest.F, arrow.Kind((arrow.Kind((arrow.typeclasses.binest.G, arrow.typeclasses.binest.A)), arrow.typeclasses.binest.B)))), )))arrow.typeclasses/arrow.-kind/binest.html
$dokka.location:arrow.typeclasses$biunnest(arrow.Kind((arrow.Kind((arrow.typeclasses.Nested((arrow.typeclasses.biunnest.F, arrow.typeclasses.biunnest.G)), arrow.typeclasses.biunnest.A)), arrow.typeclasses.biunnest.B)))arrow.typeclasses/arrow.-kind/biunnest.html
$dokka.location:arrow.typeclasses$combine(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.combine.A)), arrow.typeclasses.combine.T)), arrow.typeclasses.Semigroup((arrow.typeclasses.combine.A)), arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.combine.A)), arrow.typeclasses.combine.T)))arrow.typeclasses/arrow.-kind/combine.html
$dokka.location:arrow.typeclasses$conest(arrow.Kind((arrow.Kind((arrow.typeclasses.conest.F, arrow.typeclasses.conest.A)), arrow.typeclasses.conest.B)))arrow.typeclasses/arrow.-kind/conest.html
$dokka.location:arrow.typeclasses$counnest(arrow.Kind((arrow.typeclasses.Conested((arrow.typeclasses.counnest.F, arrow.typeclasses.counnest.B)), arrow.typeclasses.counnest.A)))arrow.typeclasses/arrow.-kind/counnest.html
$dokka.location:arrow.typeclasses$fix(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.fix.A)), arrow.typeclasses.fix.T)))arrow.typeclasses/arrow.-kind/fix.html
$dokka.location:arrow.typeclasses$fix(arrow.Kind((arrow.typeclasses.ForMonoid, arrow.typeclasses.fix.A)))arrow.typeclasses/arrow.-kind/fix.html
$dokka.location:arrow.typeclasses$nest(arrow.Kind((arrow.typeclasses.nest.F, arrow.Kind((arrow.typeclasses.nest.G, arrow.typeclasses.nest.A)))))arrow.typeclasses/arrow.-kind/nest.html
$dokka.location:arrow.typeclasses$sequence(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.sequence.A)), arrow.Kind((arrow.typeclasses.sequence.G, arrow.typeclasses.sequence.T)))), arrow.typeclasses.Applicative((arrow.typeclasses.sequence.G)))arrow.typeclasses/arrow.-kind/sequence.html
$dokka.location:arrow.typeclasses$stateStack#kotlin.coroutines.Continuation((arrow.typeclasses.stateStack.T))arrow.typeclasses/kotlin.coroutines.-continuation/state-stack.html
$dokka.location:arrow.typeclasses$unnest(arrow.Kind((arrow.typeclasses.Nested((arrow.typeclasses.unnest.F, arrow.typeclasses.unnest.G)), arrow.typeclasses.unnest.A)))arrow.typeclasses/arrow.-kind/unnest.html
$dokka.location:arrow.typeclasses$value(arrow.Kind((arrow.Kind((arrow.typeclasses.ForConst, arrow.typeclasses.value.A)), arrow.typeclasses.value.T)))arrow.typeclasses/arrow.-kind/value.html
arrow.typeclasses
arrow.typeclasses.internal
