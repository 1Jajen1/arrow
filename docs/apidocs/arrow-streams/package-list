$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.streams.internal$ap(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.ap.F)), arrow.streams.internal.ap.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.ap.F)), kotlin.Function1((arrow.streams.internal.ap.A, arrow.streams.internal.ap.B)))))arrow.streams.internal/arrow.-kind/ap.html
$dokka.location:arrow.streams.internal$bracketCase(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.bracketCase.F)), arrow.streams.internal.bracketCase.A)), kotlin.Function1((arrow.streams.internal.bracketCase.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.bracketCase.F)), arrow.streams.internal.bracketCase.B)))), kotlin.Function2((arrow.streams.internal.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.bracketCase.F)), kotlin.Unit)))))arrow.streams.internal/arrow.-kind/bracket-case.html
$dokka.location:arrow.streams.internal$fix(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.fix.F)), arrow.streams.internal.fix.R)))arrow.streams.internal/arrow.-kind/fix.html
$dokka.location:arrow.streams.internal$foldMap(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.foldMap.S)), arrow.streams.internal.foldMap.A)), arrow.core.FunctionK((arrow.streams.internal.foldMap.S, arrow.streams.internal.foldMap.M)), arrow.typeclasses.MonadError((arrow.streams.internal.foldMap.M, kotlin.Throwable)))arrow.streams.internal/arrow.-kind/fold-map.html
$dokka.location:arrow.streams.internal$handleErrorWith(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.handleErrorWith.F)), arrow.streams.internal.handleErrorWith.R)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.handleErrorWith.F)), arrow.streams.internal.handleErrorWith.R)))))arrow.streams.internal/arrow.-kind/handle-error-with.html
$dokka.location:arrow.streams.internal$run(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.run.F)), arrow.streams.internal.run.R)), arrow.typeclasses.MonadError((arrow.streams.internal.run.F, kotlin.Throwable)))arrow.streams.internal/arrow.-kind/run.html
$dokka.location:arrow.streams.internal$transform(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.transform.F)), arrow.streams.internal.transform.A)), kotlin.Function1((arrow.streams.internal.transform.A, arrow.streams.internal.transform.B)), arrow.core.FunctionK((arrow.streams.internal.transform.F, arrow.streams.internal.transform.G)))arrow.streams.internal/arrow.-kind/transform.html
$dokka.location:arrow.streams.internal$transformWith(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.transformWith.F)), arrow.streams.internal.transformWith.R)), kotlin.Function1((arrow.streams.internal.FreeC.Result((arrow.streams.internal.transformWith.R)), arrow.streams.internal.FreeC((arrow.streams.internal.transformWith.F, arrow.streams.internal.transformWith.R2)))))arrow.streams.internal/arrow.-kind/transform-with.html
$dokka.location:arrow.streams.internal.freec.applicative$ap(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.ap.F)), arrow.streams.internal.freec.applicative.ap.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.ap.F)), kotlin.Function1((arrow.streams.internal.freec.applicative.ap.A, arrow.streams.internal.freec.applicative.ap.B)))))arrow.streams.internal.freec.applicative/arrow.-kind/ap.html
$dokka.location:arrow.streams.internal.freec.applicative$map(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.map.F)), arrow.streams.internal.freec.applicative.map.A)), kotlin.Function1((arrow.streams.internal.freec.applicative.map.A, arrow.streams.internal.freec.applicative.map.B)))arrow.streams.internal.freec.applicative/arrow.-kind/map.html
$dokka.location:arrow.streams.internal.freec.applicative$map2(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.map2.F)), arrow.streams.internal.freec.applicative.map2.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.map2.F)), arrow.streams.internal.freec.applicative.map2.B)), kotlin.Function1((arrow.core.Tuple2((arrow.streams.internal.freec.applicative.map2.A, arrow.streams.internal.freec.applicative.map2.B)), arrow.streams.internal.freec.applicative.map2.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/map2.html
$dokka.location:arrow.streams.internal.freec.applicative$map2Eval(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.map2Eval.F)), arrow.streams.internal.freec.applicative.map2Eval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.map2Eval.F)), arrow.streams.internal.freec.applicative.map2Eval.B)))), kotlin.Function1((arrow.core.Tuple2((arrow.streams.internal.freec.applicative.map2Eval.A, arrow.streams.internal.freec.applicative.map2Eval.B)), arrow.streams.internal.freec.applicative.map2Eval.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/map2-eval.html
$dokka.location:arrow.streams.internal.freec.applicative$plus(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.plus.F)), java.math.BigDecimal)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.plus.F)), java.math.BigDecimal)))arrow.streams.internal.freec.applicative/arrow.-kind/plus.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple2((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple3((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple4((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C, arrow.streams.internal.freec.applicative.product.D)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple5((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C, arrow.streams.internal.freec.applicative.product.D, arrow.streams.internal.freec.applicative.product.E)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple6((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C, arrow.streams.internal.freec.applicative.product.D, arrow.streams.internal.freec.applicative.product.E, arrow.streams.internal.freec.applicative.product.FF)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple7((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C, arrow.streams.internal.freec.applicative.product.D, arrow.streams.internal.freec.applicative.product.E, arrow.streams.internal.freec.applicative.product.FF, arrow.streams.internal.freec.applicative.product.G)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple8((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C, arrow.streams.internal.freec.applicative.product.D, arrow.streams.internal.freec.applicative.product.E, arrow.streams.internal.freec.applicative.product.FF, arrow.streams.internal.freec.applicative.product.G, arrow.streams.internal.freec.applicative.product.H)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.core.Tuple9((arrow.streams.internal.freec.applicative.product.A, arrow.streams.internal.freec.applicative.product.B, arrow.streams.internal.freec.applicative.product.C, arrow.streams.internal.freec.applicative.product.D, arrow.streams.internal.freec.applicative.product.E, arrow.streams.internal.freec.applicative.product.FF, arrow.streams.internal.freec.applicative.product.G, arrow.streams.internal.freec.applicative.product.H, arrow.streams.internal.freec.applicative.product.I)))), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.Z)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicative$product(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicative.product.F)), arrow.streams.internal.freec.applicative.product.B)))arrow.streams.internal.freec.applicative/arrow.-kind/product.html
$dokka.location:arrow.streams.internal.freec.applicativeError$attempt(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicativeError.attempt.F)), arrow.streams.internal.freec.applicativeError.attempt.A)))arrow.streams.internal.freec.applicative-error/arrow.-kind/attempt.html
$dokka.location:arrow.streams.internal.freec.applicativeError$catch(arrow.typeclasses.ApplicativeError((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicativeError.catch.F)), kotlin.Throwable)), kotlin.Function0((arrow.streams.internal.freec.applicativeError.catch.A)))arrow.streams.internal.freec.applicative-error/arrow.typeclasses.-applicative-error/catch.html
$dokka.location:arrow.streams.internal.freec.applicativeError$fromEither(arrow.core.Either((arrow.streams.internal.freec.applicativeError.fromEither.EE, arrow.streams.internal.freec.applicativeError.fromEither.A)), kotlin.Function1((arrow.streams.internal.freec.applicativeError.fromEither.EE, kotlin.Throwable)))arrow.streams.internal.freec.applicative-error/arrow.core.-either/from-either.html
$dokka.location:arrow.streams.internal.freec.applicativeError$fromOption(arrow.Kind((arrow.core.ForOption, arrow.streams.internal.freec.applicativeError.fromOption.A)), kotlin.Function0((kotlin.Throwable)))arrow.streams.internal.freec.applicative-error/arrow.-kind/from-option.html
$dokka.location:arrow.streams.internal.freec.applicativeError$fromTry(arrow.Kind((arrow.core.ForTry, arrow.streams.internal.freec.applicativeError.fromTry.A)), kotlin.Function1((kotlin.Throwable, )))arrow.streams.internal.freec.applicative-error/arrow.-kind/from-try.html
$dokka.location:arrow.streams.internal.freec.applicativeError$handleError(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicativeError.handleError.F)), arrow.streams.internal.freec.applicativeError.handleError.A)), kotlin.Function1((kotlin.Throwable, arrow.streams.internal.freec.applicativeError.handleError.A)))arrow.streams.internal.freec.applicative-error/arrow.-kind/handle-error.html
$dokka.location:arrow.streams.internal.freec.applicativeError$handleErrorWith(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicativeError.handleErrorWith.F)), arrow.streams.internal.freec.applicativeError.handleErrorWith.A)), kotlin.Function1((kotlin.Throwable, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.applicativeError.handleErrorWith.F)), arrow.streams.internal.freec.applicativeError.handleErrorWith.A)))))arrow.streams.internal.freec.applicative-error/arrow.-kind/handle-error-with.html
$dokka.location:arrow.streams.internal.freec.applicativeError$raiseError(kotlin.Throwable)arrow.streams.internal.freec.applicative-error/kotlin.-throwable/raise-error.html
$dokka.location:arrow.streams.internal.freec.bracket$bracket(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.bracket.F)), arrow.streams.internal.freec.bracket.bracket.A)), kotlin.Function1((arrow.streams.internal.freec.bracket.bracket.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.bracket.F)), kotlin.Unit)))), kotlin.Function1((arrow.streams.internal.freec.bracket.bracket.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.bracket.F)), arrow.streams.internal.freec.bracket.bracket.B)))))arrow.streams.internal.freec.bracket/arrow.-kind/bracket.html
$dokka.location:arrow.streams.internal.freec.bracket$bracketCase(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.bracketCase.F)), arrow.streams.internal.freec.bracket.bracketCase.A)), kotlin.Function2((arrow.streams.internal.freec.bracket.bracketCase.A, arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.bracketCase.F)), kotlin.Unit)))), kotlin.Function1((arrow.streams.internal.freec.bracket.bracketCase.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.bracketCase.F)), arrow.streams.internal.freec.bracket.bracketCase.B)))))arrow.streams.internal.freec.bracket/arrow.-kind/bracket-case.html
$dokka.location:arrow.streams.internal.freec.bracket$guarantee(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.guarantee.F)), arrow.streams.internal.freec.bracket.guarantee.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.guarantee.F)), kotlin.Unit)))arrow.streams.internal.freec.bracket/arrow.-kind/guarantee.html
$dokka.location:arrow.streams.internal.freec.bracket$guaranteeCase(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.guaranteeCase.F)), arrow.streams.internal.freec.bracket.guaranteeCase.A)), kotlin.Function1((arrow.effects.typeclasses.ExitCase((kotlin.Throwable)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.guaranteeCase.F)), kotlin.Unit)))))arrow.streams.internal.freec.bracket/arrow.-kind/guarantee-case.html
$dokka.location:arrow.streams.internal.freec.bracket$uncancelable(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.bracket.uncancelable.F)), arrow.streams.internal.freec.bracket.uncancelable.A)))arrow.streams.internal.freec.bracket/arrow.-kind/uncancelable.html
$dokka.location:arrow.streams.internal.freec.eq$eqv(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.eq.eqv.F)), arrow.streams.internal.freec.eq.eqv.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.eq.eqv.F)), arrow.streams.internal.freec.eq.eqv.A)), arrow.typeclasses.MonadError((arrow.streams.internal.freec.eq.eqv.G, kotlin.Throwable)), arrow.core.FunctionK((arrow.streams.internal.freec.eq.eqv.F, arrow.streams.internal.freec.eq.eqv.G)), arrow.typeclasses.Eq((arrow.Kind((arrow.streams.internal.freec.eq.eqv.G, arrow.core.Option((arrow.streams.internal.freec.eq.eqv.A)))))))arrow.streams.internal.freec.eq/arrow.-kind/eqv.html
$dokka.location:arrow.streams.internal.freec.eq$neqv(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.eq.neqv.F)), arrow.streams.internal.freec.eq.neqv.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.eq.neqv.F)), arrow.streams.internal.freec.eq.neqv.A)), arrow.typeclasses.MonadError((arrow.streams.internal.freec.eq.neqv.G, kotlin.Throwable)), arrow.core.FunctionK((arrow.streams.internal.freec.eq.neqv.F, arrow.streams.internal.freec.eq.neqv.G)), arrow.typeclasses.Eq((arrow.Kind((arrow.streams.internal.freec.eq.neqv.G, arrow.core.Option((arrow.streams.internal.freec.eq.neqv.A)))))))arrow.streams.internal.freec.eq/arrow.-kind/neqv.html
$dokka.location:arrow.streams.internal.freec.functor$as(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.as.F)), arrow.streams.internal.freec.functor.as.A)), arrow.streams.internal.freec.functor.as.B)arrow.streams.internal.freec.functor/arrow.-kind/as.html
$dokka.location:arrow.streams.internal.freec.functor$fproduct(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.fproduct.F)), arrow.streams.internal.freec.functor.fproduct.A)), kotlin.Function1((arrow.streams.internal.freec.functor.fproduct.A, arrow.streams.internal.freec.functor.fproduct.B)))arrow.streams.internal.freec.functor/arrow.-kind/fproduct.html
$dokka.location:arrow.streams.internal.freec.functor$imap(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.imap.F)), arrow.streams.internal.freec.functor.imap.A)), kotlin.Function1((arrow.streams.internal.freec.functor.imap.A, arrow.streams.internal.freec.functor.imap.B)), kotlin.Function1((arrow.streams.internal.freec.functor.imap.B, arrow.streams.internal.freec.functor.imap.A)))arrow.streams.internal.freec.functor/arrow.-kind/imap.html
$dokka.location:arrow.streams.internal.freec.functor$map(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.map.F)), arrow.streams.internal.freec.functor.map.A)), kotlin.Function1((arrow.streams.internal.freec.functor.map.A, arrow.streams.internal.freec.functor.map.B)))arrow.streams.internal.freec.functor/arrow.-kind/map.html
$dokka.location:arrow.streams.internal.freec.functor$tupleLeft(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.tupleLeft.F)), arrow.streams.internal.freec.functor.tupleLeft.A)), arrow.streams.internal.freec.functor.tupleLeft.B)arrow.streams.internal.freec.functor/arrow.-kind/tuple-left.html
$dokka.location:arrow.streams.internal.freec.functor$tupleRight(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.tupleRight.F)), arrow.streams.internal.freec.functor.tupleRight.A)), arrow.streams.internal.freec.functor.tupleRight.B)arrow.streams.internal.freec.functor/arrow.-kind/tuple-right.html
$dokka.location:arrow.streams.internal.freec.functor$void(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.void.F)), arrow.streams.internal.freec.functor.void.A)))arrow.streams.internal.freec.functor/arrow.-kind/void.html
$dokka.location:arrow.streams.internal.freec.functor$widen(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.functor.widen.F)), arrow.streams.internal.freec.functor.widen.A)))arrow.streams.internal.freec.functor/arrow.-kind/widen.html
$dokka.location:arrow.streams.internal.freec.monad$ap(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.ap.F)), arrow.streams.internal.freec.monad.ap.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.ap.F)), kotlin.Function1((arrow.streams.internal.freec.monad.ap.A, arrow.streams.internal.freec.monad.ap.B)))))arrow.streams.internal.freec.monad/arrow.-kind/ap.html
$dokka.location:arrow.streams.internal.freec.monad$effectM(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.effectM.F)), arrow.streams.internal.freec.monad.effectM.A)), kotlin.Function1((arrow.streams.internal.freec.monad.effectM.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.effectM.F)), arrow.streams.internal.freec.monad.effectM.B)))))arrow.streams.internal.freec.monad/arrow.-kind/effect-m.html
$dokka.location:arrow.streams.internal.freec.monad$flatMap(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.flatMap.F)), arrow.streams.internal.freec.monad.flatMap.A)), kotlin.Function1((arrow.streams.internal.freec.monad.flatMap.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.flatMap.F)), arrow.streams.internal.freec.monad.flatMap.B)))))arrow.streams.internal.freec.monad/arrow.-kind/flat-map.html
$dokka.location:arrow.streams.internal.freec.monad$flatten(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.flatten.F)), arrow.Kind((, arrow.streams.internal.freec.monad.flatten.A)))))arrow.streams.internal.freec.monad/arrow.-kind/flatten.html
$dokka.location:arrow.streams.internal.freec.monad$followedBy(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.followedBy.F)), arrow.streams.internal.freec.monad.followedBy.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.followedBy.F)), arrow.streams.internal.freec.monad.followedBy.B)))arrow.streams.internal.freec.monad/arrow.-kind/followed-by.html
$dokka.location:arrow.streams.internal.freec.monad$followedByEval(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.followedByEval.F)), arrow.streams.internal.freec.monad.followedByEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.followedByEval.F)), arrow.streams.internal.freec.monad.followedByEval.B)))))arrow.streams.internal.freec.monad/arrow.-kind/followed-by-eval.html
$dokka.location:arrow.streams.internal.freec.monad$forEffect(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.forEffect.F)), arrow.streams.internal.freec.monad.forEffect.A)), arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.forEffect.F)), arrow.streams.internal.freec.monad.forEffect.B)))arrow.streams.internal.freec.monad/arrow.-kind/for-effect.html
$dokka.location:arrow.streams.internal.freec.monad$forEffectEval(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.forEffectEval.F)), arrow.streams.internal.freec.monad.forEffectEval.A)), arrow.core.Eval((arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.forEffectEval.F)), arrow.streams.internal.freec.monad.forEffectEval.B)))))arrow.streams.internal.freec.monad/arrow.-kind/for-effect-eval.html
$dokka.location:arrow.streams.internal.freec.monad$ifM(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.ifM.F)), kotlin.Boolean)), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.ifM.F)), arrow.streams.internal.freec.monad.ifM.B)))), kotlin.Function0((arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.ifM.F)), arrow.streams.internal.freec.monad.ifM.B)))))arrow.streams.internal.freec.monad/arrow.-kind/if-m.html
$dokka.location:arrow.streams.internal.freec.monad$map(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.map.F)), arrow.streams.internal.freec.monad.map.A)), kotlin.Function1((arrow.streams.internal.freec.monad.map.A, arrow.streams.internal.freec.monad.map.B)))arrow.streams.internal.freec.monad/arrow.-kind/map.html
$dokka.location:arrow.streams.internal.freec.monad$mproduct(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.mproduct.F)), arrow.streams.internal.freec.monad.mproduct.A)), kotlin.Function1((arrow.streams.internal.freec.monad.mproduct.A, arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monad.mproduct.F)), arrow.streams.internal.freec.monad.mproduct.B)))))arrow.streams.internal.freec.monad/arrow.-kind/mproduct.html
$dokka.location:arrow.streams.internal.freec.monadError$ensure(arrow.Kind((arrow.Kind((arrow.streams.internal.ForFreeC, arrow.streams.internal.freec.monadError.ensure.F)), arrow.streams.internal.freec.monadError.ensure.A)), kotlin.Function0((kotlin.Throwable)), kotlin.Function1((arrow.streams.internal.freec.monadError.ensure.A, kotlin.Boolean)))arrow.streams.internal.freec.monad-error/arrow.-kind/ensure.html
arrow.streams
arrow.streams.internal
arrow.streams.internal.freec.applicative
arrow.streams.internal.freec.applicativeError
arrow.streams.internal.freec.bracket
arrow.streams.internal.freec.eq
arrow.streams.internal.freec.functor
arrow.streams.internal.freec.monad
arrow.streams.internal.freec.monadDefer
arrow.streams.internal.freec.monadError
