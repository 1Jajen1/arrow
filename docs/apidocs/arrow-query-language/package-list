$dokka.format:jekyll
$dokka.linkExtension:html
$dokka.location:arrow.aql.instances.either.count$count(arrow.core.Either.Companion)arrow.aql.instances.either.count/arrow.core.-either/count.html
$dokka.location:arrow.aql.instances.either.from$from(arrow.core.Either.Companion)arrow.aql.instances.either.from/arrow.core.-either/from.html
$dokka.location:arrow.aql.instances.either.from$join(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.from.join.L)), arrow.aql.instances.either.from.join.A)), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.from.join.L)), arrow.aql.instances.either.from.join.B)))arrow.aql.instances.either.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.either.from$join(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.from.join.L)), arrow.core.Tuple2((arrow.aql.instances.either.from.join.A, arrow.aql.instances.either.from.join.B)))), arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.from.join.L)), arrow.aql.instances.either.from.join.C)))arrow.aql.instances.either.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.either.groupBy$groupBy(arrow.core.Either.Companion)arrow.aql.instances.either.group-by/arrow.core.-either/group-by.html
$dokka.location:arrow.aql.instances.either.orderBy$orderBy(arrow.core.Either.Companion)arrow.aql.instances.either.order-by/arrow.core.-either/order-by.html
$dokka.location:arrow.aql.instances.either.select$query(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.select.query.L)), arrow.aql.instances.either.select.query.A)), kotlin.Function1((arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.select.query.L)), arrow.aql.instances.either.select.query.A)), arrow.aql.instances.either.select.query.Z)))arrow.aql.instances.either.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.either.select$select(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.select.select.L)), arrow.aql.instances.either.select.select.A)), kotlin.Function1((arrow.aql.instances.either.select.select.A, arrow.aql.instances.either.select.select.Z)))arrow.aql.instances.either.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.either.select$select(arrow.core.Either.Companion)arrow.aql.instances.either.select/arrow.core.-either/select.html
$dokka.location:arrow.aql.instances.either.select$selectAll(arrow.Kind((arrow.Kind((arrow.core.ForEither, arrow.aql.instances.either.select.selectAll.L)), arrow.aql.instances.either.select.selectAll.A)))arrow.aql.instances.either.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.either.sum$sum(arrow.core.Either.Companion)arrow.aql.instances.either.sum/arrow.core.-either/sum.html
$dokka.location:arrow.aql.instances.either.union$union(arrow.core.Either.Companion)arrow.aql.instances.either.union/arrow.core.-either/union.html
$dokka.location:arrow.aql.instances.eval.from$from(arrow.core.Eval.Companion)arrow.aql.instances.eval.from/arrow.core.-eval/from.html
$dokka.location:arrow.aql.instances.eval.from$join(arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.from.join.A)), arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.from.join.B)))arrow.aql.instances.eval.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.eval.from$join(arrow.Kind((arrow.core.ForEval, arrow.core.Tuple2((arrow.aql.instances.eval.from.join.A, arrow.aql.instances.eval.from.join.B)))), arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.from.join.C)))arrow.aql.instances.eval.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.eval.select$query(arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.select.query.A)), kotlin.Function1((arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.select.query.A)), arrow.aql.instances.eval.select.query.Z)))arrow.aql.instances.eval.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.eval.select$select(arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.select.select.A)), kotlin.Function1((arrow.aql.instances.eval.select.select.A, arrow.aql.instances.eval.select.select.Z)))arrow.aql.instances.eval.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.eval.select$select(arrow.core.Eval.Companion)arrow.aql.instances.eval.select/arrow.core.-eval/select.html
$dokka.location:arrow.aql.instances.eval.select$selectAll(arrow.Kind((arrow.core.ForEval, arrow.aql.instances.eval.select.selectAll.A)))arrow.aql.instances.eval.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.function0.from$from(arrow.core.Function0.Companion)arrow.aql.instances.function0.from/arrow.core.-function0/from.html
$dokka.location:arrow.aql.instances.function0.from$join(arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.from.join.A)), arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.from.join.B)))arrow.aql.instances.function0.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.function0.from$join(arrow.Kind((arrow.core.ForFunction0, arrow.core.Tuple2((arrow.aql.instances.function0.from.join.A, arrow.aql.instances.function0.from.join.B)))), arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.from.join.C)))arrow.aql.instances.function0.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.function0.select$query(arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.select.query.A)), kotlin.Function1((arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.select.query.A)), arrow.aql.instances.function0.select.query.Z)))arrow.aql.instances.function0.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.function0.select$select(arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.select.select.A)), kotlin.Function1((arrow.aql.instances.function0.select.select.A, arrow.aql.instances.function0.select.select.Z)))arrow.aql.instances.function0.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.function0.select$select(arrow.core.Function0.Companion)arrow.aql.instances.function0.select/arrow.core.-function0/select.html
$dokka.location:arrow.aql.instances.function0.select$selectAll(arrow.Kind((arrow.core.ForFunction0, arrow.aql.instances.function0.select.selectAll.A)))arrow.aql.instances.function0.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.id.from$from(arrow.core.Id.Companion)arrow.aql.instances.id.from/arrow.core.-id/from.html
$dokka.location:arrow.aql.instances.id.from$join(arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.from.join.A)), arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.from.join.B)))arrow.aql.instances.id.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.id.from$join(arrow.Kind((arrow.core.ForId, arrow.core.Tuple2((arrow.aql.instances.id.from.join.A, arrow.aql.instances.id.from.join.B)))), arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.from.join.C)))arrow.aql.instances.id.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.id.select$query(arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.select.query.A)), kotlin.Function1((arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.select.query.A)), arrow.aql.instances.id.select.query.Z)))arrow.aql.instances.id.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.id.select$select(arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.select.select.A)), kotlin.Function1((arrow.aql.instances.id.select.select.A, arrow.aql.instances.id.select.select.Z)))arrow.aql.instances.id.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.id.select$select(arrow.core.Id.Companion)arrow.aql.instances.id.select/arrow.core.-id/select.html
$dokka.location:arrow.aql.instances.id.select$selectAll(arrow.Kind((arrow.core.ForId, arrow.aql.instances.id.select.selectAll.A)))arrow.aql.instances.id.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.list.from$join(kotlin.collections.List((arrow.aql.instances.list.from.join.A)), kotlin.collections.List((arrow.aql.instances.list.from.join.B)))arrow.aql.instances.list.from/kotlin.collections.-list/join.html
$dokka.location:arrow.aql.instances.list.from$join(kotlin.collections.List((arrow.core.Tuple2((arrow.aql.instances.list.from.join.A, arrow.aql.instances.list.from.join.B)))), kotlin.collections.List((arrow.aql.instances.list.from.join.C)))arrow.aql.instances.list.from/kotlin.collections.-list/join.html
$dokka.location:arrow.aql.instances.list.select$query(kotlin.collections.List((arrow.aql.instances.list.select.query.A)), kotlin.Function1((arrow.Kind((arrow.data.ForListK, arrow.aql.instances.list.select.query.A)), arrow.aql.instances.list.select.query.Z)))arrow.aql.instances.list.select/kotlin.collections.-list/query.html
$dokka.location:arrow.aql.instances.list.select$select(kotlin.collections.List((arrow.aql.instances.list.select.select.A)), kotlin.Function1((arrow.aql.instances.list.select.select.A, arrow.aql.instances.list.select.select.Z)))arrow.aql.instances.list.select/kotlin.collections.-list/select.html
$dokka.location:arrow.aql.instances.list.select$selectAll(kotlin.collections.List((arrow.aql.instances.list.select.selectAll.A)))arrow.aql.instances.list.select/kotlin.collections.-list/select-all.html
$dokka.location:arrow.aql.instances.listk.count$count(arrow.data.ListK.Companion)arrow.aql.instances.listk.count/arrow.data.-list-k/count.html
$dokka.location:arrow.aql.instances.listk.from$from(arrow.data.ListK.Companion)arrow.aql.instances.listk.from/arrow.data.-list-k/from.html
$dokka.location:arrow.aql.instances.listk.from$join(arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.from.join.A)), arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.from.join.B)))arrow.aql.instances.listk.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.listk.from$join(arrow.Kind((arrow.data.ForListK, arrow.core.Tuple2((arrow.aql.instances.listk.from.join.A, arrow.aql.instances.listk.from.join.B)))), arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.from.join.C)))arrow.aql.instances.listk.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.listk.groupBy$groupBy(arrow.data.ListK.Companion)arrow.aql.instances.listk.group-by/arrow.data.-list-k/group-by.html
$dokka.location:arrow.aql.instances.listk.orderBy$orderBy(arrow.data.ListK.Companion)arrow.aql.instances.listk.order-by/arrow.data.-list-k/order-by.html
$dokka.location:arrow.aql.instances.listk.select$query(arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.select.query.A)), kotlin.Function1((arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.select.query.A)), arrow.aql.instances.listk.select.query.Z)))arrow.aql.instances.listk.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.listk.select$select(arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.select.select.A)), kotlin.Function1((arrow.aql.instances.listk.select.select.A, arrow.aql.instances.listk.select.select.Z)))arrow.aql.instances.listk.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.listk.select$select(arrow.data.ListK.Companion)arrow.aql.instances.listk.select/arrow.data.-list-k/select.html
$dokka.location:arrow.aql.instances.listk.select$selectAll(arrow.Kind((arrow.data.ForListK, arrow.aql.instances.listk.select.selectAll.A)))arrow.aql.instances.listk.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.listk.sum$sum(arrow.data.ListK.Companion)arrow.aql.instances.listk.sum/arrow.data.-list-k/sum.html
$dokka.location:arrow.aql.instances.listk.union$union(arrow.data.ListK.Companion)arrow.aql.instances.listk.union/arrow.data.-list-k/union.html
$dokka.location:arrow.aql.instances.listk.where$where(arrow.data.ListK.Companion)arrow.aql.instances.listk.where/arrow.data.-list-k/where.html
$dokka.location:arrow.aql.instances.nonemptylist.count$count(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.count/arrow.data.-non-empty-list/count.html
$dokka.location:arrow.aql.instances.nonemptylist.from$from(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.from/arrow.data.-non-empty-list/from.html
$dokka.location:arrow.aql.instances.nonemptylist.from$join(arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.from.join.A)), arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.from.join.B)))arrow.aql.instances.nonemptylist.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.nonemptylist.from$join(arrow.Kind((arrow.data.ForNonEmptyList, arrow.core.Tuple2((arrow.aql.instances.nonemptylist.from.join.A, arrow.aql.instances.nonemptylist.from.join.B)))), arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.from.join.C)))arrow.aql.instances.nonemptylist.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.nonemptylist.groupBy$groupBy(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.group-by/arrow.data.-non-empty-list/group-by.html
$dokka.location:arrow.aql.instances.nonemptylist.orderBy$orderBy(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.order-by/arrow.data.-non-empty-list/order-by.html
$dokka.location:arrow.aql.instances.nonemptylist.select$query(arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.select.query.A)), kotlin.Function1((arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.select.query.A)), arrow.aql.instances.nonemptylist.select.query.Z)))arrow.aql.instances.nonemptylist.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.nonemptylist.select$select(arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.select.select.A)), kotlin.Function1((arrow.aql.instances.nonemptylist.select.select.A, arrow.aql.instances.nonemptylist.select.select.Z)))arrow.aql.instances.nonemptylist.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.nonemptylist.select$select(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.select/arrow.data.-non-empty-list/select.html
$dokka.location:arrow.aql.instances.nonemptylist.select$selectAll(arrow.Kind((arrow.data.ForNonEmptyList, arrow.aql.instances.nonemptylist.select.selectAll.A)))arrow.aql.instances.nonemptylist.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.nonemptylist.sum$sum(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.sum/arrow.data.-non-empty-list/sum.html
$dokka.location:arrow.aql.instances.nonemptylist.union$union(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.union/arrow.data.-non-empty-list/union.html
$dokka.location:arrow.aql.instances.nonemptylist.where$where(arrow.data.NonEmptyList.Companion)arrow.aql.instances.nonemptylist.where/arrow.data.-non-empty-list/where.html
$dokka.location:arrow.aql.instances.option.count$count(arrow.core.Option.Companion)arrow.aql.instances.option.count/arrow.core.-option/count.html
$dokka.location:arrow.aql.instances.option.from$from(arrow.core.Option.Companion)arrow.aql.instances.option.from/arrow.core.-option/from.html
$dokka.location:arrow.aql.instances.option.from$join(arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.from.join.A)), arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.from.join.B)))arrow.aql.instances.option.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.option.from$join(arrow.Kind((arrow.core.ForOption, arrow.core.Tuple2((arrow.aql.instances.option.from.join.A, arrow.aql.instances.option.from.join.B)))), arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.from.join.C)))arrow.aql.instances.option.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.option.groupBy$groupBy(arrow.core.Option.Companion)arrow.aql.instances.option.group-by/arrow.core.-option/group-by.html
$dokka.location:arrow.aql.instances.option.orderBy$orderBy(arrow.core.Option.Companion)arrow.aql.instances.option.order-by/arrow.core.-option/order-by.html
$dokka.location:arrow.aql.instances.option.select$query(arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.select.query.A)), kotlin.Function1((arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.select.query.A)), arrow.aql.instances.option.select.query.Z)))arrow.aql.instances.option.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.option.select$select(arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.select.select.A)), kotlin.Function1((arrow.aql.instances.option.select.select.A, arrow.aql.instances.option.select.select.Z)))arrow.aql.instances.option.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.option.select$select(arrow.core.Option.Companion)arrow.aql.instances.option.select/arrow.core.-option/select.html
$dokka.location:arrow.aql.instances.option.select$selectAll(arrow.Kind((arrow.core.ForOption, arrow.aql.instances.option.select.selectAll.A)))arrow.aql.instances.option.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.option.sum$sum(arrow.core.Option.Companion)arrow.aql.instances.option.sum/arrow.core.-option/sum.html
$dokka.location:arrow.aql.instances.option.union$union(arrow.core.Option.Companion)arrow.aql.instances.option.union/arrow.core.-option/union.html
$dokka.location:arrow.aql.instances.option.where$where(arrow.core.Option.Companion)arrow.aql.instances.option.where/arrow.core.-option/where.html
$dokka.location:arrow.aql.instances.sequence.from$join(kotlin.sequences.Sequence((arrow.aql.instances.sequence.from.join.A)), kotlin.sequences.Sequence((arrow.aql.instances.sequence.from.join.B)))arrow.aql.instances.sequence.from/kotlin.sequences.-sequence/join.html
$dokka.location:arrow.aql.instances.sequence.from$join(kotlin.sequences.Sequence((arrow.core.Tuple2((arrow.aql.instances.sequence.from.join.A, arrow.aql.instances.sequence.from.join.B)))), kotlin.sequences.Sequence((arrow.aql.instances.sequence.from.join.C)))arrow.aql.instances.sequence.from/kotlin.sequences.-sequence/join.html
$dokka.location:arrow.aql.instances.sequence.select$query(kotlin.sequences.Sequence((arrow.aql.instances.sequence.select.query.A)), kotlin.Function1((arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequence.select.query.A)), arrow.aql.instances.sequence.select.query.Z)))arrow.aql.instances.sequence.select/kotlin.sequences.-sequence/query.html
$dokka.location:arrow.aql.instances.sequence.select$select(kotlin.sequences.Sequence((arrow.aql.instances.sequence.select.select.A)), kotlin.Function1((arrow.aql.instances.sequence.select.select.A, arrow.aql.instances.sequence.select.select.Z)))arrow.aql.instances.sequence.select/kotlin.sequences.-sequence/select.html
$dokka.location:arrow.aql.instances.sequence.select$selectAll(kotlin.sequences.Sequence((arrow.aql.instances.sequence.select.selectAll.A)))arrow.aql.instances.sequence.select/kotlin.sequences.-sequence/select-all.html
$dokka.location:arrow.aql.instances.sequencek.count$count(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.count/arrow.data.-sequence-k/count.html
$dokka.location:arrow.aql.instances.sequencek.from$from(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.from/arrow.data.-sequence-k/from.html
$dokka.location:arrow.aql.instances.sequencek.from$join(arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.from.join.A)), arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.from.join.B)))arrow.aql.instances.sequencek.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.sequencek.from$join(arrow.Kind((arrow.data.ForSequenceK, arrow.core.Tuple2((arrow.aql.instances.sequencek.from.join.A, arrow.aql.instances.sequencek.from.join.B)))), arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.from.join.C)))arrow.aql.instances.sequencek.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.sequencek.groupBy$groupBy(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.group-by/arrow.data.-sequence-k/group-by.html
$dokka.location:arrow.aql.instances.sequencek.orderBy$orderBy(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.order-by/arrow.data.-sequence-k/order-by.html
$dokka.location:arrow.aql.instances.sequencek.select$query(arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.select.query.A)), kotlin.Function1((arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.select.query.A)), arrow.aql.instances.sequencek.select.query.Z)))arrow.aql.instances.sequencek.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.sequencek.select$select(arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.select.select.A)), kotlin.Function1((arrow.aql.instances.sequencek.select.select.A, arrow.aql.instances.sequencek.select.select.Z)))arrow.aql.instances.sequencek.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.sequencek.select$select(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.select/arrow.data.-sequence-k/select.html
$dokka.location:arrow.aql.instances.sequencek.select$selectAll(arrow.Kind((arrow.data.ForSequenceK, arrow.aql.instances.sequencek.select.selectAll.A)))arrow.aql.instances.sequencek.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.sequencek.sum$sum(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.sum/arrow.data.-sequence-k/sum.html
$dokka.location:arrow.aql.instances.sequencek.union$union(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.union/arrow.data.-sequence-k/union.html
$dokka.location:arrow.aql.instances.sequencek.where$where(arrow.data.SequenceK.Companion)arrow.aql.instances.sequencek.where/arrow.data.-sequence-k/where.html
$dokka.location:arrow.aql.instances.try.count$count(arrow.core.Try.Companion)arrow.aql.instances.try.count/arrow.core.-try/count.html
$dokka.location:arrow.aql.instances.try.from$from(arrow.core.Try.Companion)arrow.aql.instances.try.from/arrow.core.-try/from.html
$dokka.location:arrow.aql.instances.try.from$join(arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.from.join.A)), arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.from.join.B)))arrow.aql.instances.try.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.try.from$join(arrow.Kind((arrow.core.ForTry, arrow.core.Tuple2((arrow.aql.instances.try.from.join.A, arrow.aql.instances.try.from.join.B)))), arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.from.join.C)))arrow.aql.instances.try.from/arrow.-kind/join.html
$dokka.location:arrow.aql.instances.try.groupBy$groupBy(arrow.core.Try.Companion)arrow.aql.instances.try.group-by/arrow.core.-try/group-by.html
$dokka.location:arrow.aql.instances.try.orderBy$orderBy(arrow.core.Try.Companion)arrow.aql.instances.try.order-by/arrow.core.-try/order-by.html
$dokka.location:arrow.aql.instances.try.select$query(arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.select.query.A)), kotlin.Function1((arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.select.query.A)), arrow.aql.instances.try.select.query.Z)))arrow.aql.instances.try.select/arrow.-kind/query.html
$dokka.location:arrow.aql.instances.try.select$select(arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.select.select.A)), kotlin.Function1((arrow.aql.instances.try.select.select.A, arrow.aql.instances.try.select.select.Z)))arrow.aql.instances.try.select/arrow.-kind/select.html
$dokka.location:arrow.aql.instances.try.select$select(arrow.core.Try.Companion)arrow.aql.instances.try.select/arrow.core.-try/select.html
$dokka.location:arrow.aql.instances.try.select$selectAll(arrow.Kind((arrow.core.ForTry, arrow.aql.instances.try.select.selectAll.A)))arrow.aql.instances.try.select/arrow.-kind/select-all.html
$dokka.location:arrow.aql.instances.try.sum$sum(arrow.core.Try.Companion)arrow.aql.instances.try.sum/arrow.core.-try/sum.html
$dokka.location:arrow.aql.instances.try.union$union(arrow.core.Try.Companion)arrow.aql.instances.try.union/arrow.core.-try/union.html
$dokka.location:arrow.aql.instances.try.where$where(arrow.core.Try.Companion)arrow.aql.instances.try.where/arrow.core.-try/where.html
arrow.aql
arrow.aql.instances
arrow.aql.instances.either.count
arrow.aql.instances.either.from
arrow.aql.instances.either.groupBy
arrow.aql.instances.either.orderBy
arrow.aql.instances.either.select
arrow.aql.instances.either.sum
arrow.aql.instances.either.union
arrow.aql.instances.eval.from
arrow.aql.instances.eval.select
arrow.aql.instances.function0.from
arrow.aql.instances.function0.select
arrow.aql.instances.id.from
arrow.aql.instances.id.select
arrow.aql.instances.list.count
arrow.aql.instances.list.from
arrow.aql.instances.list.groupBy
arrow.aql.instances.list.orderBy
arrow.aql.instances.list.select
arrow.aql.instances.list.sum
arrow.aql.instances.list.union
arrow.aql.instances.list.where
arrow.aql.instances.listk.count
arrow.aql.instances.listk.from
arrow.aql.instances.listk.groupBy
arrow.aql.instances.listk.orderBy
arrow.aql.instances.listk.select
arrow.aql.instances.listk.sum
arrow.aql.instances.listk.union
arrow.aql.instances.listk.where
arrow.aql.instances.nonemptylist.count
arrow.aql.instances.nonemptylist.from
arrow.aql.instances.nonemptylist.groupBy
arrow.aql.instances.nonemptylist.orderBy
arrow.aql.instances.nonemptylist.select
arrow.aql.instances.nonemptylist.sum
arrow.aql.instances.nonemptylist.union
arrow.aql.instances.nonemptylist.where
arrow.aql.instances.option.count
arrow.aql.instances.option.from
arrow.aql.instances.option.groupBy
arrow.aql.instances.option.orderBy
arrow.aql.instances.option.select
arrow.aql.instances.option.sum
arrow.aql.instances.option.union
arrow.aql.instances.option.where
arrow.aql.instances.sequence.count
arrow.aql.instances.sequence.from
arrow.aql.instances.sequence.groupBy
arrow.aql.instances.sequence.orderBy
arrow.aql.instances.sequence.select
arrow.aql.instances.sequence.sum
arrow.aql.instances.sequence.union
arrow.aql.instances.sequence.where
arrow.aql.instances.sequencek.count
arrow.aql.instances.sequencek.from
arrow.aql.instances.sequencek.groupBy
arrow.aql.instances.sequencek.orderBy
arrow.aql.instances.sequencek.select
arrow.aql.instances.sequencek.sum
arrow.aql.instances.sequencek.union
arrow.aql.instances.sequencek.where
arrow.aql.instances.try.count
arrow.aql.instances.try.from
arrow.aql.instances.try.groupBy
arrow.aql.instances.try.orderBy
arrow.aql.instances.try.select
arrow.aql.instances.try.sum
arrow.aql.instances.try.union
arrow.aql.instances.try.where
